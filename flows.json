[
    {
        "id": "f96e1e80.b1c1a",
        "type": "tab",
        "label": "Globals",
        "disabled": false
    },
    {
        "id": "9556cd1.486d63",
        "type": "tab",
        "label": "CommandAPI",
        "disabled": false,
        "info": ""
    },
    {
        "id": "94771f7d.38037",
        "type": "tab",
        "label": "QueryAPI",
        "disabled": false,
        "info": ""
    },
    {
        "id": "71545018.aa70d",
        "type": "tab",
        "label": "Data In",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8d7a0ee3.fbbaf",
        "type": "tab",
        "label": "Events",
        "disabled": false
    },
    {
        "id": "d7e6850e.758d08",
        "type": "tab",
        "label": "Weather",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4ec77ac0.46dd44",
        "type": "tab",
        "label": "Sensors",
        "disabled": false
    },
    {
        "id": "1f4e439a.78fd7c",
        "type": "tab",
        "label": "Websockets",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4b6a44a6.362b4c",
        "type": "tab",
        "label": "Speech",
        "disabled": false,
        "info": "The speecg tab"
    },
    {
        "id": "e74fac43.1f2b6",
        "type": "tab",
        "label": "Presence",
        "disabled": false,
        "info": "# The Bobb Presence System.\n\nBobb Presence is driven by several subsystems including:\n\n - WiFi Presence\n - Tracking\n - Geofencing\n - Face ID\n \nEach subsystem sends its opinion of whether or not an individual is at a particular building. \nSome subsystems have a more reliable opinion than others of what it looks like for a individual to leave.\n\nWiFi Presence only really knows that a device has been spotted on the WiFi, or that it hasn't been seen for a while, \nwhereas Tracking receives _entered_ and _exited_ events.\n\nThe Presence Core processes and stores presence reports from each subsystem. It analyses this data and compares \nopinions from different subsystems, and makes a decision about which building a person is at,and by deduction how \nmany are at each building. It then forwards simplified data to the data engine when anything changes.\n\nPresence Core must inform Bobb of:\n - The current building for each person (or no building)\n - The number of people present in each building\n - The list of people present in each building\n"
    },
    {
        "id": "43f12961.0018d8",
        "type": "tab",
        "label": "Tracking",
        "disabled": false,
        "info": "# Tracking\n\nThe Tracking flows are intended to track the \ngeographical location of participating users.\nCurrently, two methods are supported:\n\n## OwnTracks reports\nThe user sets up OwnTracks on their phone, with \noptional defined regions for Bobb buildings\n\n## Geofence Reports\nThe user sets up a geofencing app on their phone.\nwith regions defined for Bobb buildings"
    },
    {
        "id": "6dba87b8.b5f088",
        "type": "tab",
        "label": "RF/RX",
        "disabled": false
    },
    {
        "id": "998225a2.49fc08",
        "type": "tab",
        "label": "HomeKit",
        "disabled": false,
        "info": ""
    },
    {
        "id": "16c1aedb.4b0961",
        "type": "tab",
        "label": "Sonoffs"
    },
    {
        "id": "232539f1.de52a6",
        "type": "tab",
        "label": "TP-Link",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7a8e8ea9.9ee48",
        "type": "tab",
        "label": "Scheduling",
        "disabled": true,
        "info": ""
    },
    {
        "id": "4d99c870.c1d7a8",
        "type": "tab",
        "label": "Daylight"
    },
    {
        "id": "27c62c51.a48994",
        "type": "tab",
        "label": "Notifier",
        "disabled": false
    },
    {
        "id": "ea307f99.462f6",
        "type": "tab",
        "label": "CamMotion",
        "disabled": true,
        "info": ""
    },
    {
        "id": "f1c4be48.0cc6a",
        "type": "tab",
        "label": "Logging",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b06e0bb7.bfaaa8",
        "type": "tab",
        "label": "IRDoorway",
        "disabled": true,
        "info": ""
    },
    {
        "id": "300a541.08ca6ac",
        "type": "tab",
        "label": "IR"
    },
    {
        "id": "8674b994.809458",
        "type": "tab",
        "label": "Tests",
        "disabled": false,
        "info": "Tests for Bobb - designed to offer rapid access to simple tests of each Bobb subsystem, to verify functionality after code changes."
    },
    {
        "id": "a6d79fe1.ede4f",
        "type": "tab",
        "label": "Auth",
        "disabled": false,
        "info": ""
    },
    {
        "id": "10b53f5c.013c31",
        "type": "tab",
        "label": "Kodi",
        "disabled": false,
        "info": "Listen for incoming Kodi events, and pass them on to Events engine."
    },
    {
        "id": "7c5e300a.a71d9",
        "type": "tab",
        "label": "Testbed"
    },
    {
        "id": "2aa8f483.50506c",
        "type": "tab",
        "label": "Faces",
        "disabled": true,
        "info": ""
    },
    {
        "id": "8cd6ec7f.acc8b",
        "type": "tab",
        "label": "Hello World",
        "disabled": true,
        "info": ""
    },
    {
        "id": "a8359a32.45fb58",
        "type": "tab",
        "label": "Bus",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bba312c4.6e0fd",
        "type": "tab",
        "label": "Local",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9a378505.438078",
        "type": "subflow",
        "name": "Iterate",
        "in": [
            {
                "x": 220,
                "y": 219,
                "wires": [
                    {
                        "id": "3bd46d55.c16a72"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 454,
                "y": 174,
                "wires": [
                    {
                        "id": "3bd46d55.c16a72",
                        "port": 0
                    }
                ]
            },
            {
                "x": 455,
                "y": 259,
                "wires": [
                    {
                        "id": "3bd46d55.c16a72",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "808709f4.bc3958",
        "type": "subflow",
        "name": "PB Prep",
        "info": "Prepares a message for PushBullet",
        "in": [
            {
                "x": 160,
                "y": 140,
                "wires": [
                    {
                        "id": "254f5ad5.d9d956"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 140,
                "wires": [
                    {
                        "id": "254f5ad5.d9d956",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "7ba5f330.3b78cc",
        "type": "subflow",
        "name": "Offline/Online Buffer",
        "info": "",
        "in": [
            {
                "x": 260,
                "y": 160,
                "wires": [
                    {
                        "id": "d43d58a4.95cd08"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1060,
                "y": 180,
                "wires": [
                    {
                        "id": "ee98e974.33c9f8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "2161b62e.a025aa",
        "type": "subflow",
        "name": "Authenticate Token",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "9f93c45.a8dff38"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 60,
                "wires": [
                    {
                        "id": "8682b8e2.ccf088",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1180,
                "y": 140,
                "wires": [
                    {
                        "id": "e07b2d2.df7d9d",
                        "port": 0
                    }
                ]
            }
        ],
        "inputLabels": [
            "httpRequest"
        ],
        "outputLabels": [
            "Success",
            "Failure"
        ]
    },
    {
        "id": "f31934a9.9c1f88",
        "type": "subflow",
        "name": "hueLightOnOff",
        "info": "",
        "in": [
            {
                "x": 140,
                "y": 420,
                "wires": [
                    {
                        "id": "9bb35d59.c1f43"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 420,
                "wires": [
                    {
                        "id": "9bb35d59.c1f43",
                        "port": 0
                    }
                ]
            },
            {
                "x": 440,
                "y": 420,
                "wires": [
                    {
                        "id": "9bb35d59.c1f43",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "d953cf06.cd796",
        "type": "subflow",
        "name": "HueIDfromName",
        "info": "",
        "in": [
            {
                "x": 140,
                "y": 520,
                "wires": [
                    {
                        "id": "4310186.3f409e8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 500,
                "wires": [
                    {
                        "id": "4310186.3f409e8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 440,
                "y": 540,
                "wires": [
                    {
                        "id": "4310186.3f409e8",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "cbfd83cb.65744",
        "type": "subflow",
        "name": "readTableEntity",
        "info": "Reads a single table entity from Azure Table Storage.\nSpecify table, partitionKey and rowKey properties in msg.\nResult is passed in payload of first output. Errors are passed in payload of 2nd output.",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "77a76fb0.6252c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "77a76fb0.6252c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 120,
                "wires": [
                    {
                        "id": "77a76fb0.6252c",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "2debb550.d34c7a",
        "type": "subflow",
        "name": "listBlobsWithPrefix",
        "info": "Gets a list of blobs with a given prefix in a container in Azure Blob Storage.\nSpecify container and prefix properties in msg.\nResult is passed in payload of first output. Errors are passed in payload of 2nd output.",
        "in": [
            {
                "x": 220,
                "y": 380,
                "wires": [
                    {
                        "id": "bbf39436.b7c068"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 340,
                "wires": [
                    {
                        "id": "bbf39436.b7c068",
                        "port": 0
                    }
                ]
            },
            {
                "x": 560,
                "y": 420,
                "wires": [
                    {
                        "id": "bbf39436.b7c068",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "97970932.8c6948",
        "type": "subflow",
        "name": "oDataToObject",
        "info": "Converts an incoming oData entity payload to a standard JavaScript object with appropriate data types for each property.",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "5300cf44.6424"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 60,
                "wires": [
                    {
                        "id": "5300cf44.6424",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "e645c869.888998",
        "type": "subflow",
        "name": "writeTableEntity",
        "info": "Writes a single table entity to Azure Table Storage (insert or update).\nSpecify table, partitionKey and rowKey properties in msg. Pass an oData-formatted entity in payload.\nResult is passed in payload of first output. Errors are passed in payload of 2nd output.",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "7f33b885.cb38d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "7f33b885.cb38d8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 120,
                "wires": [
                    {
                        "id": "7f33b885.cb38d8",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "1475fab7.7ab5a5",
        "type": "subflow",
        "name": "runTableQuery",
        "info": "Runs a query on a table from Azure Table Storage.\nReturns an oData formatted array of entity objects. Specify table, where clause (array), select fields (array) and top n properties in msg.\nResult is passed in payload of first output. Errors are passed in payload of 2nd output.",
        "in": [
            {
                "x": 40,
                "y": 60,
                "wires": [
                    {
                        "id": "5f45a615.186c48"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "5f45a615.186c48",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 100,
                "wires": [
                    {
                        "id": "5f45a615.186c48",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "30841400.5f7e8c",
        "type": "subflow",
        "name": "iterateODataResults",
        "info": "Iterates through the entries in an oData results object, generating an output message per element.",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "cb3c7967.ee55d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "cb3c7967.ee55d8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "be29c938.4a2448",
        "type": "subflow",
        "name": "SendToScheduler",
        "info": "# **Requests a callback from the Bobb Scheduler service.**#\n\n## **Mandatory parameters:**##\n\n#### **msg.topic**\n*The device path or other tag to identify this callback*\n\n#### **msg.url**\n*The callback URL*\n\n#### **msg.time**\n*The JavaScript date/time to get the callback (milliseconds)*\n\n## **Optional parameters:**##\n#### **msg.source**\n*Where the request came from*\n\n#### **msg.reason**\n*Why the callback is needed*\n\n#### **msg.repeat**\n*Repeat the callback every n minutes until cancelled*",
        "in": [
            {
                "x": 180,
                "y": 120,
                "wires": [
                    {
                        "id": "3e36ac4f.c0d174"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 480,
                "y": 120,
                "wires": [
                    {
                        "id": "3e36ac4f.c0d174",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "7f89fc4.250c804",
        "type": "subflow",
        "name": "trackSonoffs",
        "info": "",
        "in": [
            {
                "x": 320,
                "y": 200,
                "wires": [
                    {
                        "id": "2646374d.1029d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 200,
                "wires": [
                    {
                        "id": "2646374d.1029d8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "4c7935db.1a5afc",
        "type": "subflow",
        "name": "adminAuth",
        "info": "",
        "in": [
            {
                "x": 40,
                "y": 60,
                "wires": [
                    {
                        "id": "1fe31c3.ad9aee4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 20,
                "wires": [
                    {
                        "id": "761acf3b.e4c51",
                        "port": 0
                    }
                ]
            },
            {
                "x": 440,
                "y": 100,
                "wires": [
                    {
                        "id": "761acf3b.e4c51",
                        "port": 1
                    }
                ]
            }
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "18e12be8.f7c244",
        "type": "subflow",
        "name": "bobbAuth",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "89a9ecf2.22dcf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "89a9ecf2.22dcf",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 140,
                "wires": [
                    {
                        "id": "89a9ecf2.22dcf",
                        "port": 1
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "73b6bb8a.e9cc54",
        "type": "tls-config",
        "z": "",
        "name": "Unverified (localhost)",
        "cert": "",
        "key": "",
        "ca": "",
        "verifyservercert": false
    },
    {
        "id": "bb288c07.f8e8b",
        "type": "pushbullet-config",
        "z": "8cd6ec7f.acc8b",
        "name": "joel@joelj.co.uk"
    },
    {
        "id": "f5e7cbf5.11cb88",
        "type": "tls-config",
        "z": "",
        "name": "verified",
        "cert": "",
        "key": "",
        "ca": "",
        "verifyservercert": true
    },
    {
        "id": "3f7d6808.d41bf8",
        "type": "pushbullet-config",
        "z": "",
        "name": "hello@jfdi.info"
    },
    {
        "id": "15b12f9f.4ee7e",
        "type": "google-api-config",
        "z": ""
    },
    {
        "id": "74909a69.35ca34",
        "type": "mqtt-broker",
        "z": "",
        "name": "cloudMQTT",
        "broker": "$(MQTT_BROKER_ADDRESS)",
        "port": "$(MQTT_BROKER_PORT)",
        "tls": "f5e7cbf5.11cb88",
        "clientid": "$(WEBSITE_SITE_NAME)",
        "usetls": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "bobb/status",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "online",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "bobb/status",
        "willQos": "0",
        "willRetain": "true",
        "willPayload": "offline"
    },
    {
        "id": "69bbf4b3.af508c",
        "type": "websocket-listener",
        "z": "",
        "path": "/ws/bobb",
        "wholemsg": "false"
    },
    {
        "id": "59e0ea4f.667bc4",
        "type": "swagger-doc",
        "z": "",
        "summary": "Posts an event to the Bobb event processing engine",
        "description": "Posts an event to the Bobb event processing engine",
        "tags": "events",
        "consumes": "",
        "produces": "",
        "parameters": [
            {
                "name": "event",
                "in": "path",
                "required": true,
                "type": "string"
            }
        ],
        "responses": {
            "200": {
                "description": "OK"
            },
            "400": {
                "description": "Badly formatted event ID"
            }
        },
        "deprecated": false
    },
    {
        "id": "afb54b04.53f658",
        "type": "swagger-doc",
        "z": "",
        "summary": "sets the ON state of a device",
        "description": "sets the ON state of a device",
        "tags": "device state set",
        "consumes": "application/json",
        "produces": "",
        "parameters": [
            {
                "name": "accountId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "buildingId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "deviceId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "state",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "authToken",
                "in": "path",
                "required": true,
                "type": "string"
            }
        ],
        "responses": {
            "200": {
                "description": "state was changed"
            },
            "400": {
                "description": "invalid state"
            },
            "404": {
                "description": "nonexistant account, building or device"
            }
        },
        "deprecated": false
    },
    {
        "id": "7193f4b.3f3a80c",
        "type": "swagger-doc",
        "z": "",
        "summary": "sets the ON state of a device",
        "description": "sets the ON state of a device",
        "tags": "device state set",
        "consumes": "application/json",
        "produces": "",
        "parameters": [
            {
                "name": "authToken",
                "in": "header",
                "description": "a valid authorisation token",
                "required": false,
                "type": "string"
            },
            {
                "name": "accountId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "buildingId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "deviceId",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "state",
                "in": "path",
                "required": true,
                "type": "string"
            },
            {
                "name": "authToken",
                "in": "path",
                "required": true,
                "type": "string"
            }
        ],
        "responses": {
            "200": {
                "description": "state was changed"
            },
            "400": {
                "description": "invalid state"
            },
            "404": {
                "description": "nonexistant account, building or device"
            }
        },
        "deprecated": false
    },
    {
        "id": "2d91b3eb.d6ffcc",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "fc9d4019.cb0ad",
        "type": "swagger-doc",
        "z": "",
        "summary": "Posts an event to the Bobb event processing engine",
        "description": "Posts an event to the Bobb event processing engine",
        "tags": "events",
        "consumes": "",
        "produces": "",
        "parameters": [
            {
                "name": "event",
                "in": "path",
                "required": true,
                "type": "string"
            }
        ],
        "responses": {
            "200": {
                "description": "OK"
            },
            "400": {
                "description": "Badly formatted event ID"
            }
        },
        "deprecated": false
    },
    {
        "id": "24f5193f.3d6056",
        "type": "swagger-doc",
        "z": "",
        "summary": "Set a scene",
        "description": "",
        "tags": "set, scene",
        "consumes": "",
        "produces": "",
        "parameters": [],
        "responses": {},
        "deprecated": false
    },
    {
        "id": "12e5b76b.90ab79",
        "type": "swagger-doc",
        "z": "",
        "summary": "Set a scene",
        "description": "",
        "tags": "set, scene",
        "consumes": "",
        "produces": "",
        "parameters": [],
        "responses": {},
        "deprecated": false
    },
    {
        "id": "272c70b2.87cb",
        "type": "http in",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "url": "/ESPButton69/:id",
        "method": "get",
        "swaggerDoc": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "e854eda.0b1ea1"
            ]
        ]
    },
    {
        "id": "da4187c9.5d6018",
        "type": "template",
        "z": "8cd6ec7f.acc8b",
        "name": "Hello World",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Hello World. You're {{req.params.id}} and you're {{req.params.state}}.",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "9126b793.176228"
            ]
        ]
    },
    {
        "id": "9126b793.176228",
        "type": "http response",
        "z": "8cd6ec7f.acc8b",
        "name": "response",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "173b02f9.0870cd",
        "type": "pushbullet",
        "z": "8cd6ec7f.acc8b",
        "config": "bb288c07.f8e8b",
        "pushtype": "note",
        "title": "",
        "chan": "",
        "name": "",
        "x": 488.99998474121094,
        "y": 247,
        "wires": []
    },
    {
        "id": "1b570e30.4e3592",
        "type": "inject",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "Hello!",
        "payload": "bumhole",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 182.99998474121094,
        "y": 244,
        "wires": [
            [
                "c62a822c.cd1c6",
                "173b02f9.0870cd",
                "80815c07.e4e61"
            ]
        ]
    },
    {
        "id": "c62a822c.cd1c6",
        "type": "exec",
        "z": "8cd6ec7f.acc8b",
        "command": "mpg123",
        "addpay": false,
        "append": "/home/pi/alarm.mp3",
        "useSpawn": "",
        "timer": "",
        "name": "",
        "x": 474.8333282470703,
        "y": 307.8332977294922,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "acf4d46.9a4e128",
        "type": "mqtt out",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 730,
        "y": 440,
        "wires": []
    },
    {
        "id": "43832c4d.364d64",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "func": "msg.payload = \"Hello Bum Hole!\";\nmsg.topic = \"voice/studio/brian\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "acf4d46.9a4e128"
            ]
        ]
    },
    {
        "id": "f9bea39e.69d32",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "func": "msg.payload = \"I have my thumb up my arse, and my cocks going off like a spunky firework\";\nmsg.topic = \"voice/studio/gwyneth\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 500,
        "wires": [
            [
                "acf4d46.9a4e128"
            ]
        ]
    },
    {
        "id": "8f6a7f83.5f578",
        "type": "inject",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 500,
        "wires": [
            [
                "f9bea39e.69d32"
            ]
        ]
    },
    {
        "id": "80815c07.e4e61",
        "type": "delay",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 360,
        "wires": [
            [
                "43832c4d.364d64"
            ]
        ]
    },
    {
        "id": "88f71d24.1381a",
        "type": "mqtt in",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "ESPButton/+/events",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 770,
        "y": 360,
        "wires": [
            [
                "a7f33559.0e2d28"
            ]
        ]
    },
    {
        "id": "a7f33559.0e2d28",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "extractID",
        "func": "msg.payload = msg.topic.split(\"/\")[1];\n\nmsg.payload = \"You really know how to press my buttons.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 360,
        "wires": [
            [
                "29fc2153.9ec79e"
            ]
        ]
    },
    {
        "id": "29fc2153.9ec79e",
        "type": "debug",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1140,
        "y": 320,
        "wires": []
    },
    {
        "id": "d59a2a9d.9f98a8",
        "type": "mqtt out",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "voice/studio/joey",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 1290,
        "y": 420,
        "wires": []
    },
    {
        "id": "dc1d47b9.76f878",
        "type": "mqtt in",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "ESPButton/announce",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "29fc2153.9ec79e"
            ]
        ]
    },
    {
        "id": "6745eab5.dbb1f4",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "func": "if (msg.id == \"ESPButton12618260\") {\n    msg.payload = \"Alexa, play some thrash metal music.\";\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 420,
        "wires": [
            [
                "d59a2a9d.9f98a8"
            ]
        ]
    },
    {
        "id": "daee1bab.fb3bf8",
        "type": "http response",
        "z": "ea307f99.462f6",
        "name": "",
        "x": 510,
        "y": 200,
        "wires": []
    },
    {
        "id": "2128d9f3.c94506",
        "type": "http in",
        "z": "ea307f99.462f6",
        "name": "CamMotion REST GET",
        "url": "/BobbAPI/2.0/camera/motion/:accountId/:buildingId/:room/:source/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 131,
        "y": 243,
        "wires": [
            [
                "daee1bab.fb3bf8",
                "b9865c47.fc15f",
                "efcef6b5.63fc28",
                "bde9a776.807de8"
            ]
        ]
    },
    {
        "id": "4da697d.d29ba68",
        "type": "inject",
        "z": "300a541.08ca6ac",
        "name": "",
        "topic": "",
        "payload": "AirConOn",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d4292328.5515",
                "742c5733.cc5628"
            ]
        ]
    },
    {
        "id": "e8e99849.5e6178",
        "type": "inject",
        "z": "300a541.08ca6ac",
        "name": "",
        "topic": "",
        "payload": "AirConOff",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 140,
        "wires": [
            [
                "d4292328.5515",
                "742c5733.cc5628"
            ]
        ]
    },
    {
        "id": "d4292328.5515",
        "type": "exec",
        "z": "300a541.08ca6ac",
        "command": "python /home/pi/BlackBeanControl/BlackBeanControl.py -c ",
        "addpay": true,
        "append": "",
        "useSpawn": false,
        "timer": "",
        "name": "",
        "x": 660,
        "y": 120,
        "wires": [
            [
                "a10aea21.45b388"
            ],
            [
                "903704dc.9a5eb8"
            ],
            [
                "b32d85f2.81d758"
            ]
        ]
    },
    {
        "id": "ae2e5b84.4d58b8",
        "type": "http in",
        "z": "300a541.08ca6ac",
        "name": "",
        "url": "/IRAPI/1.0/:unit/:cmd/",
        "method": "post",
        "swaggerDoc": "",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "25ecddf2.f20322"
            ]
        ]
    },
    {
        "id": "dc352600.763b58",
        "type": "http response",
        "z": "300a541.08ca6ac",
        "name": "",
        "x": 570,
        "y": 20,
        "wires": []
    },
    {
        "id": "25ecddf2.f20322",
        "type": "function",
        "z": "300a541.08ca6ac",
        "name": "",
        "func": "msg.payload = msg.req.params.cmd;\n\nswitch (Number(msg.req.params.unit)) {\n    case 0:\n        return [msg, msg, msg];\n\n    case 1:\n        return [msg, msg, null];\n        \n    case 2:\n        return [msg, null, msg];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "dc352600.763b58"
            ],
            [
                "8186ee8f.7468b",
                "d4292328.5515"
            ],
            [
                "742c5733.cc5628",
                "656b0899.43c168"
            ]
        ]
    },
    {
        "id": "f4fc6211.52b11",
        "type": "inject",
        "z": "300a541.08ca6ac",
        "name": "",
        "topic": "",
        "payload": "TVPower",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "d4292328.5515",
                "742c5733.cc5628"
            ]
        ]
    },
    {
        "id": "db7fda54.62c158",
        "type": "inject",
        "z": "300a541.08ca6ac",
        "name": "",
        "topic": "",
        "payload": "NewCommand",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 340,
        "wires": [
            [
                "d4292328.5515",
                "742c5733.cc5628"
            ]
        ]
    },
    {
        "id": "e8d21462.133a88",
        "type": "http request",
        "z": "2aa8f483.50506c",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "url": "http://192.168.10.223:83/snapshot.cgi",
        "tls": "",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "22e10ccf.e319f4",
                "65766d6e.22daa4",
                "eee240e9.8d297"
            ]
        ]
    },
    {
        "id": "79acfb3c.901224",
        "type": "inject",
        "z": "2aa8f483.50506c",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 100,
        "y": 220,
        "wires": [
            [
                "c4019d48.2f5ec"
            ]
        ]
    },
    {
        "id": "22e10ccf.e319f4",
        "type": "file",
        "z": "2aa8f483.50506c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 660,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "65766d6e.22daa4",
        "type": "debug",
        "z": "2aa8f483.50506c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 680,
        "y": 180,
        "wires": []
    },
    {
        "id": "eee240e9.8d297",
        "type": "delay",
        "z": "2aa8f483.50506c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "63bc6b83.fa4d04"
            ]
        ]
    },
    {
        "id": "dd047645.fc7b58",
        "type": "http request",
        "z": "2aa8f483.50506c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "https://westus.api.cognitive.microsoft.com/face/v1.0/detect?returnFaceId=true&returnFaceLandmarks=false",
        "tls": "",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "938a4eab.9f2ac"
            ]
        ]
    },
    {
        "id": "63bc6b83.fa4d04",
        "type": "function",
        "z": "2aa8f483.50506c",
        "name": "",
        "func": "msg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Host\": \"westus.api.cognitive.microsoft.com\",\n    \"Ocp-Apim-Subscription-Key\": \"581ef0bcb18d469ab94ca431c0a280fe\"\n};\nmsg.payload = {\"url\": \"https://pis.scrapping.cc/image2.jpg\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 280,
        "wires": [
            [
                "dd047645.fc7b58"
            ]
        ]
    },
    {
        "id": "938a4eab.9f2ac",
        "type": "debug",
        "z": "2aa8f483.50506c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 280,
        "wires": []
    },
    {
        "id": "c4019d48.2f5ec",
        "type": "function",
        "z": "2aa8f483.50506c",
        "name": "",
        "func": "msg.file = msg.payload + \".jpg\";\nmsg.filename = \"/home/pi/.node-red/static/\" + msg.file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 220,
        "wires": [
            [
                "e8d21462.133a88"
            ]
        ]
    },
    {
        "id": "d23f06e5.baa6e8",
        "type": "mqtt in",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "topic": "jfdi/studio/doorway/IR/testdoorway",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "97cd7dfc.600b1",
                "c3a9ae28.d1553"
            ]
        ]
    },
    {
        "id": "cb7e724d.c9ef5",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "EVENT",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "f0420dd1.43a5e",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "func": "var msg2 = null;\nvar msg3 = null;\nvar msg4 = null;\n\ncount = flow.get(\"count\");\ndir = msg.payload.event;\ndir = dir.toLowerCase();\n\nif (dir == \"in\") {\n    count++;\n    \n    if (count === 1)\n        msg3 = {payload: { event: \"nonzero\", count: count }};\n} else if (dir == \"out\") {\n    count--;\n    \n    if (count === 0)\n        msg2 = {payload: { event: \"zero\", count: 0 }};\n}\n\nif (count < 0) {\n    msg4 = {payload: {event: \"error\", count: count}};\n}\n\nmsg.payload = {event: dir.toLowerCase(), count: count};\n\nflow.set(\"count\", count);\n\nreturn [msg, msg2, msg3, msg4];",
        "outputs": "4",
        "noerr": 0,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "cb7e724d.c9ef5",
                "a58bb042.48734"
            ],
            [
                "d2d3e12b.0bbe8",
                "94019936.e32ee8",
                "f965d31e.a9947"
            ],
            [
                "593bba9c.8f96d4",
                "b26e4c39.51e79"
            ],
            [
                "a42101fc.849a9"
            ]
        ]
    },
    {
        "id": "d2d3e12b.0bbe8",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "ZERO",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "593bba9c.8f96d4",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "NONZERO",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "892a4170.6a64a",
        "type": "inject",
        "z": "b06e0bb7.bfaaa8",
        "name": "reset",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "2e0f19a3.dc5226"
            ]
        ]
    },
    {
        "id": "2e0f19a3.dc5226",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "func": "flow.set(\"count\", 0);\n\nmsg.payload = {count: 0};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 260,
        "wires": [
            [
                "52c93f5c.a0b21"
            ]
        ]
    },
    {
        "id": "a42101fc.849a9",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "ERROR",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 440,
        "wires": []
    },
    {
        "id": "2ec8c294.e0034e",
        "type": "inject",
        "z": "b06e0bb7.bfaaa8",
        "name": "inspect",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "716f0be7.f9fc44"
            ]
        ]
    },
    {
        "id": "716f0be7.f9fc44",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "func": "msg.payload = {count: flow.get(\"count\")};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 320,
        "wires": [
            [
                "70586fd6.95612",
                "52c93f5c.a0b21"
            ]
        ]
    },
    {
        "id": "70586fd6.95612",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "COUNT",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 460,
        "y": 320,
        "wires": []
    },
    {
        "id": "bb318a39.bcb7c8",
        "type": "inject",
        "z": "b06e0bb7.bfaaa8",
        "name": "+1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 380,
        "wires": [
            [
                "45b18452.5273bc"
            ]
        ]
    },
    {
        "id": "45b18452.5273bc",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "func": "cnt = flow.get(\"count\");\n\ncnt = cnt + msg.payload;\n\nflow.set(\"count\", cnt);\n\nmsg.payload = {count: cnt};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 400,
        "wires": [
            [
                "70586fd6.95612",
                "52c93f5c.a0b21"
            ]
        ]
    },
    {
        "id": "11d0a699.7669b9",
        "type": "inject",
        "z": "b06e0bb7.bfaaa8",
        "name": "-1",
        "topic": "",
        "payload": "-1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "45b18452.5273bc"
            ]
        ]
    },
    {
        "id": "94981c5e.acc2e",
        "type": "mqtt in",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "topic": "jfdi/studio/doorway/IR/testdoorway/log",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "4c9a26f3.1b63a8"
            ]
        ]
    },
    {
        "id": "4c9a26f3.1b63a8",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "LOG",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 510,
        "y": 580,
        "wires": []
    },
    {
        "id": "b9865c47.fc15f",
        "type": "function",
        "z": "ea307f99.462f6",
        "name": "logMovement",
        "func": "let movementLog = global.get(\"movementLog\") || {};\n\nlet accountId = msg.req.params.accountId;\nlet buildingId = msg.req.params.buildingId;\nlet room = msg.req.params.room;\nlet device = msg.req.params.source;\n\nif (!movementLog[accountId]) movementLog[accountId] = {};\nif (!movementLog[accountId][buildingId]) movementLog[accountId][buildingId] = {};\n\nlet now = new Date();\n\nmovementLog[accountId][buildingId][room] = { last: now, sinceLast: 0, sinceLastMins: \"now\", source: device };\nmovementLog[accountId][buildingId].anywhere = { last: now, sinceLast: 0, sinceLastMins: \"now\", source: device, location: room };\n\nglobal.set(\"movementLog\", movementLog);\n\nvar newMsg = { location: room, payload: movementLog };\n\nreturn newMsg;",
        "outputs": "1",
        "noerr": 0,
        "x": 539,
        "y": 241,
        "wires": [
            [
                "24a2fc8a.622bb4",
                "99b3e88.2b4b818"
            ]
        ]
    },
    {
        "id": "37546e8e.c7def2",
        "type": "inject",
        "z": "ea307f99.462f6",
        "name": "reset",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "86a5a6f8.9c4188"
            ]
        ]
    },
    {
        "id": "86a5a6f8.9c4188",
        "type": "function",
        "z": "ea307f99.462f6",
        "name": "reset",
        "func": "global.set(\"movementLog\", {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "efcef6b5.63fc28",
        "type": "debug",
        "z": "ea307f99.462f6",
        "name": "RAW",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 511,
        "y": 283,
        "wires": []
    },
    {
        "id": "99b3e88.2b4b818",
        "type": "debug",
        "z": "ea307f99.462f6",
        "name": "ALLDATA",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 761,
        "y": 343,
        "wires": []
    },
    {
        "id": "24a2fc8a.622bb4",
        "type": "link out",
        "z": "ea307f99.462f6",
        "name": "checkMotion",
        "links": [
            "77dc8bb9.717314"
        ],
        "x": 715,
        "y": 220,
        "wires": []
    },
    {
        "id": "97cd7dfc.600b1",
        "type": "debug",
        "z": "b06e0bb7.bfaaa8",
        "name": "RAW",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "c3a9ae28.d1553",
        "type": "json",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "f0420dd1.43a5e"
            ]
        ]
    },
    {
        "id": "a58bb042.48734",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "announce",
        "func": "msg.payload = \"Population \" + msg.payload.count;\nmsg.topic = \"voice/studio\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 80,
        "wires": [
            [
                "219c7019.c028d"
            ]
        ]
    },
    {
        "id": "bcf60cb5.9de75",
        "type": "mqtt out",
        "z": "b06e0bb7.bfaaa8",
        "name": "control",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "94019936.e32ee8",
        "type": "delay",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 800,
        "y": 240,
        "wires": [
            [
                "78e2e53b.57041c"
            ]
        ]
    },
    {
        "id": "78e2e53b.57041c",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "announce",
        "func": "msg.payload = \"Population 0. Switching off life support.\";\nmsg.topic = \"voice/studio\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "219c7019.c028d"
            ]
        ]
    },
    {
        "id": "b26e4c39.51e79",
        "type": "delay",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 800,
        "y": 340,
        "wires": [
            [
                "44ecc948.e19b28"
            ]
        ]
    },
    {
        "id": "44ecc948.e19b28",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "announce",
        "func": "msg.payload = \"Humans detected. Switching on life support systems.\";\nmsg.topic = \"voice/studio\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 340,
        "wires": [
            [
                "219c7019.c028d"
            ]
        ]
    },
    {
        "id": "f965d31e.a9947",
        "type": "function",
        "z": "b06e0bb7.bfaaa8",
        "name": "controls",
        "func": "msg.payload = \"off\";\nmsg.topic = \"sonoff/cmd/kitchenfans/POWER\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 180,
        "wires": [
            [
                "bcf60cb5.9de75"
            ]
        ]
    },
    {
        "id": "219c7019.c028d",
        "type": "mqtt out",
        "z": "b06e0bb7.bfaaa8",
        "name": "voice",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "39c293bf.05179c",
        "type": "link in",
        "z": "b06e0bb7.bfaaa8",
        "name": "countChange",
        "links": [
            "52c93f5c.a0b21"
        ],
        "x": 775,
        "y": 80,
        "wires": [
            [
                "a58bb042.48734"
            ]
        ]
    },
    {
        "id": "52c93f5c.a0b21",
        "type": "link out",
        "z": "b06e0bb7.bfaaa8",
        "name": "",
        "links": [
            "39c293bf.05179c"
        ],
        "x": 415,
        "y": 280,
        "wires": []
    },
    {
        "id": "3bd46d55.c16a72",
        "type": "function",
        "z": "9a378505.438078",
        "name": "Iterate",
        "func": "//Node has 2 outputs - 1 for itteration and 1 for completion\nvar nextObj, out;\nvar itt = msg.iterationInfo;\n\n\n//If the iterating has not yet begun set up the iteration metadata in the msg\nif (typeof itt === 'undefined') {\n    //Make sure payload is an array\n    if( Object.prototype.toString.call(msg.payload) !== '[object Array]' ) {\n       msg.payload = [msg.payload];\n    }\n\n    msg.iterationInfo = itt = {};\n    itt.index = -1;\n    itt.inArray = msg.payload;\n    itt.outArray = [];\n\n//Otherwise just push the input to the output array\n} else {\n    itt.outArray.push(msg.payload)\n}\n\n//Goto next object\nitt.index ++;\n\n//If there are stil objects left to iterate goto the next one in the original array\nif (itt.index < itt.inArray.length) {\n    nextObj = msg;\n    msg.payload = itt.inArray[itt.index];\n\n//otherwise pass the out array as the payload\n} else {\n    out = msg;\n    msg.payload = itt.outArray;\n    delete msg.iterationInfo;\n}\n\nreturn [nextObj, out];",
        "outputs": "2",
        "noerr": 0,
        "x": 347,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "47aef0c8.511b7",
        "type": "template",
        "z": "a6d79fe1.ede4f",
        "name": "query",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\"userId\": \"{{payload}}\"}",
        "x": 330,
        "y": 140,
        "wires": [
            [
                "837a1fa3.05e3d"
            ]
        ]
    },
    {
        "id": "42f63bf9.a56524",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "user",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 850,
        "y": 200,
        "wires": []
    },
    {
        "id": "f4957f17.cb336",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "query",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "837a1fa3.05e3d",
        "type": "json",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "f4957f17.cb336",
                "688815a7.d1cadc"
            ]
        ]
    },
    {
        "id": "22e29593.3640da",
        "type": "data-generator",
        "z": "a6d79fe1.ede4f",
        "name": "getToken",
        "field": "payload.authToken",
        "fieldType": "msg",
        "syntax": "text",
        "template": "{{guid}}",
        "x": 860,
        "y": 140,
        "wires": [
            [
                "e8cbde62.2e41b",
                "fa3758b0.9a08a8"
            ]
        ]
    },
    {
        "id": "e8cbde62.2e41b",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "token",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "7d9a8e75.75d91",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "result",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1270,
        "y": 140,
        "wires": []
    },
    {
        "id": "e9b0dae9.aae9b8",
        "type": "http in",
        "z": "a6d79fe1.ede4f",
        "name": "getToken",
        "url": "/BobbAPI/2.0/getToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 380,
        "wires": [
            [
                "f5763c38.839e",
                "d8a9ee51.c9af"
            ]
        ]
    },
    {
        "id": "580c541f.45b9ec",
        "type": "http response",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "x": 1450,
        "y": 460,
        "wires": []
    },
    {
        "id": "f5763c38.839e",
        "type": "switch",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "property": "payload.userId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 230,
        "y": 380,
        "wires": [
            [
                "50e1d5e1.c9575c",
                "6a967f4f.e1dde"
            ],
            [
                "52745c3d.999e54"
            ]
        ]
    },
    {
        "id": "52745c3d.999e54",
        "type": "template",
        "z": "a6d79fe1.ede4f",
        "name": "error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Error - badly formatted request",
        "x": 390,
        "y": 460,
        "wires": [
            [
                "580c541f.45b9ec"
            ]
        ]
    },
    {
        "id": "e5a34d14.bd834",
        "type": "switch",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "f5244185.30c32"
            ],
            [
                "a07bdc61.a269e"
            ]
        ]
    },
    {
        "id": "a07bdc61.a269e",
        "type": "template",
        "z": "a6d79fe1.ede4f",
        "name": "error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Error - user not found",
        "x": 710,
        "y": 420,
        "wires": [
            [
                "580c541f.45b9ec"
            ]
        ]
    },
    {
        "id": "f5244185.30c32",
        "type": "data-generator",
        "z": "a6d79fe1.ede4f",
        "name": "getToken",
        "field": "payload.authToken",
        "fieldType": "msg",
        "syntax": "text",
        "template": "{{guid}}",
        "x": 720,
        "y": 340,
        "wires": [
            [
                "807283eb.d6fd",
                "14132330.0fc7cd"
            ]
        ]
    },
    {
        "id": "efd9394f.053408",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "user",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "50e1d5e1.c9575c",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "req",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 390,
        "y": 320,
        "wires": []
    },
    {
        "id": "d8a9ee51.c9af",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "req",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 230,
        "y": 320,
        "wires": []
    },
    {
        "id": "807283eb.d6fd",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "token",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "14132330.0fc7cd",
        "type": "change",
        "z": "a6d79fe1.ede4f",
        "name": "stash",
        "rules": [
            {
                "t": "set",
                "p": "record",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 340,
        "wires": [
            [
                "3e34d278.0ed93e"
            ]
        ]
    },
    {
        "id": "8678a7cf.a64278",
        "type": "change",
        "z": "a6d79fe1.ede4f",
        "name": "unstash",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "record",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 320,
        "wires": [
            [
                "580c541f.45b9ec",
                "1c8afc8c.0179d3"
            ]
        ]
    },
    {
        "id": "1c8afc8c.0179d3",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "response",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1460,
        "y": 320,
        "wires": []
    },
    {
        "id": "7ce021b3.0c78b",
        "type": "template",
        "z": "a6d79fe1.ede4f",
        "name": "error",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "Error - token generation unsuccessful",
        "x": 1290,
        "y": 400,
        "wires": [
            [
                "580c541f.45b9ec"
            ]
        ]
    },
    {
        "id": "13d66e9c.237b41",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "result",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "48d5845d.606e0c",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "func": "msg.payload = JSON.parse(msg.payload);\nnode.status({text: \"result: \" + msg.payload.ok});\nif (msg.payload.n == 1) {\n    return [msg, null];\n}\nelse\n{\n    return [null, msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "8678a7cf.a64278"
            ],
            [
                "7ce021b3.0c78b"
            ]
        ]
    },
    {
        "id": "254f5ad5.d9d956",
        "type": "function",
        "z": "808709f4.bc3958",
        "name": "PBprep",
        "func": "if (!msg.payload.body)\n    msg.payload = JSON.parse(msg.payload);\n    \nmsg.topic = msg.payload.subject;\nmsg.payload = msg.payload.body;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1050a474.31adac",
        "type": "mqtt in",
        "z": "27c62c51.a48994",
        "name": "",
        "topic": "+/notify/+",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "a4290a75.6fd8c8"
            ]
        ]
    },
    {
        "id": "4b06479c.d528e8",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "func": "var str = msg.payload,\n    hexArray = [],\n    decArray = [];\n\nfor (var i = 0; i < str.length; i += 2) {\n    hexArray.push(\"0x\" + str.substr(i, 2));\n    decArray.push(parseInt(str.substr(i, 2), 16));\n}\n\nmsg.payload = {\n    hexStr: str,\n    \"decArray\": decArray,\n    \"hexArray\": hexArray,\n    hexList: hexArray.join(\",\"),\n    decList: decArray.join(\",\")\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 358,
        "y": 862,
        "wires": [
            [
                "4d94dac7.957df4"
            ]
        ]
    },
    {
        "id": "2b5e0aa9.db9746",
        "type": "inject",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "topic": "",
        "payload": "26009800c2f213111334131114101433131113121212121213111433131113341334131113111311141013121333141113111311131113111410141113111311133413111311131113111411121213111311141014101411131113111311141014101411131113111311141014111311131113111410141014111311131113111410141014111311131113111433131114331311141013cb12000d05",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 128,
        "y": 862,
        "wires": [
            [
                "4b06479c.d528e8"
            ]
        ]
    },
    {
        "id": "4d94dac7.957df4",
        "type": "debug",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 538,
        "y": 862,
        "wires": []
    },
    {
        "id": "68a9d561.85e4bc",
        "type": "link in",
        "z": "300a541.08ca6ac",
        "name": "IRout",
        "links": [
            "c8d05ca3.ad08"
        ],
        "x": 315,
        "y": 380,
        "wires": [
            [
                "d4292328.5515",
                "742c5733.cc5628"
            ]
        ]
    },
    {
        "id": "e854eda.0b1ea1",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "extractID",
        "func": "msg.statusCode = 200;\nmsg.id = msg.req.params.id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "d977dc19.b432d",
                "6745eab5.dbb1f4"
            ]
        ]
    },
    {
        "id": "d977dc19.b432d",
        "type": "http response",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "f0060e53.0a7df",
        "type": "http response",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "b706c61.f91c938",
        "type": "function",
        "z": "8cd6ec7f.acc8b",
        "name": "extractID",
        "func": "msg.statusCode = 200;\nmsg.id = msg.req.params.id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 500,
        "wires": [
            [
                "f0060e53.0a7df",
                "6745eab5.dbb1f4",
                "a7f6253.9ca6cd8"
            ]
        ]
    },
    {
        "id": "730e492c.0ec5a8",
        "type": "http in",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "url": "/ESPButton/:id",
        "method": "get",
        "swaggerDoc": "",
        "x": 760,
        "y": 500,
        "wires": [
            [
                "b706c61.f91c938"
            ]
        ]
    },
    {
        "id": "a7f6253.9ca6cd8",
        "type": "debug",
        "z": "8cd6ec7f.acc8b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1160,
        "y": 500,
        "wires": []
    },
    {
        "id": "35582d70.3e5532",
        "type": "sunrise",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "lat": "50.895715",
        "lon": "0.066387",
        "start": "sunriseEnd",
        "end": "sunsetStart",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "4f365e7a.6fa0e",
                "c6dda792.1269e8"
            ],
            [
                "e6589410.138b48",
                "fbba479b.87bdf8"
            ]
        ]
    },
    {
        "id": "b92f86bf.aa06d8",
        "type": "sunrise",
        "z": "4d99c870.c1d7a8",
        "name": "Golden Time",
        "lat": "50.895715",
        "lon": "0.066387",
        "start": "goldenHourEnd",
        "end": "goldenHour",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "a452d00.1a36d3",
                "6e91f277.b1f26c"
            ],
            [
                "ce5e0bf3.bff3d8",
                "dc1a3db9.79829"
            ]
        ]
    },
    {
        "id": "c6dda792.1269e8",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "stash the variables globally",
        "func": "global.set(\"daylight\", {\n    daylight: (msg.payload == 1),\n    moonPhase: msg.moon\n});\n\nmsg.payload = global.get(\"daylight\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4f365e7a.6fa0e",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "daylight1",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 380,
        "y": 80,
        "wires": []
    },
    {
        "id": "a452d00.1a36d3",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "daylight2",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 380,
        "y": 300,
        "wires": []
    },
    {
        "id": "ce5e0bf3.bff3d8",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "Golden Sunrise/set",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 410,
        "y": 340,
        "wires": []
    },
    {
        "id": "e6589410.138b48",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "Sunrise/set",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 390,
        "y": 160,
        "wires": []
    },
    {
        "id": "1816b601.b55a1a",
        "type": "comment",
        "z": "4d99c870.c1d7a8",
        "name": "Sunrise-sunset",
        "info": "Current state of day/night and moon phases are written into global variables.\nSunrise/sunset events are broadcast as MQTT topics.",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "6e91f277.b1f26c",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "stash the variables globally",
        "func": "global.get(\"daylight\").golden = (msg.payload === 0 && global.get(\"daylight\").daylight);\n\nmsg.payload = global.get(\"daylight\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "dc1a3db9.79829",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "event",
        "func": "var phase = (msg.payload == 1 ? \"sunrise\" : \"sunset\");\n\nlet newMsg = {\n    payload: {\n        event: [\"daylight\", phase, \"golden\"].join(\".\")\n    }\n};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "fbba479b.87bdf8",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "event",
        "func": "var phase = (msg.payload == 1 ? \"sunrise\" : \"sunset\");\n\nlet newMsg = {\n    payload: {\n        event: [\"daylight\", phase].join(\".\")\n    }\n};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "2925647d.4fa23c",
        "type": "sunrise",
        "z": "4d99c870.c1d7a8",
        "name": "Astronomy",
        "lat": "50.895715",
        "lon": "0.066387",
        "start": "nightEnd",
        "end": "night",
        "x": 120,
        "y": 500,
        "wires": [
            [],
            [
                "586145eb.a8024c",
                "1115068b.ab8f59"
            ]
        ]
    },
    {
        "id": "586145eb.a8024c",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "Astronomy Sunrise/set",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 420,
        "y": 480,
        "wires": []
    },
    {
        "id": "1115068b.ab8f59",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "event",
        "func": "global.get(\"daylight\").dark = (msg.payload === 0);\n\nvar phase = (msg.payload === 0 ? \"ends\" : \"begins\");\n\nlet newMsg = {\n    payload: {\n        event: [\"daylight\", \"astronomy\", phase].join(\".\")\n    }\n};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "d6078700.b496d8",
        "type": "inject",
        "z": "4d99c870.c1d7a8",
        "name": "getDaylight",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 600,
        "wires": [
            [
                "f7298c22.16f1f"
            ]
        ]
    },
    {
        "id": "9be6ac8c.7e86a",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 450,
        "y": 600,
        "wires": []
    },
    {
        "id": "f7298c22.16f1f",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "func": "msg.payload = global.get(\"daylight\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 600,
        "wires": [
            [
                "9be6ac8c.7e86a"
            ]
        ]
    },
    {
        "id": "1960e94b.5f6487",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "offline",
        "topic": "",
        "payload": "offline",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "23f0a6d9.ad683a"
            ]
        ]
    },
    {
        "id": "d64e0990.b4be88",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "online",
        "topic": "",
        "payload": "online",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "23f0a6d9.ad683a"
            ]
        ]
    },
    {
        "id": "d43d58a4.95cd08",
        "type": "rbe",
        "z": "7ba5f330.3b78cc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "x": 390,
        "y": 160,
        "wires": [
            [
                "9cbb8254.54111"
            ]
        ]
    },
    {
        "id": "9996103c.3e2f6",
        "type": "trigger",
        "z": "7ba5f330.3b78cc",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "5",
        "extend": false,
        "units": "s",
        "reset": "online",
        "name": "",
        "x": 740,
        "y": 120,
        "wires": [
            [
                "ee98e974.33c9f8"
            ]
        ]
    },
    {
        "id": "9cbb8254.54111",
        "type": "switch",
        "z": "7ba5f330.3b78cc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "offline",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 550,
        "y": 160,
        "wires": [
            [
                "9996103c.3e2f6"
            ],
            [
                "9996103c.3e2f6",
                "ee98e974.33c9f8"
            ]
        ]
    },
    {
        "id": "ee98e974.33c9f8",
        "type": "rbe",
        "z": "7ba5f330.3b78cc",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "165c88c9.440cd7",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 910,
        "y": 160,
        "wires": []
    },
    {
        "id": "23f0a6d9.ad683a",
        "type": "subflow:7ba5f330.3b78cc",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "165c88c9.440cd7"
            ]
        ]
    },
    {
        "id": "4756e545.3d827c",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "sendToApropriateAPI",
        "func": "// 12/06/2017 delay support\n\nconst {accountId, buildingId, deviceId, device, api, eventId, ruleId, source, payload: {on, hue, saturation, brightness}} = msg\nnode.status({text: buildingId + \":\" + api + \":\" + deviceId + \":\" + on, shape: (on ? \"dot\" : \"ring\"), fill: (on ? \"green\" : \"red\")});\nconst stateWord = on ? \"on\" : \"off\";\n\nswitch (api) {\n    case \"virtual\":\n        node.send([null, null, {\n            accountId,\n            buildingId,\n            eventId, ruleId, source,\n            event: [accountId, buildingId, (on ? device.onEvent : device.offEvent)].join(\".\")\n        }, null, null]);\n        break;\n\n    case \"zwave\":\n        node.send([{accountId, buildingId, topic: [accountId, buildingId, \"zwave\", device.nodeid, \"cmd\"].join(\"/\"), eventId, ruleId, source, payload: on, delay: msg.delay}, null, null, null, null]);\n        break;\n        \n    case \"ir\": \n        node.send([{accountId, buildingId, topic: [accountId, buildingId, \"ir\"].join(\"/\"), payload: (on ? device.onCmd : device.offCmd), delay: msg.delay, eventId, ruleId, source}, null, null, null, null]);\n        break;\n\n    case \"rf\":\n        // mqtt new scheme\n        node.send([{accountId, buildingId, topic: [accountId, buildingId, \"rf/tx\"].join(\"/\"), payload: (on ? device.onCode : device.offCode), delay: msg.delay, retain: false, eventId, ruleId, source}, null, null, null, null]);\n        break;\n    \n    case \"sonoff\":\n    case \"sonoff5\":\n        global.set(\"IGNORECAMERAMOTION\", true);\n        // new sonoff-tasmota firmware\n        if (device.topic && device.channel)\n            node.send([{accountId, buildingId, retain: true, topic: [accountId, buildingId, \"sonoff\", device.topic, \"cmnd\", \"Power\" + device.channel].join(\"/\"), payload: stateWord, delay: msg.delay, api, eventId, ruleId, source}, null, null, null, null]);\n        else\n            node.send([{accountId, buildingId, retain: true, topic: [accountId, buildingId, \"sonoff\", deviceId, \"cmnd\", \"Power\"].join(\"/\"), payload: stateWord, delay: msg.delay, api, eventId, ruleId, source}, null, null, null, null]);\n            \n        setTimeout(function() {\n            global.set(\"IGNORECAMERAMOTION\", false);\n        }, 5000);\n\n        break;\n    \n    case \"hue-light\":\n    case \"hue-group\":\n        node.send([{topic: [accountId, buildingId, \"hue\", \"cmd\"].join(\"/\"), accountId, buildingId, payload: {deviceId, deviceName: device.description, on, brightness, hue, saturation, api, eventId, ruleId, source}}, null, null, null, null]);\n        break;\n        \n    case \"lifx\":\n        node.send([{topic: [accountId, buildingId, \"lifx\"].join(\"/\"), accountId, buildingId, payload: {deviceId, lifxId: device.id, deviceName: device.description, on, brightness, hue, saturation, api, eventId, ruleId, source}}, null, null, null, null]);\n        break;\n\n    case \"tplink\":\n        node.send([null, null, null, {topic: [accountId, buildingId, \"tplink\"].join(\"/\"), accountId, buildingId, payload: {deviceId, id: device.nodeid, deviceName: device.description, on, api, eventId, ruleId, source}}, null]);\n        break;\n\n    case \"kodi\":\n        node.warn(device)\n        if (on) {\n            if (device.wol) {\n                node.send([{topic: [accountId, buildingId, \"wol\"].join(\"/\"), accountId, buildingId, payload: device.macAddress, eventId, ruleId, source}, null, null, null, null]);\n            }\n        } else {\n            node.send([{topic: [accountId, buildingId, \"kodi\", \"cmd\", deviceId].join(\"/\"), accountId, buildingId, payload: \"System.Shutdown\", eventId, ruleId, source}, null, null, null, null]);\n        }\n        break;\n}\n\n// node.send([null, null, {accountId, buildingId, retain: true, topic: [deviceId, \"on\", \"changed\"].join(\".\"), payload: on, api, eventId, ruleId, source}, null]);\n",
        "outputs": 5,
        "noerr": 0,
        "x": 340,
        "y": 180,
        "wires": [
            [
                "7d7307a7.4258e8",
                "2a85063b.d8db0a"
            ],
            [
                "87d8ac2c.4a8bb",
                "2afb15df.31311a"
            ],
            [
                "b9a07ce7.352b4",
                "254c9487.95f83c"
            ],
            [
                "e48440f5.0ef4f",
                "eb9ee0d.9eac82"
            ],
            []
        ],
        "outputLabels": [
            "MQTT",
            "REST",
            "Events",
            "TPLink",
            "Diagnostics"
        ]
    },
    {
        "id": "446fce6.08f8f3",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procRoom",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node, {nostatus: true});\n\nconst {state} = msg;\nconst {error, accountId, buildingId, account, building, roomId = (msg.room || msg.id), payload = {on: state}, payload: {on}, eventId, ruleId, source} = msg;\n\nnode.status({});\n\nif (!error) {\n    let newState = on;\n    \n    if (newState === \"toggle\" || newState === 2) {\n        const records = D.getRoomMetricData(accountId, buildingId, roomId, \"on\");\n        const anyOn = Object.keys(records).reduce((anyOn, key) => anyOn || records[key].value, false);\n        newState = G.normaliseState(!anyOn, anyOn);\n    } else\n        newState = G.normaliseState(newState);\n\n    // build array of indices for all light devices matching roomId\n    const roomDevices = G.getDevices(accountId, buildingId)\n        .filter(deviceId => {\n            const {roomId: room, lock = false, alwaysOn = false} = building.devices[deviceId];\n            return room === roomId && (!lock) && (!alwaysOn);\n        });\n    \nnode.warn({accountId, buildingId, roomId, on, roomDevices});\n\n    roomDevices.map(deviceId => {\n        const targetDevice = G.getDevice(accountId, buildingId, deviceId);\n\n        node.send([{\n            accountId,\n            buildingId,\n            deviceId,\n            eventId,\n            ruleId,\n            payload: {\n                on: newState\n            }\n        }, null]);\n    });\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \":\" + roomId + \":\" + newState));\n}\n\nreturn [null, Object.assign(msg, {payload: \"OK\", statusCode: 200})];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 1480,
        "wires": [
            [
                "876e3e1e.ab4c6",
                "5c7b3969.fc9648"
            ],
            [
                "559a79e3.a22578",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "7fe5c576.ffdb3c",
        "type": "comment",
        "z": "9556cd1.486d63",
        "name": "Bobb API V2 Mar-2018",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "bc30e127.a0ec8",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "setGroup",
        "func": "// 05-06-2017 Updated with event & ruleId to support logging\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\")\nG.handleQuery(msg, node);\n\nconst {error, accountId, buildingId, building, group, id, groupId = id, source, state, payload} = msg\n\n// First node output is data stream, second is for errors/response\nif (!error) {\n    let newState = state || payload.on\n    \n    if (state === \"toggle\" || state === 2) {\n        const anyOn = group.devices.reduce((anyOn, deviceId) => anyOn || ((D.getDataNode(accountId, buildingId, [deviceId, \"on\"]) || {value: false}).value), false)\n        newState = G.normaliseState(!anyOn, anyOn)\n    } else\n        newState = G.normaliseState(newState)\n\n    group.devices.map(deviceId => {\n        const device = G.getDevice(accountId, buildingId, deviceId);\n\n        node.send([{\n            accountId,\n            buildingId,\n            deviceId,\n            source,\n            payload: {\n                on: newState\n            }\n        }, null]);\n    });\n}\n\nreturn [null, Object.assign(msg, {payload: \"OK\", statusCode: 200})];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 480,
        "y": 1580,
        "wires": [
            [
                "c89ed9ec.4a10c8",
                "f890e270.a9626"
            ],
            [
                "d82bda6.d051f28",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "e09d0117.b3a66",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procSequence",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nif (msg.payload && msg.payload.phase !== undefined) {\n    msg.phase = Number(msg.payload.phase);\n}\n\nconst {building, sequence} = msg\nconst sequenceId = msg.sequenceId || msg.sequence || msg.id;\n\nlet outputs = [null, null, null];\n\nif (!msg.error) {  // valid data\n    let phase;\n    \n    if (msg.phase === undefined) {\n        phase = sequence.phase || 0;\n    \n        phase = (phase < sequence.phases.length - 1 ? phase + 1 : 0);\n    } else\n        phase = msg.phase;\n    \n    if (phase > sequence.phases.length - 1) phase = 0;\n    \n    building.sequences[sequenceId].phase = phase;\n    \n    const targetPhase = sequence.phases[phase];\n    const firstDevice = G.getDevice(msg.accountId, msg.buildingId, targetPhase[0].device);\n    const roomId = firstDevice.room;\n\n    outputs[2] = {accountId: msg.accountId, buildingId: msg.buildingId, room: roomId || \"all\", payload: sequence.sound || \"airplaneding\"};\n    \n    outputs[0] = targetPhase.map(deviceState => {\n        const deviceId = deviceState.device || deviceState.deviceId;\n\n        return {\n            accountId: msg.accountId,\n            buildingId: msg.buildingId,\n            duration: deviceState.duration,\n            deviceId: deviceId,\n            eventId: msg.eventId,\n            ruleId: msg.ruleId,\n            payload: deviceState.state\n        };\n    });\n\n    node.status({fill: \"green\", shape: \"dot\", text: building.commonName + \":\" + sequenceId + \":\" + phase});\n\n    msg.payload = \"OK\";\n    msg.statusCode = 200;\n}\n\noutputs[1] = msg;\nnode.send(outputs);\n",
        "outputs": "3",
        "noerr": 0,
        "x": 500,
        "y": 1680,
        "wires": [
            [
                "efe34f9d.1bf2",
                "be6c4806.cb3198"
            ],
            [
                "dc39d77d.8c88e8",
                "ee03da70.2804f8"
            ],
            [
                "2c08e85a.72ee88"
            ]
        ]
    },
    {
        "id": "dc39d77d.8c88e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 770,
        "y": 1700,
        "wires": []
    },
    {
        "id": "559a79e3.a22578",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 780,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f94c20fb.8411d",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "5e2260a8.8160d",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "b6707391.0f5c2",
            "d7700d1d.f500d"
        ],
        "x": 755,
        "y": 520,
        "wires": []
    },
    {
        "id": "d7700d1d.f500d",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "5e2260a8.8160d",
            "22522632.1dc37a",
            "c4324fe3.895d1",
            "16dc9e46.ff9a82",
            "c78b034b.c2af",
            "f83a792b.c61ba8",
            "441b33.9f1794cc"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            [
                "4756e545.3d827c",
                "b9f2f466.8c0f58"
            ]
        ]
    },
    {
        "id": "876e3e1e.ab4c6",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 735,
        "y": 1480,
        "wires": []
    },
    {
        "id": "c89ed9ec.4a10c8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 635,
        "y": 1560,
        "wires": []
    },
    {
        "id": "efe34f9d.1bf2",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 675,
        "y": 1640,
        "wires": []
    },
    {
        "id": "3153afec.2cdbf",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set switch state",
        "links": [
            "e926b475.8f2fc8",
            "8b665f91.f1414",
            "bca0b71b.fb08f8",
            "2896e0f7.754ac",
            "d73cf641.feff78",
            "40d35193.db401",
            "83016ed8.72d75",
            "628539e9.9532e8",
            "94b90621.bdb598",
            "d5293de8.37405",
            "2294d5ca.237b9a",
            "806a85d6.9f5ae8",
            "e79b497d.f555b8"
        ],
        "x": 375,
        "y": 600,
        "wires": [
            [
                "63f379bf.4ddda8",
                "a9f37d45.74bdc"
            ]
        ]
    },
    {
        "id": "ee03da70.2804f8",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "resp",
        "func": "if (msg.req)\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 1200,
        "wires": [
            [
                "8dc5faba.564988"
            ]
        ]
    },
    {
        "id": "e1543396.1ede9",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set room switches",
        "links": [
            "8c871e3b.fea9c",
            "1c01a2e1.1b84bd",
            "20502595.68d40a"
        ],
        "x": 415,
        "y": 1520,
        "wires": [
            [
                "446fce6.08f8f3",
                "b46f1990.eb2188"
            ]
        ]
    },
    {
        "id": "8dc5faba.564988",
        "type": "http response",
        "z": "9556cd1.486d63",
        "name": "",
        "x": 1390,
        "y": 1200,
        "wires": []
    },
    {
        "id": "991a3df7.83f13",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT device on-state",
        "url": "/BobbAPI/2.0/device/:accountId/:buildingId/:deviceId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "afb54b04.53f658",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "8211b32d.65f1e"
            ]
        ]
    },
    {
        "id": "6bee3df7.b38274",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT room state",
        "url": "/BobbAPI/2.0/room/:accountId/:buildingId/:roomId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1480,
        "wires": [
            [
                "c414b372.aaabe"
            ]
        ]
    },
    {
        "id": "c5ab0068.7958e",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT group state",
        "url": "/BobbAPI/2.0/group/:accountId/:buildingId/:groupId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1580,
        "wires": [
            [
                "35b26532.b3d5fa"
            ]
        ]
    },
    {
        "id": "acd89a7.e909468",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT seq state",
        "url": "/BobbAPI/2.0/sequence/:accountId/:buildingId/:sequenceId/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1680,
        "wires": [
            [
                "1359e402.c56aac"
            ]
        ]
    },
    {
        "id": "63f379bf.4ddda8",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procDevice",
        "func": "const [G, D, S] = global.get([\"globals\", \"dataEngine\", \"server\"]);\n\nG.handleQuery(msg, node, {nostatus: true});\n\nconst pay = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : {};\nconst offTime = (pay.offTime ? new Date(pay.offTime) : (pay.duration ? new Date(new Date().getTime() + (pay.duration * 60 * 1000)) : null));\nconst { account, building, device, device: {api}, deviceId, accountId, buildingId, cause, hue, saturation, brightness } = msg\nconst { delay = 0, priority = 1, ruleId, eventId, source = msg.source} = pay\n\nif (!msg.error) {\n    if (device) {\n        const oldState = (D.getDataNode(accountId, buildingId, [deviceId, \"on\"].join(\".\")) || {value: false, timestamp: 0});\n        const oldOn = oldState.value;\n        const newState = msg.state || msg.payload.on;\n        const on = G.normaliseState(newState, oldOn);\n\n        if (offTime && on) {\n            G.scheduleJob({\n                time: offTime, \n                topic: [accountId, buildingId, deviceId].join(\".\"), \n                url: `${G.getApiBaseUrl()}/device/${accountId}/${buildingId}/${deviceId}/off`,\n                body: {\n                    event: \"offTime\", \n                    ruleId: new Date().toTimeString() + \">\" + offTime.toTimeString(),\n                    priority: S.defaults.commandPriorities.timeouts || 2\n                }\n            });\n        }\n        \n        const swMsg = {\n            accountId, \n            buildingId, \n            topic: deviceId,\n            deviceId, \n            api, \n            device, \n            eventId,\n            ruleId, \n            delay,\n            cause,\n            source,\n            payload: {\n                on,\n                hue,\n                saturation,\n                brightness,\n                offTime\n            }\n        };\n        \n        node.status(G.nodeStatus(false, buildingId + \":\" + deviceId + \" -> \" + on));\n        msg.payload = \"OK\";\n        msg.statusCode = 200;\n        node.send([swMsg, msg]);\n    } else {\n        genError(404, accountId + \".\" + buildingId + \".\" + deviceId, \"no such device\");\n    }\n}\n\nfunction genError(code, id, err) {\n    node.status(G.nodeStatus(true, id + \":\" + err.toUpperCase()));\n    msg.payload = err.toUpperCase();\n    msg.statusCode = code;\n    node.send([null, msg]);\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 560,
        "wires": [
            [
                "5e2260a8.8160d",
                "3492e885.cec558"
            ],
            [
                "ee03da70.2804f8",
                "f94c20fb.8411d"
            ]
        ],
        "outputLabels": [
            "",
            "httpRes/Error"
        ]
    },
    {
        "id": "d82bda6.d051f28",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 690,
        "y": 1600,
        "wires": []
    },
    {
        "id": "7b28656f.0f32fc",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set group switches",
        "links": [
            "8ea4ca36.3b8dd8",
            "83e1ffd.1ce69",
            "bc023406.711368",
            "a31afa2f.03f978",
            "bcdebba.bc09448",
            "2d6ab2d3.d3cfbe",
            "4584490f.ef3ac8"
        ],
        "x": 355,
        "y": 1620,
        "wires": [
            [
                "bc30e127.a0ec8",
                "513c66b3.9c41d8"
            ]
        ]
    },
    {
        "id": "fb7d38c4.619e88",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set sequence",
        "links": [
            "da6e5ada.a59188",
            "64a9807.336b48",
            "c12f6555.ac4bf8",
            "cbf31494.a22ae8",
            "170a7f7f.be6ad1"
        ],
        "x": 355,
        "y": 1720,
        "wires": [
            [
                "e09d0117.b3a66"
            ]
        ]
    },
    {
        "id": "be6c4806.cb3198",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 1660,
        "wires": []
    },
    {
        "id": "7d7307a7.4258e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "MQTT",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 650,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a4f1bbb.ea0f94",
        "type": "http request",
        "z": "9556cd1.486d63",
        "name": "",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "73b6bb8a.e9cc54",
        "x": 810,
        "y": 180,
        "wires": [
            [
                "edde6a4e.79b9d8"
            ]
        ]
    },
    {
        "id": "edde6a4e.79b9d8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "resp",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "87d8ac2c.4a8bb",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "debug",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 650,
        "y": 220,
        "wires": []
    },
    {
        "id": "b3f567f9.97d338",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procBuildingLights",
        "func": "// 31-12-2017 rewritten to use central helper functions\nconst G = global.get(\"globals\");\nG.handleQuery(msg, node, {nostatus: true});\n\nconst {error, accountId, buildingId, building, state, payload, eventId, ruleId, source} = msg\n\nnode.status({});\n\nif (!error) {\n    // build array of indices for all light devices in building\n    const newState = G.normaliseState(state || payload.on)\n    \n    G.getDevices(accountId, buildingId)\n        .filter(deviceId => {\n            const {light, alwaysOn} = building.devices[deviceId];\n            return light && !alwaysOn;}\n        )\n        .map(deviceId => {\n            node.send([\n                {\n                    accountId, buildingId, deviceId, eventId, ruleId, source,\n                    payload: {\n                        on: newState\n                    }\n                },\n                null\n            ]);\n        }\n    );\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \":\" + newState));\n    node.send([null, Object.assign(msg, {payload: \"OK\", statusCode: 200})]);\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 570,
        "y": 1180,
        "wires": [
            [
                "e46ec88a.0563c8",
                "90723a9f.d45368"
            ],
            [
                "d5fb7e02.816a8",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "d5fb7e02.816a8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 820,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e46ec88a.0563c8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 775,
        "y": 1180,
        "wires": []
    },
    {
        "id": "22ff396e.8d9f46",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set building lights state",
        "links": [
            "604661c3.e6eef"
        ],
        "x": 415,
        "y": 1220,
        "wires": [
            [
                "b3f567f9.97d338",
                "ea414a0d.5db798"
            ]
        ]
    },
    {
        "id": "96aff0f6.16ca6",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT building lights state",
        "url": "/BobbAPI/2.0/lights/building/:accountId/:buildingId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "e54531d1.33816"
            ]
        ]
    },
    {
        "id": "a8c74578.c68808",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procRoomLights",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node, {nostatus: true});\nconst {error, accountId, buildingId, roomId = msg.room || msg.id, state, payload = {on: state}, payload: {on}, eventId, ruleId, source} = msg;\nnode.status({});\n\nif (!error) {\n    let newState = on;\n    \n    if (state === \"toggle\" || state === 2) {\n        const records = D.getRoomMetricData(accountId, buildingId, roomId, \"on\");\n        const anyOn = Object.keys(records).reduce((anyOn, key) => anyOn || records[key].value, false);\n        newState = G.normaliseState(!anyOn, anyOn);\n    } else\n        newState = G.normaliseState(newState);\n\n    G.getDevices(accountId, buildingId)\n        .filter(deviceId => {\n            const device = G.getDevice(accountId, buildingId, deviceId);\n            return device.roomId === roomId && device.light && (!device.alwaysOn);\n        })\n        .map(deviceId => {\n            node.send([{\n                accountId, buildingId, deviceId, eventId, ruleId, source,\n                payload: {\n                    on: newState\n                }\n            }, null]);\n        });\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \":\" + roomId + \":\" + newState));\n    node.send([null, Object.assign(msg, {payload: \"OK\", statusCode: 200})]);\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 560,
        "y": 1280,
        "wires": [
            [
                "42f3e0b4.c584a"
            ],
            [
                "c67a18e.d33f4e8",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "c67a18e.d33f4e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "42f3e0b4.c584a",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 755,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5c234450.36c1ac",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set room lights state",
        "links": [
            "29c85fca.31664",
            "78a9fff0.07a9e"
        ],
        "x": 415,
        "y": 1320,
        "wires": [
            [
                "a8c74578.c68808",
                "1de0647a.09283c"
            ]
        ]
    },
    {
        "id": "fa52f793.2ef558",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT room lights state",
        "url": "/BobbAPI/2.0/lights/room/:accountId/:buildingId/:roomId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "c2be905b.d6c4d"
            ]
        ]
    },
    {
        "id": "b9f2f466.8c0f58",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 290,
        "y": 260,
        "wires": []
    },
    {
        "id": "3aaa9560.14da2a",
        "type": "link in",
        "z": "8d7a0ee3.fbbaf",
        "name": "handleEvent",
        "links": [
            "ec85980e.f80d58",
            "9f47b7cf.28dd88",
            "9925cb7f.a93e18",
            "895722b2.efdbc",
            "f3415a79.523398",
            "9554076c.2ad358",
            "c53c4191.7da82",
            "7cea5a2.b0bd3a4",
            "14706bf.cd32794",
            "3362c34c.9e2c5c",
            "16a2e093.bdccbf",
            "36258262.e8a8fe",
            "76b40103.c17",
            "372b50b6.dc004",
            "7df18375.ac4c2c",
            "a4434b76.e24c88",
            "47dfd6d9.901ee8",
            "927dd427.3a1438",
            "f34ab82f.fcd388",
            "dcff1de4.ed032",
            "36489cd4.0ec894",
            "69ea7042.2c963",
            "b9a07ce7.352b4",
            "8aa36d7a.ac9c6",
            "a8d0ab27.ab87c8",
            "19e8652a.0218fb",
            "701237e7.45b538",
            "e3ed0bfc.8716c8",
            "666c8e72.b4cc5"
        ],
        "x": 135,
        "y": 400,
        "wires": [
            [
                "f003de93.1438a",
                "3f98a827.172028",
                "9722cb19.2fffe8"
            ]
        ]
    },
    {
        "id": "f003de93.1438a",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "findApplicableRules",
        "func": "const [G, moment] = global.get([\"globals\", \"moment\"]);\nconst timeNow = moment().format(\"HH:mm\");\n\nconst {event, topic} = msg;\nconst {eventId = (event || topic)} = msg;\nif (eventId) {\n    const applyEventToBuilding = building => {\n        const buildingRules = building.rules;\n    \n        const runRule = ruleId => {\n            const rule = buildingRules[ruleId];\n            \n            if (rule && !rule.disabled) {\n                node.send([{accountId, buildingId, ruleId, rule, eventId, eventData: msg.payload, priority: msg.priority, source}, null, null]);\n                node.status({text: timeNow + \": \" + ruleId, shape: \"dot\", fill: \"green\"});\n            } else\n                node.status({text: timeNow + \": \" + ruleId + \" nonextant/disabled\", shape: \"ring\", fill: \"red\"});\n        };\n        \n        if (buildingRules) {\n            const eventRules = building.eventRules || {};\n            \n            // send diagnostics\n            node.send([null, null, {payload: {eventId, accountId, buildingId, building, buildingRules, eventRules}}]);\n            \n            if (eventRules && eventRules[eventId]) {\n                // quickly find rules that apply to the event, and run them in turn\n                const rules = eventRules[eventId];\n                \n                if (rules && rules.length) {\n                    rules.map(rule => runRule(rule));\n                }\n            } else { // output NO-MATCHING-RULES\n                node.send([null, msg, null]);\n                node.status({text: \"no rules: \" + eventId, shape: \"ring\", fill: \"red\"});\n            }\n        } else\n            node.warn(`No rules defined in building ${buildingId}`);    \n    }    \n    \n    const eId = eventId.replace(/\\//g, \".\")\n    const [dfltA, dfltB] = eId.split(\".\");\n    const {accountId = dfltA, buildingId = dfltB, source} = msg\n    const building = G.getBuilding(accountId, buildingId);\n    \n    if (building) { // great, event applies to one building\n        applyEventToBuilding(building)\n    } else {\n        // event applies to whole account, need to iterate buildings\n        G.forBuildingsInAccount(accountId, buildingId => {\n            applyEventToBuilding(G.getBuilding(accountId, buildingId))\n        })\n    }\n} else node.warn(`Event id empty, source ${msg.source}`)\n",
        "outputs": "3",
        "noerr": 0,
        "x": 290,
        "y": 400,
        "wires": [
            [
                "a34c0b7b.aef388",
                "a49e45ae.056128",
                "b4bd56ce.d9f7e8"
            ],
            [
                "d4039437.ce3cf8"
            ],
            [
                "93f3db26.827f18"
            ]
        ],
        "outputLabels": [
            "rule chain",
            "errors",
            "diagnostics"
        ]
    },
    {
        "id": "5eae2679.89ad28",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "SPEECH",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1120,
        "y": 340,
        "wires": []
    },
    {
        "id": "a34c0b7b.aef388",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "eventRules",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 550,
        "y": 500,
        "wires": []
    },
    {
        "id": "5450281f.9bda18",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "send2switch",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 1295,
        "y": 120,
        "wires": []
    },
    {
        "id": "2d6ab2d3.d3cfbe",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "send2group",
        "links": [
            "7b28656f.0f32fc"
        ],
        "x": 1295,
        "y": 160,
        "wires": []
    },
    {
        "id": "170a7f7f.be6ad1",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "send2sequence",
        "links": [
            "fb7d38c4.619e88"
        ],
        "x": 1295,
        "y": 200,
        "wires": []
    },
    {
        "id": "50e4e73f.07a248",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "send2scene",
        "links": [
            "8654378a.3ba4c8"
        ],
        "x": 1295,
        "y": 240,
        "wires": []
    },
    {
        "id": "11c77588.2ae97a",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "switchAPI",
        "func": "// 05-06-2017 Updated for sequence and scene support\nswitch (msg.api) {\n    case \"switch\":\n    case \"device\":\n        msg.deviceId = msg.id;\n        node.send([msg, null, null, null, null, null, null]);\n        break;\n        \n    case \"group\":\n        msg.groupId = msg.id;\n        node.send([null, msg, null, null, null, null, null]);\n        break;\n\n    case \"sequence\":\n        msg.sequenceId = msg.id;\n        node.send([null, null, msg, null, null, null, null]);\n        break;\n\n    case \"scene\":\n        msg.sceneId = msg.id;\n        node.send([null, null, null, msg, null, null, null]);\n        break;\n\n    case \"lights/room\":\n        msg.roomId = msg.id;\n        node.send([null, null, null, null, msg, null, null]);\n        break;\n\n    case \"lights/building\":\n        node.send([null, null, null, null, null, msg, null]);\n        break;\n\n    case \"cooling/building\":\n        node.send([null, null, null, null, null, null, msg]);\n        break;\n}\n\nnode.status({text: msg.api + \": \" + msg.id})\n",
        "outputs": "7",
        "noerr": 0,
        "x": 1120,
        "y": 220,
        "wires": [
            [
                "5450281f.9bda18",
                "5154afbf.884bd"
            ],
            [
                "2d6ab2d3.d3cfbe",
                "5154afbf.884bd"
            ],
            [
                "170a7f7f.be6ad1",
                "5154afbf.884bd"
            ],
            [
                "50e4e73f.07a248",
                "5154afbf.884bd"
            ],
            [
                "29c85fca.31664",
                "5154afbf.884bd"
            ],
            [
                "604661c3.e6eef",
                "5154afbf.884bd"
            ],
            [
                "5154afbf.884bd",
                "3faec473.6ecd4c"
            ]
        ],
        "outputLabels": [
            "device",
            "group",
            "sequence",
            "scene",
            "lights/room",
            "lights/building",
            "cooling/building"
        ]
    },
    {
        "id": "3f98a827.172028",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 250,
        "y": 500,
        "wires": []
    },
    {
        "id": "4ed07928.ae1c48",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "SWITCH",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1120,
        "y": 140,
        "wires": []
    },
    {
        "id": "75e33536.72929c",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendActions",
        "func": "// 28-05-2017 Refactored detokenisation; Added notifications; Added \"otherwise\" actions on rule failure; Added eventData payload; Added raiseevent action\n// 05-06-2017 Updated with event & ruleId to support logging\n// 09/06/2017 Bug fixed in announcements\n// 12/06/2017 delay support in switch actions\n// 29-06-2017 accountId/buildingId support\nconst G = global.get(\"globals\")\nconst D = global.get(\"dataEngine\")\n\nconst moment = global.get(\"moment\");\n\nconst {accountId, buildingId, ruleId, rule, factData, eventData, topic} = msg;\nconst actions = msg.success ? rule.actions : ( rule.otherwise || {} );\n\nconst building = G.getBuilding(accountId, buildingId)\n    \nfor (let actionId in actions) {\n    redirectAction(actionId);\n}\n\nfunction redirectAction(actionId) {\n    const ruleActions = actions[actionId];\n    \n    if (Array.isArray(ruleActions)) {\n        switch (actionId) {\n            case \"store\":\n                ruleActions.map(action => sendToStorage(action));\n                break;\n                \n            case \"switch\":\n                ruleActions.map(action => sendSwitch(action));\n                break;\n                \n            case \"announce\":\n                ruleActions.map(action => sendAnnouncement(action));\n                break;\n                \n            case \"notify\":\n                ruleActions.map(action => sendNotification(action));\n                break;\n\n            case \"playsound\":\n                ruleActions.map(action => sendPlaySound(action));\n                break;\n        \n            case \"raiseevent\":\n                ruleActions.map(action => sendRaiseEvent(action));\n                break;\n                \n            default:\n                node.warn(ruleId + \":\" + actionId + \" is not a recognised action\");\n        }\n    } else\n        node.warn(ruleId + \": Rule actions not an array\");\n}\n\n\nfunction sendToStorage(storeObj) {\n    // 3 types of message - key is mandatory plus either of:\n    //      fact: stores a fact value in in the key\n    //      value: stores the supplied value in the key\n    //      operator & value: stores the value operated on by operator\n    const {key, fact, value, operator} = storeObj\n    const out = {\n        accountId,\n        buildingId,\n        topic: key\n    }\n    \n    if (key) {\n        if (fact) {\n            out.payload = factData[fact];\n        } else if (operator && typeof value === \"number\") {\n            const {value: currentValue = 0} = D.getDataNode(accountId, buildingId, key);\n            if (operator === \"increment\") {\n                node.send({operator, accountId, buildingId, topic: key, payload: currentValue + value});\n            } else {\n                node.send({operator, accountId, buildingId, topic: key, payload: currentValue - value});\n            }\n        } else if (value !== undefined) {\n            if (typeof value === \"string\") {\n                out.payload = detokenise(value);\n            } else {\n                out.payload = value;\n            }\n        }\n    }\n        \n    node.status({text: \"stored \" + key});\n    node.send([null, null, null, null, null, out]);\n}\n\n\nfunction sendSwitch(switchObj) {\n    if (!switchObj.disabled) {\n        const moment = global.get(\"moment\");\n        \n        const msgSwitch = {\n            accountId,\n            buildingId,\n            id: switchObj.id || switchObj.device || switchObj.deviceId,\n            api: switchObj.api,\n            eventId: topic,\n            ruleId,\n            delay: switchObj.delay,\n            priority: switchObj.priority,\n            source: \"event\",\n            duration: switchObj.duration,\n            payload: switchObj.state\n        };\n        \n        node.status({text: msgSwitch.id + \":\" + (switchObj.state && switchObj.state.hasOwnProperty(\"on\") ? switchObj.state.on : \"unknown\") + (switchObj.duration ? \":D\" + switchObj.duration : \"\") + (switchObj.priority ? \":P\" + switchObj.priority : \"\")});\n        node.send([msgSwitch, null, null, null, null, null]);\n    }\n}\n\n\nfunction sendAnnouncement(announceObj) {\n    const {disabled, message, where, voice, delay} = announceObj;\n    // node.warn(message)\n    // node.warn(factData)\n    if (!disabled) {\n        const voiceMsg = detokenise(message);\n        const msgAnnounce = {\n            accountId,\n            buildingId,\n            where,\n            voice,\n            payload: voiceMsg,\n            delay\n        };\n        \n        node.send([null, msgAnnounce, null, null, null, null]);\n    }\n}\n\n\nfunction sendNotification(notifyObj) {\n    if (!notifyObj.disabled) {\n        if (notifyObj.who && Array.isArray(notifyObj.who)) {\n            notifyObj.who.forEach(function(person) {\n                let msgNotify = {\n                    accountId,\n                    who: person,\n                    topic: detokenise(notifyObj.subject || notifyObj.message),\n                    payload: detokenise(notifyObj.message || notifyObj.subject)\n                };\n                \n                node.send([null, null, null, msgNotify, null, null]);\n            });\n        } else\n            node.warn(ruleId + \": notify.who section invalid\");\n    }\n}\n\n\nfunction sendPlaySound(soundObj) {\n    if (!soundObj.disabled) {\n        const msgPlaySound = {\n            accountId,\n            buildingId,\n            topic: [accountId, buildingId, \"sound\", soundObj.where].join(\"/\"),\n            payload: soundObj.file || soundObj.sound\n        };\n        \n        node.send([null, null, null, null, msgPlaySound, null]);\n    }\n}\n\n\nfunction sendRaiseEvent(eventname) {\n    const msgRaiseEvent = {\n        accountId,\n        buildingId,\n        topic: eventname,\n        payload: eventData || {}\n    };\n    \n    node.send([null, null, msgRaiseEvent, null, null, null]);\n}\n\n\nfunction detokenise(message) {\n    if (message.indexOf(\"%\") >= 0) {   // it's tokenised\n        message = interpolate(message, factData);  // and detokenise it\n    }\n    \n    return message;\n}\n\n\nfunction interpolate(templateString, factData) {\n    return templateString.replace(/%([^%]*)%/g, (match, key) => {\n        const parts = key.split(\".\");\n        const lastPart = G.lastElement(parts);\n        // if (![\"value\", \"timestamp\"].includes(lastPart))\n            // key = key + \".value\";\n        const value = factData[key + \".value\"] || factData[key];\n        node.log(value)\n        node.log(building.tz)\n        \n        if (key.startsWith(\"time.\")) {\n            if (key.endsWith(\".now.value\") || key.endsWith(\".localtime.value\") || key.endsWith(\".sunrise.value\") || key.endsWith(\".sunset.value\"))\n                return moment(value).tz(building.timezone).format(\"H:mm\")\n            else if (key.endsWith(\".untilSunset.value\") || key.endsWith(\".sinceSunrise.value\"))\n                return moment.duration(value).humanize(true)\n            else if (key.endsWith(\".localtime.value\"))\n                return moment(value).tz(building.timezone).format(\"H:mm a\")\n            else if (key.endsWith(\".seconds.value\") || key.endsWith(\".minutes.value\"))\n                return value;\n            else return moment(value).tz(building.timezone).format(\"dddd, MMMM Do YYYY, H:mm a\")\n        } else {\n            return value;\n        }\n    });\n}\n",
        "outputs": 6,
        "noerr": 0,
        "x": 930,
        "y": 360,
        "wires": [
            [
                "4ed07928.ae1c48",
                "11c77588.2ae97a"
            ],
            [
                "5eae2679.89ad28",
                "1b666d66.420793"
            ],
            [
                "372b50b6.dc004",
                "31b66d70.1d7f12"
            ],
            [
                "5e925d7f.c8c414",
                "c53e3832.269d98"
            ],
            [
                "781b348e.0899fc",
                "3c6ab77a.da32b8"
            ],
            [
                "66ae929a.89fdfc",
                "f9b960d6.2241e"
            ]
        ],
        "outputLabels": [
            "switch",
            "speech",
            "event",
            "notify",
            "routeMQTT",
            "storage"
        ]
    },
    {
        "id": "d16f7488.15c078",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "everyT",
        "func": "const [G, S] = global.get([\"globals\", \"server\"]);\n\nG.iterateAllBuildings((accountId, buildingId) => {\n    var newMsg = {\n        accountId: accountId,\n        buildingId: buildingId, \n        topic: msg.topic,\n        priority: S.defaults.commandPriorities.rules || 2,\n        source: \"every\"\n    };\n    node.send(newMsg);\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "f3415a79.523398",
                "dcf02c73.cdbbd"
            ]
        ]
    },
    {
        "id": "f3415a79.523398",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 495,
        "y": 80,
        "wires": []
    },
    {
        "id": "dcf02c73.cdbbd",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 530,
        "y": 40,
        "wires": []
    },
    {
        "id": "f301dac3.185da8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "ERROR",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 920,
        "y": 540,
        "wires": []
    },
    {
        "id": "11e818a5.f729e7",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "RFRv2",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 540,
        "y": 140,
        "wires": []
    },
    {
        "id": "5d12780a.f6c888",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "findCode",
        "func": "// Finds the received code in the rfControllers definitions\nconst G = global.get(\"globals\");\nconst {payload, payload: code, topic} = msg;\nconst [accountId, buildingId] = topic.split(\"/\");\nconst building = G.getBuilding(accountId, buildingId);\n\nconst newMsg = {\n    topic,\n    accountId,\n    buildingId,\n    code,\n    payload\n};\n\nif (building && building.rf && building.rf[code] && typeof building.rf[code] === \"object\") {\n    const record = building.rf[code];\n    \n    node.status({text: `${code}: ${record.controller}`});\n    node.send([{...newMsg, payload: record}, null]);\n} else {\n    node.status({text: `${code}: UNKNOWN`});\n    node.send([null, newMsg]);\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 360,
        "y": 180,
        "wires": [
            [
                "11e818a5.f729e7",
                "415e002a.0780f"
            ],
            [
                "b3eab583.f77a88",
                "1ea6dd7.ef7fc23"
            ]
        ]
    },
    {
        "id": "415e002a.0780f",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "codeAction",
        "func": "const [G, S] = global.get([\"globals\", \"server\"]);\nconst  {accountId, buildingId, code, payload: definition, payload: {controller, button, ignore, priority = S.defaults.commandPriorities.rf || 1, device, deviceId = device}} = msg;\n\nif (definition && ignore) {    // ignored\n    node.status({text: code + \":\" + controller + \" ignored\", shape: \"ring\", fill: \"red\"});\n    return [null, null, msg];\n} else if (definition && deviceId) { // valid: action defined in controller record \n    node.status({text: code + \":\" + controller + \" OK\", shape: \"dot\", fill: \"green\"});\n    msg.priority = priority;\n    return [msg, null, null];\n} else {    // send an event\n    const newTopic = [\"rf\", controller, button].join(\".\");\n    node.status({text: `Event ${newTopic}`, shape: \"dot\", fill: \"green\"});\n    return [null, {\n        accountId,\n        buildingId,\n        deviceId,\n        topic: newTopic,\n        priority\n    }, null];\n}\n    ",
        "outputs": 3,
        "noerr": 0,
        "x": 550,
        "y": 200,
        "wires": [
            [
                "b573b973.e7fbf8",
                "a8785776.a055f8"
            ],
            [
                "9554076c.2ad358",
                "87320041.dccbf"
            ],
            [
                "18a6cc5f.da51f4"
            ]
        ],
        "outputLabels": [
            "direct",
            "unknown code",
            ""
        ]
    },
    {
        "id": "7f9c9391.b50c6c",
        "type": "mqtt in",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "+/+/rf/rx/#",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 80,
        "y": 180,
        "wires": [
            [
                "4c238a12.7c14a4"
            ]
        ]
    },
    {
        "id": "123977d4.c5c2b8",
        "type": "inject",
        "z": "6dba87b8.b5f088",
        "name": "test/simulate",
        "topic": "jfdi/champions/rf/rx",
        "payload": "9494563",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 540,
        "wires": [
            [
                "748e6143.c7969"
            ]
        ]
    },
    {
        "id": "748e6143.c7969",
        "type": "mqtt out",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 330,
        "y": 560,
        "wires": []
    },
    {
        "id": "b573b973.e7fbf8",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "validated",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 780,
        "y": 40,
        "wires": []
    },
    {
        "id": "8fa91a8c.72e408",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "RAW",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 350,
        "y": 140,
        "wires": []
    },
    {
        "id": "e6e7b62e.2d62e8",
        "type": "comment",
        "z": "6dba87b8.b5f088",
        "name": "Remote Controls",
        "info": "",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "3880df8a.7de28",
        "type": "inject",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "jfdi/champions/rf/tx",
        "payload": "13983659",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 580,
        "y": 540,
        "wires": [
            [
                "d502036.9dfca"
            ]
        ]
    },
    {
        "id": "d502036.9dfca",
        "type": "mqtt out",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "bc4f9bbd.55d3c8",
        "type": "inject",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "jfdi/champions/rf/tx",
        "payload": "13983658",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 580,
        "y": 580,
        "wires": [
            [
                "d502036.9dfca"
            ]
        ]
    },
    {
        "id": "7033d356.9957dc",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send switch state",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 975,
        "y": 80,
        "wires": []
    },
    {
        "id": "a8785776.a055f8",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "toBobb",
        "func": "// 05-06-2017 Updated with event & ruleId to support logging\n// Hit BobbAPI 2.0 with appropriate REST call\nconst {device, deviceId} = msg.payload;\nconst {accountId, buildingId, priority, payload: {controller, button, api = \"switch\", state = {}, id = device || deviceId}} = msg;\n\nconst newMsg = {\n    accountId,\n    buildingId,\n    priority,\n    eventId: [\"rf\", controller, button].join(\".\"),\n    source: \"rf\",\n    payload: Object.assign(state, {offTime: null})\n};\n\nswitch (api) {\n    case \"lights\":\n    case \"switch\":\n    case \"device\":\n    case \"tv\":\n        newMsg.deviceId = id;\n        node.send([newMsg, null, null, null, null, null, null]);\n        break;\n        \n    case \"room\":\n        newMsg.roomId = id;\n        node.send([null, newMsg, null, null, null, null, null]);\n        break;\n        \n    case \"lights-room\":\n    case \"lights/room\":\n        newMsg.roomId = id;\n        node.send([null, null, newMsg, null, null, null, null]);\n        break;\n\n    case \"group\":\n        newMsg.groupId = id;\n        node.send([null, null, null, newMsg, null, null, null]);\n        break;\n        \n    case \"sequence\":\n        newMsg.sequenceId = id;\n        node.send([null, null, null, null, newMsg, null, null]);\n        break;\n        \n    case \"scene\":\n        newMsg.sceneId = id;\n        node.send([null, null, null, null, null, newMsg, null]);\n        break;\n\n    default:\n        newMsg.id = id;\n        node.send([null, null, null, null, null, null, newMsg]);\n        break;\n}\n\nnode.status({shape: \"dot\", fill: \"green\", text: [api, id, state.on].join(\":\")});\n",
        "outputs": 7,
        "noerr": 0,
        "x": 780,
        "y": 120,
        "wires": [
            [
                "7033d356.9957dc",
                "62ecce82.ac146"
            ],
            [
                "20502595.68d40a",
                "62ecce82.ac146"
            ],
            [
                "62ecce82.ac146",
                "78a9fff0.07a9e"
            ],
            [
                "62ecce82.ac146",
                "bcdebba.bc09448"
            ],
            [
                "62ecce82.ac146",
                "cbf31494.a22ae8"
            ],
            [
                "62ecce82.ac146",
                "6cb70c4c.b4d7f4"
            ],
            [
                "62ecce82.ac146"
            ]
        ],
        "outputLabels": [
            "device",
            "room",
            "group",
            "sequence",
            "scene",
            "unknown",
            null
        ]
    },
    {
        "id": "20502595.68d40a",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send room state",
        "links": [
            "e1543396.1ede9"
        ],
        "x": 975,
        "y": 120,
        "wires": []
    },
    {
        "id": "bcdebba.bc09448",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send group state",
        "links": [
            "7b28656f.0f32fc"
        ],
        "x": 975,
        "y": 200,
        "wires": []
    },
    {
        "id": "cbf31494.a22ae8",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send seq state",
        "links": [
            "fb7d38c4.619e88"
        ],
        "x": 975,
        "y": 240,
        "wires": []
    },
    {
        "id": "2c4910de.61435",
        "type": "inject",
        "z": "6dba87b8.b5f088",
        "name": "send doorbell code",
        "topic": "jfdi/champions/rf/tx",
        "payload": "9494563",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 580,
        "wires": [
            [
                "748e6143.c7969"
            ]
        ]
    },
    {
        "id": "9554076c.2ad358",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "handleRFEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 735,
        "y": 200,
        "wires": []
    },
    {
        "id": "87320041.dccbf",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "EVENT",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 780,
        "y": 240,
        "wires": []
    },
    {
        "id": "60922e58.141dc",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "transformTopic",
        "func": "const xformMqttTopicToStorageKey = t => t.toLowerCase().replace(/\\//g, \".\").replace(\"sensors.\", \"\");\nconst topic = xformMqttTopicToStorageKey(msg.topic);\nconst parts = topic.split(\".\");\nlet {payload} = msg\nif (topic.endsWith(\".pir\") && (payload === \"1\" || payload === \"0\"))\n    payload = Number(payload)\n    \nconst newMsg = {\n    topic,\n    payload,\n    source: \"sensors\"\n};\n\nswitch (parts.length) {\n    // \"sensors.\"\" has been removed by this point so theres one fewer parts to deal with\n    case 4: // all parts communicated in topic i.e. account/building/sensors/room.device/metric\n    case 5: // all parts communicated in topic i.e. account/building/sensors/room/device/variable\n        node.status({fill: \"green\", shape: \"dot\", text: parts.length + \":\" + topic});\n        return [newMsg, null];\n\n    case 3: // DEPRECATED sensors/building/room/variable\n        node.status({fill: \"red\", shape: \"ring\", text: parts.length + \":\" + topic});\n        return [null, newMsg];\n        \n    case 2:\n        // DEPRECATED buildingId and accountId come from which MQTT broker sent the message\n        node.status({fill: \"red\", shape: \"ring\", text: parts.length + \":\" + topic});\n        return [null, newMsg];\n    \n    default:\n        node.status({fill: \"red\", shape: \"ring\", text: parts.length + \":\" + topic});\n        return [null, newMsg];\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 500,
        "y": 260,
        "wires": [
            [
                "111dfd04.c53353",
                "ffc62309.b20f"
            ],
            [
                "bb3dde55.c989d"
            ]
        ]
    },
    {
        "id": "bb3dde55.c989d",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "ERR",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "df5ba685.0b6e58",
        "type": "frequency",
        "z": "4ec77ac0.46dd44",
        "name": "freq1",
        "interval": "60000",
        "ntfyinterval": "60000",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "df90ed79.12829"
            ]
        ]
    },
    {
        "id": "df90ed79.12829",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "SENSORRATE",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "8c8a607f.5e5fc",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "GETGLOBALS",
        "func": "const [G, D, azureConnStr, secretKey, adminAuthToken] = global.get(\n    [\n        \"globals\",\n        \"dataEngine\",\n        \"azureConnStr\",\n        \"secretKey\",\n        \"adminAuthToken\"\n    ]\n);\nmsg.payload = {G, D, azureConnStr, secretKey, adminAuthToken};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 620,
        "wires": [
            [
                "7aa6d1a9.24c12"
            ]
        ]
    },
    {
        "id": "38b66d1e.a08fc2",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "GLOBALS",
        "func": "// 30-12-17 new get state central function\n// 05-06-2017 Updated with event & ruleId to support logging\nglobal.set(\n    [\n        \"azureConnStr\",\n        \"secretKey\",\n        \"adminAuthToken\"\n    ], [\n        env.get(\"azureConnStr\"),\n        env.get(\"secretKey\"),\n        env.get(\"adminAuthToken\")\n    ]\n);\n\nconst maxHistoryAgeMins = 60;\n\nconst server = {\n    url: env.get(\"CANONICAL_API_SERVER\"),\n    apiPath: env.get(\"CANONICAL_API_PATH\"),\n    accountSegment: null,\n    notifications: {\n        status: [\"jsilver\"]\n    },\n    defaults: {\n        maxHistoryAgeMins,\n        maxHistoryAgeMillis: maxHistoryAgeMins * 60 * 1000,\n        tokenDurationMins: 60 * 24,\n        commandPriorities: {\n            rf: 1,\n            timeouts: 2,\n            cameraMotion: 3,\n            rules: 2,\n            generic: 1\n        },\n        lowerPriorityTimeout: 60\n    },\n    limits: {\n        temperature: {\n            max: 50,\n            min: -10\n        },\n        humidity: {\n            max: 100,\n            min: 0\n        }\n    },\n    eventThresholds: {\n        temperature: 0.5\n    }\n};\nglobal.set(\"server\", server);\n    \nglobal.set(\"changeThresholds\", {\n    any: 0.5,\n    temperature: 0.5,\n    humidity: 1,\n    pressure: 10,\n    light: 10,\n    height: 5,\n    gas: 1\n});\n\nconst metrics = {\n    default: {\n        noHistory: true, // no history kept\n        noStatistics: true, // no statistics calculated - implies no history\n        noTimestamp: false, // no timestamp kept with value\n        decimals: 2, // number of decimal places to round values to\n        noEvents: false, // no events generated or event values kept\n        noRounding: false\n    },\n    height: {\n        decimals: 0,\n        unit: \"cm\"\n    },\n    switch: {\n        map: \"on\"\n    },\n    icon: {\n        noEvents: true,\n        noHistory: true,\n        noStatistics: true\n    },\n    bri: {\n        map: \"brightness\"\n    },\n    brightness: {\n        decimals: 0,\n        unit: \"%\",\n        noHistory: true,\n        noStatistics: true\n    },\n    hue: {\n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    },\n    sat: {\n        map: \"saturation\"\n    },\n    saturation: {\n        decimals: 0,\n        unit: \"%\",\n        noHistory: true,\n        noStatistics: true\n    },\n    ct: {\n        map: \"colourtemperature\"\n    },\n    colortemperature: {\n        map: \"colourtemperature\"\n    },\n    colourtemperature: {\n        label: \"Colour Temp\",\n        unit: \"K\",\n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    },\n    gas: {\n        label: \"Gas Conc\",\n        unit: \"ppm\",\n        decimals: 0\n    },\n    pir: {\n        noHistory: true, // no history kept\n        noStatistics: true, // no statistics calculated - implies no history\n        noTimestamp: false, // no timestamp kept with value\n        decimals: 0, // number of decimal places to round values to\n        noEvents: false, // no events generated or event values kept\n        noRounding: true\n    },\n    open: {\n        noHistory: true, // no history kept\n        noStatistics: true, // no statistics calculated - implies no history\n        noTimestamp: false, // no timestamp kept with value\n        noEvents: false // no events generated or event values kept\n    },\n    humidity: {\n        label: \"Humidity\",\n        unit: \"%\",\n        decimals: 0\n    },\n    \"humidity%\": {\n        map: \"humidity\"\n    },\n    hum: {\n        map: \"humidity\"\n    },\n    relativehumidity: {\n        map: \"humidity\"\n    },\n    luminance: {\n        map: \"light\"\n    },\n    luminosity: {\n        map: \"light\"\n    },\n    lux: {\n        map: \"light\"\n    },\n    lightlux: {\n        map: \"light\"\n    },\n    light: {\n        label: \"Luminance\",\n        unit: \"lux\",\n        decimals: 0\n    },\n    temperature: {\n        label: \"Temperature\",\n        unit: \"°C\",\n        decimals: 1\n    },\n    temp: {\n        map: \"temperature\"\n    },\n    tempc: {\n        map: \"temperature\",\n            // convert: [{\n            //     tempf: \"tempc * 1.8 + 32\"\n            // }]\n    },\n    tempf: {\n        convert: [{\n            temperature: \"(tempf - 32) / 1.8\",\n        }]\n    },\n    pressure: {\n        label: \"Pressure\",\n        unit: \"mb\",\n        decimals: 0\n    },\n    pressuremb: {\n        map: \"pressure\"\n    },\n    barometricpressure: {\n        map: \"pressure\"\n    },\n    press: {\n        map: \"pressure\"\n    },\n    power: {\n        unit: \"W\",\n        decimals: 0\n    },\n    heating1: {\n        map: \"setpoint\"\n    },\n    setpoint: {\n        label: \"Target Temp\",\n        unit: \"°C\",\n        decimals: 1\n    },\n    buildingId: {\n        noHistory: true,\n        noStatistics: true\n    },\n    high: {},\n    low: {},\n    latitude: {\n        map: \"lat\"\n    },\n    location: {\n        noStatistics: true\n    },\n    longitude: {\n        map: \"lon\"\n    },\n    lat: {\n        noRounding: true\n    },\n    lon: {\n        noRounding: true\n    },\n    acc: {\n        map: \"locationaccuracy\"\n    },\n    locationaccuracy: {\n        unit: \"m\",\n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    },\n    alt: {\n        map: \"altitude\"\n    },\n    \"altitude\": {\n        unit: \"m\",\n        \n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    },\n    vac: {\n        map:\"altitudeaccuracy\"\n    },\n    altitudeaccuracy: {\n        unit: \"m\",\n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    },\n    vel: {\n        map: \"velocity\"\n    },\n    velocity: {\n        unit: \"kmh\",\n        decimals: 0\n    },\n    conn: {\n        map: \"connectivity\"\n    },\n    connectivity: {\n        noHistory: true,\n        noStatistics: true\n    },\n    t: {\n        map: \"trigger\"\n    },\n    trigger: {\n        noHistory: true,\n        noStatistics: true\n    },\n    batt: {\n        map: \"battery\"\n    },\n    batterylevel: {\n        map: \"battery\"\n    },\n    battery: {\n        unit: \"%\",\n        decimals: 0,\n        noHistory: true,\n        noStatistics: true\n    }\n};\nglobal.set(\"metrics\", metrics);\n\n// CODE STARTS HERE\n\nconst getApiBaseUrl = () => \n    `https://${server.url}${server.apiPath}`;\n\nconst objectMatches = (object, filter) =>\n    Object.entries(filter).reduce((a, [key, val]) =>\n        a && ((object[key] === val) || (typeof val === \"boolean\" && (object[key] === val || (!object[key] && !val)))), true);\n\nconst objectReduce = (object, reduceFn, initialValue) =>\n    Object.entries(object).reduce(reduceFn, initialValue);\n\nconst buildObjectFromEntries = (object, objFn) =>\n    objectReduce(object, (acc, [key, val]) => ({ ...acc, ...objFn([key, val], acc) }), {});\n\nconst ensureProp = (obj, prop, dflt = {}) => {\n    if (!obj.hasOwnProperty(prop)) obj[prop] = dflt;\n    return obj[prop];\n};\n\nconst G = {\n    getApiBaseUrl,\n    objectMatches,\n    objectReduce,\n    buildObjectFromEntries,\n    ensureProp,\n    deleteSubObjects: function(obj) {\n        const tempObj = JSON.parse(JSON.stringify(obj)); // copy object, disconnect from original\n        \n        Object.keys(tempObj).forEach(key => {\n            if (typeof tempObj[key] === \"object\") delete tempObj[key];\n        });\n        \n        return tempObj;\n    },\n    getBinState: function(oldOn, newState) {\n        const stateType = typeof newState;\n        \n        if (stateType !== \"undefined\") {\n            if (stateType == \"object\") {\n                if (newState.hasOwnProperty(\"state\") && typeof newState.state === \"string\")\n                    newState = newState.state;\n                else\n                    return newState.on || false;\n            }\n            \n            if (stateType == \"boolean\")\n                return newState;\n            \n            if (!isNaN(parseInt(newState)) && newState >=0 && newState <=2 )    // newState is numeric\n                return [false, true, !oldOn][newState];\n            \n            if (stateType === \"string\") {\n                newState = newState.toLowerCase();\n                \n                if (newState === \"true\" || newState === \"false\") return newState === \"true\";\n                if (newState === \"on\" || newState === \"off\") return newState === \"on\";\n            }\n        } else return false;\n    },\n    elapsedSecsSince: (date) => new Date(new Date() - date).getTime() / 1000,\n    getAccounts: () => Object.keys(global.get(\"accounts\")),\n    getAccount: function(accountId) {\n        if (!accountId) node.warn(\"getAccount: no accountId specified\");\n        const accounts = global.get(\"accounts\");\n\n        return accounts[accountId];\n    },\n    getPeople: function(accountId) {\n        if (!accountId) node.warn(\"getPeople: no accountId specified\");\n        const {people = {}} = this.getAccount(accountId);\n        return people;\n    },\n    getBuildings: function(accountId) {\n        if (!accountId) node.warn(\"getBuildings: no accountId specified\");\n        return Object.keys(this.objectOrEmpty(this.getAccount(accountId)).buildings) || [];\n    },\n    getDevices: function(accountId, buildingId) {\n        if (!accountId) node.warn(\"getDevices: no accountId specified\");\n        if (!buildingId) node.warn(\"getDevices: no buildingId specified\");\n        return Object.keys(this.getBuildingOrEmpty(accountId, buildingId).devices) || [];\n    },\n    getGroups: function(accountId, buildingId) {\n        if (!accountId) node.warn(\"getGroups: no accountId specified\");\n        if (!buildingId) node.warn(\"getGroups: no buildingId specified\");\n        return Object.keys(this.getBuildingOrEmpty(accountId, buildingId).groups) || [];\n    },\n    getRules: function(accountId, buildingId) {\n        if (!accountId) node.warn(\"getRules: no accountId specified\");\n        if (!buildingId) node.warn(\"getRules: no buildingId specified\");\n        return Object.keys(this.objectOrEmpty(this.getBuildingOrEmpty(accountId, buildingId).rules)) || [];\n    },\n    getScenes: function(accountId, buildingId) {\n        if (!accountId) node.warn(\"getScenes: no accountId specified\");\n        if (!buildingId) node.warn(\"getScenes: no buildingId specified\");\n        return Object.keys(this.getBuildingOrEmpty(accountId, buildingId).scenes) || [];\n    },\n    storeAccount: function(account) {\n        if (!account) node.warn(\"storeAccount: no account specified\");\n        if (typeof account !== \"object\") node.warn(\"storeAccount: account not an object\");\n        if (!account.accountId) node.warn(\"storeAccount: no accountId in account object\");\n        let accounts = global.get(\"accounts\");\n        if (accounts === null || !accounts) {\n            accounts = {};\n            node.warn(\"accounts object initialised\");\n        }\n        \n        accounts[account.accountId] = account;\n        global.set(\"accounts\", accounts);\n        return true;\n    },\n    accountExists: function(accountId) {\n        const accounts = global.get(\"accounts\");\n\n        return (accounts && accounts[accountId]);\n    },\n    buildingExists: function(accountId, buildingId) {\n        const accounts = global.get(\"accounts\");\n\n        return (accounts && accounts[accountId] && accounts[accountId].buildings && accounts[accountId].buildings[buildingId]);\n    },\n    getBuilding: function(accountId, buildingId) {\n        if (!accountId) node.warn(\"getBuilding: no accountId specified\");\n        if (!buildingId) node.warn(\"getBuilding: no buildingId specified\");\n        let account = this.getAccount(accountId);\n        return account.buildings[buildingId] || undefined;\n    },\n    getBuildingOrEmpty: function(accountId, buildingId) { return this.getBuilding(accountId, buildingId) || {} },\n    objectOrEmpty: function(obj) { return obj || {} },\n    storeBuilding: function(building) {\n        if (!building) node.warn(\"storeBuilding: no building specified\");\n        if (typeof building !== \"object\") node.warn(\"storeBuilding: building not an object\");\n        if (!building.accountId) node.warn(\"storeBuilding: no accountId in building object\");\n        if (!building.buildingId) node.warn(\"storeBuilding: no buildingId in building object\");\n        let account = this.getAccount(building.accountId);\n\n        if (account && account.buildings) account.buildings[building.buildingId] = building;\n        \n        return true;\n    },\n    findDeviceByApiId: function(accountId, buildingId, id, api) {\n        return this.getDevices(accountId, buildingId).find(deviceId => {\n            const device = this.getDevice(accountId, buildingId, deviceId);\n            return device.nodeid == id && device.api == api;\n        });\n    },\n    getDevice: function(accountId, buildingId, deviceId) {\n        if (!accountId) node.warn(\"getDevice: no accountId specified\");\n        if (!buildingId) node.warn(\"getDevice: no buildingId specified\");\n        if (!deviceId) node.warn(`getDevice: no deviceId specified (${accountId}/${buildingId})`);\n        const AB = this.validateAB(accountId, buildingId);\n        return (!AB.error) && (AB.building.devices && AB.building.devices[deviceId]) ? AB.building.devices[deviceId] : null;\n    },\n    getGroup: function(accountId, buildingId, groupId) {\n        if (!accountId) node.warn(\"getGroup: no accountId specified\");\n        if (!buildingId) node.warn(\"getGroup: no buildingId specified\");\n        if (!groupId) node.warn(\"getGroup: no groupId specified\");\n        const AB = this.validateAB(accountId, buildingId);\n        return (!AB.error) && (AB.building.groups && AB.building.groups[groupId]) ? AB.building.groups[groupId] : null;\n    },\n    getScene: function(accountId, buildingId, sceneId) {\n        if (!accountId) node.warn(\"getScene: no accountId specified\");\n        if (!buildingId) node.warn(\"getScene: no buildingId specified\");\n        if (!sceneId) node.warn(\"getScene: no sceneId specified\");\n        const AB = this.validateAB(accountId, buildingId);\n        return (!AB.error) && (AB.building.scenes && AB.building.scenes[sceneId]) ? AB.building.scenes[sceneId] : null;\n    },\n    getSequence: function(accountId, buildingId, sequenceId) {\n        if (!accountId) node.warn(\"getSequence: no accountId specified\");\n        if (!buildingId) node.warn(\"getSequence: no buildingId specified\");\n        if (!sequenceId) node.warn(\"getSequence: no sequenceId specified\");\n        const AB = this.validateAB(accountId, buildingId);\n        return (!AB.error) && (AB.building.sequences && AB.building.sequences[sequenceId]) ? AB.building.sequences[sequenceId] : null;\n    },\n    getRule: function(accountId, buildingId, ruleId) {\n        if (!accountId) node.warn(\"getRule: no accountId specified\");\n        if (!buildingId) node.warn(\"getRule: no buildingId specified\");\n        if (!ruleId) node.warn(\"getRule: no ruleId specified\");\n        const AB = this.validateAB(accountId, buildingId);\n        return (!AB.error) && (AB.building.rules && AB.building.rules[ruleId]) ? AB.building.rules[ruleId] : null;\n    },\n    nodeStatus: function(err, text) {\n        const colours = err ? {\n            fill: \"red\",\n            shape: \"ring\"\n        } : {\n            fill: \"green\",\n            shape: \"dot\"\n        }\n        \n        return {text, ...colours};\n    },\n    handleQuery: function(msg, node, opts) {\n        var suffix;\n        let options = opts || {};\n        this.extractParams(msg);\n            \n        let account = this.getAccount(msg.accountId);\n        if (account) {\n            msg.account = account;\n            let building = account.buildings[msg.buildingId];\n            if (building) {  // building found\n                msg.building = building;\n                \n                const handleThings = thingType => {\n                    const thingId = thingType + \"Id\";\n                    const thingPlural = thingType + \"s\";\n                    suffix = msg[thingId];\n                    const thing = building[thingPlural][msg[thingId]];\n                    if (thing) {\n                        msg[thingType] = thing;\n                    } else {\n                        msg.error = true;\n                        msg.payload = \"no such \" + thingType + \" \" + msg[thingId];\n                        msg.statusCode = \"404\";\n                    }\n                };\n\n                if (msg.deviceId) handleThings(\"device\");\n                else if (msg.groupId) handleThings(\"group\");\n                else if (msg.sceneId) handleThings(\"scene\");\n                else if (msg.sequenceId) handleThings(\"sequence\");\n                else if (msg.ruleId) handleThings(\"rule\");\n                else if (msg.humanId) handleThings(\"human\");\n                else if (msg.personId) handleThings(\"person\");\n            } else {\n                msg.error = true;\n                msg.payload = \"no such building \" + msg.buildingId;\n                msg.statusCode = \"404\";\n            }\n        } else {\n            msg.error = true;\n            msg.payload = \"no such account \" + msg.accountId;\n            msg.statusCode = \"404\";\n        }\n        \n        if (!options.noStatus || msg.error) node.status(this.nodeStatus(msg.error, msg.error ? msg.payload : [msg.accountId, msg.buildingId].join(\".\") + (suffix ? \".\" + suffix : \"\")));\n    },\n    extractParams: function(msg) {\n        if (msg.req) Object.keys(msg.req.params).map(key => msg[key] = msg.req.params[key]);\n    },\n    iterateAllAccounts: function(callback) {\n        this.getAccounts().map(accountId => callback(accountId));\n    },\n    iterateAllBuildings: function(callback) {\n        this.getAccounts().map(accountId => {\n            this.getBuildings(accountId).map(buildingId => callback(accountId, buildingId));\n        });\n    },\n    forBuildingsInAccount: function(accountId, callback) {\n        this.getBuildings(accountId).map(buildingId => callback(buildingId));\n    },\n    forDevicesInBuilding: function(accountId, buildingId, callback) {\n        this.getDevices(accountId, buildingId).map(deviceId => callback(deviceId));\n    },\n    iterateAllDevices: function(callback) {\n        this.getAccounts().map(accountId =>\n            this.getBuildings(accountId).map(buildingId => \n                this.getDevices(accountId, buildingId).map(deviceId => callback(accountId, buildingId, deviceId))\n            )\n        );\n    },\n    iterateAllGroups: function(callback) {\n        this.getAccounts().map(accountId =>\n            this.getBuildings(accountId).map(buildingId => \n                this.getGroups(accountId, buildingId).map(groupId => callback(accountId, buildingId, groupId))\n            )\n        );\n    },\n    iterateAllRules: function(callback) {\n        this.getAccounts().map(accountId =>\n            this.getBuildings(accountId).map(buildingId => \n                this.getRules(accountId, buildingId).map(ruleId => callback(accountId, buildingId, ruleId))\n            )\n        );\n    },\n    forRulesInBuilding: function(accountId, buildingId, callback) {\n        this.getRules(accountId, buildingId).map(ruleId => callback(ruleId))\n    },\n    validateAB: function(accountId, buildingId) {\n        let retVal = {};\n        let account = this.getAccount(accountId);\n        if (account) {\n            retVal.account = account;\n            let building = account.buildings[buildingId];\n            if (building) {  // building found\n                retVal.building = building;\n            } else {\n                retVal.error = true;\n                retVal.statusMessage = \"no such building \" + buildingId;\n                retVal.statusCode = \"404\";\n            }\n        } else {\n            retVal.error = true;\n            retVal.statusMessage = \"no such account \" + accountId;\n            retVal.statusCode = \"404\";\n        }\n        \n        return retVal;\n    },\n    validState: function(newState, deviceId) {\n        return true;\n    },\n    objectHas: function(obj, propArray) {\n        let retObj = {ok: false, message: \"\"};\n        let allOK = false;\n        if (!(obj && propArray && typeof obj == \"object\" && Array.isArray(propArray)))\n            retObj.message = \"objectHas: bad arguments\";\n        else {\n            let i = 0;\n            allOK = true;\n            while (allOK && i < propArray.length) {\n                allOK = allOK && (obj[propArray[i]]);\n                i++;\n            }\n            if (!allOK) retObj.message = \"objectHas: property \" + propArray[i-1] + \" missing\";\n        }\n        retObj.ok = allOK;\n        return retObj;\n    },\n    oDataToObject: function(rec, bare) {\n        let obj = this.objectFromEntries(Object.keys(rec).map((key) => [key, this.convertODataType(rec[key].$, rec[key]._)]));\n    \n        if (bare) {\n            delete obj.PartitionKey;\n            delete obj.RowKey;\n            delete obj.Timestamp;\n            delete obj[\".metadata\"];\n        }\n        \n        return obj;\n    },\n    easySuncalc: function(lat, lon, when) {\n        const SunCalc = global.get('suncalc');\n        const moment = global.get(\"moment\");\n    \n        const now = when || new Date();\n    \n        const times = SunCalc.getTimes(now, lat, lon);\n        // const position = SunCalc.getPosition(now, lat, lon);\n    \n        // position.azimuthDegrees = position.azimuth * (180 / Math.PI);\n        // position.altitudeDegrees = position.altitude * (180 / Math.PI);\n        // position.bearingDegress = (position.azimuthDegrees + 180) % 360;\n        // position.azimuthCompass = this.compassDirection(position.bearingDegrees);\n\n        Object.defineProperty(times, \"isDawn\", {\n            get: function() {\n                return moment(now).isBetween(this.dawn, this.sunrise, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isDusk\", {\n            get: function() {\n                return moment(now).isBetween(this.dusk, this.nauticalDusk, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isMorningGoldenHour\", {\n            get: function() {\n                return moment(now).isBetween(this.dawn, this.goldenHourEnd, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isEveningGoldenHour\", {\n            get: function() {\n                return moment(now).isBetween(this.goldenHour, this.night, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isGoldenHour\", {\n            get: function() {\n                return this.isMorningGoldenHour || this.isEveningGoldenHour;\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isDaylight\", {\n            get: function() {\n                return moment(now).isBetween(this.goldenHourEnd, this.goldenHour, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"isNight\", {\n            get: function() {\n                return moment(now).isAfter(this.nauticalDusk, \"minutes\") || moment(now).isBefore(this.nauticalDawn, \"minutes\");\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"daylightDuration\", {\n            get: function() {\n                return moment(this.sunset).diff(this.sunrise);\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"sinceSunrise\", {\n            get: function() {\n                return moment(now).diff(this.sunrise);\n            },\n            enumerable: true\n        });\n    \n        Object.defineProperty(times, \"untilSunset\", {\n            get: function() {\n                return moment(this.sunset).diff(now);\n            },\n            enumerable: true\n        });\n    \n        const suncalc = {\n            times: times,\n            // position: position,\n        };\n    \n        suncalc.times.now = now;\n    \n        return suncalc;\n    },\n    scheduleJob: function(options) {\n        const connStr = global.get(\"azureConnStr\");\n        const azureStorage = global.get(\"azureStorage\");\n        const tableService = azureStorage.createTableService(connStr);\n        const entGen = azureStorage.TableUtilities.entityGenerator;\n        \n        if (options && typeof options == \"object\" && options.topic && options.url && options.time) {\n            const entity = {\n                PartitionKey: options.topic,\n                RowKey: \"1\",\n                time: entGen.Int32(Math.round((options.time  / 60000), 0)),\n                url: entGen.String(options.url),\n                body: entGen.String(JSON.stringify(Object.assign(options.body || {}, {\n                    source: options.source,\n                    reason: options.reason\n                }))),\n                httpMethod: entGen.String(\"PUT\"),\n                repeatMins: entGen.Int32(msg.repeat || 0)\n            };\n        \n            tableService.insertOrReplaceEntity('bobbScheduler', entity, function (error, result, response) {\n                // if (!error) tableService.insertEntity('bobbSchedulerIndex', {PartitionKey: entity.RowKey, RowKey: entity.PartitionKey}, function(error, result, response) {});\n                return !error;\n            });\n        } else {\n            return false;\n        }\n    },\n    createBlobService: function() {\n        const connStr = global.get(\"azureConnStr\")\n        const azureStorage = global.get(\"azureStorage\")\n        return azureStorage.createBlobService(connStr)\n    },\n    loadBlob: function(blobContainer, blobPath) {\n        const blobService = this.createBlobService()\n        \n        return new Promise(function(resolve, reject) {\n            blobService.getBlobToText(blobContainer, blobPath, function(err, result, response) {\n                if (err) {\n                    reject(new Error(err));\n                } else {\n                    resolve(result);\n                }\n            });\n        });\n    },\n    saveBlob: function(blobContainer, blobPath, text) {\n        const blobService = this.createBlobService()\n        \n        return new Promise(function(resolve, reject) {\n            blobService.createBlockBlobFromText(blobContainer, blobPath, text, (err, result, response) => {\n                if (err) {\n                    reject(new Error(err));\n                } else {\n                    resolve(result);\n                }\n            });\n        });\n    },\n    createBlobContainer: function(blobContainer) {\n        const blobService = this.createBlobService()\n        \n        return new Promise(function(resolve, reject) {\n            blobService.createContainerIfNotExists(blobContainer, (err, result, response) => {\n                if (err) {\n                    reject(new Error(err));\n                } else {\n                    resolve(result);\n                }\n            })\n        })\n    },\n    listBlobsInContainer: function(blobContainer, path) {\n        const blobService = this.createBlobService()\n        \n        return new Promise(function(resolve, reject) {\n            blobService.listBlobsSegmentedWithPrefix(blobContainer, path, null, function(err, result, response) {\n                if (err) {\n                    reject(new Error(err));\n                } else {\n                    resolve(result.entries.map(blob => blob.name));\n                }\n            });\n        });\n    },\n    findBuildingNear: function(accountId, lat, lon, radius = 50) {\n        const geolib = global.get(\"geolib\");\n        \n        return G.getBuildings(accountId).find(buildingId => {\n            const building = G.getBuilding(accountId, buildingId);\n            \n            return building.lat && building.lon && geolib.isPointWithinRadius(\n                { latitude: lat, longitude: lon }, \n                { latitude: building.lat, longitude: building.lon },\n                radius);\n        });\n    },\n    ruleHasConditions: function(rule) {\n        return (\n            rule.conditions &&\n            ((rule.conditions.all && Array.isArray(rule.conditions.all) && rule.conditions.all.length) ||\n            (rule.conditions.any && Array.isArray(rule.conditions.any) && rule.conditions.any.length))\n        );\n    },\n    expandConditions: function(condBlock) {\n        if (condBlock.all && Array.isArray(condBlock.all) && condBlock.all.length) {\n            this.expandConditionsRecursive(condBlock.all, this);\n        }\n    \n        if (condBlock.any && Array.isArray(condBlock.any) && condBlock.any.length) {\n            this.expandConditionsRecursive(condBlock.any, this);\n        }\n    },\n    expandConditionsRecursive: function(allOrAnyBlock, self) {\n        const lastPartIsOneOf = (thing, values, sep) => {\n            const parts = thing.split(sep);\n            const lastPart = parts[parts.length - 1];\n            return values.includes(lastPart);\n        }\n        \n        allOrAnyBlock.forEach(function(element) {\n            if (element.all && Array.isArray(element.all) && element.all.length) {\n                // recurse down into nested all blocks\n                self.expandConditionsRecursive(element.all, self);\n            } else if (element.any && Array.isArray(element.any) && element.any.length) {            // recurse down into nested any blocks\n                self.expandConditionsRecursive(element.any, self);\n            } else if (element.fact) {\n                if (!lastPartIsOneOf(element.fact, [\"previousValue\", \"value\", \"timestamp\", \"previousTimestamp\"], \".\"))\n                    element.fact = element.fact + \".value\";\n            }\n        });\n    },\n    formatDate: function(date, format) { return global.get(\"moment\")(date).format(format) },\n    shortestDateTime: function(date = Date.now()) { return this.formatDate(date, \"D-MMM HH:mm\") },\n    compassDirection: function(angle) {\n        return [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"][Math.floor((angle / 22.5) + 0.5) % 16];\n    },\n    genHttpError: (node, msg, code, id, err) => {\n        node.status(this.nodeStatus(true, id + \":\" + err.toUpperCase()));\n        return Object.assign(msg, {payload: err.toUpperCase(), statusCode: code});\n    },\n    isDate: d => Object.prototype.toString.call(d) === '[object Date]',\n    flattenArrayOfArrays: (arrayOfArrays => arrayOfArrays.reduce((a, b) => a.concat(b), [])),\n    deviceIdSortComparator: (a, b) => (a.deviceId || \"\").toLowerCase() < (b.deviceId || \"\").toLowerCase() ? -1 : ((b.deviceId || \"\").toLowerCase() < (a.deviceId || \"\").toLowerCase()) ? 1 : 0,\n    deviceDescriptionSortComparator: (a, b) => (a.description || \"\").toLowerCase() < (b.description || \"\").toLowerCase() ? -1 : ((b.description || \"\").toLowerCase() < (a.description || \"\").toLowerCase()) ? 1 : 0,\n    convertODataType: (type, value) => ((!type || [\"Edm.String\", \"Edm.Binary\", \"Edm.Guid\", \"Edm.Boolean\"].includes(type)) ? value : ([\"Edm.Int32\", \"Edm.Int64\", \"Edm.Double\"].includes(type) ? Number(value) : (type ==  \"Edm.DateTime\" ? new Date(value) : null))),\n    objectFromEntries: keyValueArray => keyValueArray.map(([key, val]) => ([key, val])).reduce((obj, [k, v]) => Object.assign(obj, { [k]: v }), {}),\n    newObjectFromArray: array => array.reduce((a, c) => {a[c] = {}; return a;}, {}),\n    invertedTicks: () => (new Date(9999, 12, 31, 23, 59, 59, 9999999).getTime() - new Date().getTime()),\n    toTitleCase: str => str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()),\n    mean: (...args) => args.reduce((a, b) => a + b) / args.length,\n    lastElement: array => array[array.length - 1],\n    renameKey: function(object, key, newKey) {\n        if (typeof object === \"object\" && object.hasOwnProperty(key)) {\n            object[newKey] = object[key];\n            delete object[key];\n        } else node.warn(\"renameKey: no such key or not an object\");\n    },\n    joiner: (array, separator) => array.filter(Boolean).join(separator || \".\"),\n    stateWord: binState => binState ? \"on\" : \"off\",\n    isActuator: (device) => (device.actuator || device.light || device.heating || device.cooling || device.appliance || device.wol || device.virtual || device.wemoEmulation || device.readonly || device.alwaysOn) && !(device.stateless || device.hidden),\n    findPersonByFullName: function(accountId, fullName) {\n        const account = this.getAccount(accountId);\n        const compName = fullName.toLowerCase();\n        const personKey = Object.keys(account.people).find(personId => {\n            const person = account.people[personId];\n            return ([person.firstName, person.lastName].join(\" \").trim().toLowerCase() === compName);\n        });\n        if (personKey)\n            return Object.assign({personId: personKey}, account.people[personKey]);\n        else\n            return {};\n    },\n    copyProperty: (obj1, obj2, propName) => Object.defineProperty(obj2, propName, Object.getOwnPropertyDescriptor(obj1, propName)),\n    shallowCopy: obj => Object.keys(obj).reduce((a, key) => typeof obj[key] === \"object\" ? a : {...a, [key]: obj[key]}, {}),\n    bind: (object, method) => object[method] = object[method].bind(object),\n    bindAll: object => Object.keys(object).filter(member => typeof member === \"function\").map(member => bind(object, member)),\n    memoizeResult: (fn, name) => {\n        const r = global.get(name);\n        \n        if (r === undefined) {\n            const x = fn();\n            global.set(name, x);\n            // node.warn(\"new\");\n            return x;\n        } else {\n            // node.warn(\"cache\");\n            return r;\n        }\n    },\n    normaliseState: (newState, oldOn = false) => {\n        switch (typeof newState) {\n            case \"boolean\":\n                return newState\n                \n            case \"string\":\n                newState = newState.toLowerCase()\n                if (newState === \"on\" || newState === \"1\")\n                     return true\n                else if (newState === \"off\" || newState === \"0\")\n                    return false\n                else if (newState === \"toggle\" || newState === \"2\")\n                    return !oldOn\n                else {\n                    node.warn(`Invalid state string ${newState}`)\n                    return\n                }\n                break;\n            \n            case \"number\":\n                if (newState === \"1\")\n                     return true\n                else if (newState === \"0\")\n                    return false\n                else if (newState === \"2\")\n                    return !oldOn\n                else {\n                    node.warn(`Invalid state number ${newState}`)\n                    return\n                }\n                break;\n\n            default:\n                node.warn(`Invalid state type ${typeof newState}`)\n        }\n    }\n};\n\nG.bindAll(G);\n\nglobal.set(\"globals\", G);\n\nnode.status(G.nodeStatus(false, G.shortestDateTime()));\n\nmsg.payload = G;\n\nif (msg.topic !== \"nochain\") return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 180,
        "wires": [
            [
                "fd0e1b87.eab508",
                "4e645a66.9b3b64"
            ]
        ]
    },
    {
        "id": "2236af36.f7a7a",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "setGlobals",
        "topic": "nochain",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "38b66d1e.a08fc2"
            ]
        ]
    },
    {
        "id": "414b1350.d168ec",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "inspectGlobals",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 620,
        "wires": [
            [
                "8c8a607f.5e5fc"
            ]
        ]
    },
    {
        "id": "fd0e1b87.eab508",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 140,
        "wires": []
    },
    {
        "id": "b4f86fff.feda9",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "saveInMemoryData",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 740,
        "y": 520,
        "wires": [
            [
                "30ee7fd8.f4dc8"
            ]
        ]
    },
    {
        "id": "92620652.2e7b58",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "inspectBuildings",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 580,
        "wires": [
            [
                "cc26a96e.b69798"
            ]
        ]
    },
    {
        "id": "cc26a96e.b69798",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "getBuildings",
        "func": "// 12/06/2017 now properly displays eventRules index\nmsg.payload = global.get(\"accounts\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 580,
        "wires": [
            [
                "d5c43db0.1c60e"
            ]
        ]
    },
    {
        "id": "d5c43db0.1c60e",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 490,
        "y": 580,
        "wires": []
    },
    {
        "id": "c718a90c.2d50c8",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "KICKOFF",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "c7064adc.500248",
                "33b34b73.da43e4",
                "22aa65fc.7a59da"
            ]
        ]
    },
    {
        "id": "c7064adc.500248",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "KICKOFF",
        "active": false,
        "tosidebar": true,
        "console": true,
        "complete": "payload",
        "x": 310,
        "y": 40,
        "wires": []
    },
    {
        "id": "3fd765c7.ed6aca",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "resetPresence",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 870,
        "y": 760,
        "wires": [
            [
                "e722f375.de75"
            ]
        ]
    },
    {
        "id": "e722f375.de75",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "reset",
        "func": "global.set(\"presence\", {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "50f298d8.eefe48",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "announce",
        "func": "if (msg.topic == \"reset\") context.set(\"beenhere\", false, \"memoryOnly\");\n\nconst G = global.get(\"globals\");\nconst send = !context.get(\"beenhere\", \"memoryOnly\");\nlet count = 0;\n\nif (send) {\n    Promise.resolve(\n        G.getAccounts().map(accountId =>\n            G.getBuildings(accountId)\n                .map(buildingId => {\n                    node.send({\n                        topic: [accountId, buildingId, \"voice/all/amy\"].join(\"/\"),\n                        payload: \"Bobb in the cloud, is ready.\"\n                    });\n                    count++;\n                }\n            )\n        )\n    ).then(() => {\n        context.set(\"beenhere\", true, \"memoryOnly\");\n        node.status(G.nodeStatus(!send, G.shortestDateTime() + \" (\" + count + \" sent)\"));\n    });\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "ad8567ef.200df8"
            ]
        ]
    },
    {
        "id": "688deca1.79c154",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "testAnnounce",
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 550,
        "y": 40,
        "wires": [
            [
                "50f298d8.eefe48"
            ]
        ]
    },
    {
        "id": "e281ab07.e11738",
        "type": "link in",
        "z": "4b6a44a6.362b4c",
        "name": "sendToSpeech",
        "links": [
            "2e2c335.c9e8bcc",
            "1b666d66.420793",
            "6ef5c44d.912acc"
        ],
        "x": 255,
        "y": 60,
        "wires": [
            [
                "54efb06c.dbab4"
            ]
        ]
    },
    {
        "id": "40477758.3655d8",
        "type": "link in",
        "z": "4b6a44a6.362b4c",
        "name": "playSound",
        "links": [
            "b9a86106.1af65",
            "a74a8e9.983c97",
            "2c08e85a.72ee88"
        ],
        "x": 155,
        "y": 380,
        "wires": [
            [
                "ab0fd2bd.cbab9"
            ]
        ]
    },
    {
        "id": "f2975d4c.6d88c",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "addPath",
        "func": "const soundPath = \"sounds\\\\\";\n\nif (msg.payload.indexOf(\"\\\\\") < 0)\n    msg.payload = soundPath + msg.payload;\n\nif (msg.payload.includes(\" \"))\n    msg.payload = \"'\" + msg.payload + \"'\";\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 420,
        "wires": [
            [
                "1450fe76.a771a2"
            ]
        ]
    },
    {
        "id": "1450fe76.a771a2",
        "type": "debug",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 505,
        "y": 420,
        "wires": []
    },
    {
        "id": "b9a86106.1af65",
        "type": "link out",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "links": [
            "40477758.3655d8"
        ],
        "x": 455,
        "y": 500,
        "wires": []
    },
    {
        "id": "ddd4c469.ff2058",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "bing",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 195,
        "y": 500,
        "wires": [
            [
                "a7cacfc7.c7e07"
            ]
        ]
    },
    {
        "id": "bddc5f2e.87d58",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "Hello etc Studio",
        "topic": "jfdi/studio/voice/all",
        "payload": "Hello. Welcome to the Studio.",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "c5704121.eb833",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "Hello",
        "topic": "jfdi/studio/voice/office",
        "payload": "Hello",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 250,
        "y": 280,
        "wires": [
            [
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "9f93c45.a8dff38",
        "type": "function",
        "z": "2161b62e.a025aa",
        "name": "Auth",
        "func": "// const CACHETIMEOUT = 60000;\nconst CACHETIMEOUT = 1000;\nmsg.origPayload = msg.payload;\nauthToken = msg.req.params.authToken || msg.req.headers[\"x-authtoken\"] || msg.req.headers.authtoken;\n\nif (!authToken) {\n    msg.statusCode = 400;\n    msg.payload = \"400: BAD REQUEST\";\n    return [null, null, msg];\n}\n\nauthObject = global.get(\"authObject\");\n\nif (authObject && authToken == authObject.authToken && (new Date() - authObject.timestamp < CACHETIMEOUT)) {\n    // Use cached authObject\n    msg.payload = authObject;\n    msg.payload.src = \"cache\";\n    return [null, msg, null];\n} else { // run the Azure table query\n    msg.table = \"bobbAuth\";\n    msg.where = [\"authToken eq ?\", authToken];\n    msg.top = 1;\n    return [msg, null, null];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 210,
        "y": 120,
        "wires": [
            [
                "2ef7e21c.8065ce"
            ],
            [
                "8682b8e2.ccf088"
            ],
            [
                "711e6637.5aafb8"
            ]
        ]
    },
    {
        "id": "8682b8e2.ccf088",
        "type": "function",
        "z": "2161b62e.a025aa",
        "name": "cache",
        "func": "var pay = msg.payload;\n\nif (!pay.timestamp) {\n    pay.timestamp = new Date();\n    global.set(\"authObject\", pay);\n}\n\nmsg.payload = msg.origPayload;\nmsg.source = \"api\"\ndelete msg.origPayload;\nreturn [msg, null];\n",
        "outputs": "1",
        "noerr": 0,
        "x": 910,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e07b2d2.df7d9d",
        "type": "change",
        "z": "2161b62e.a025aa",
        "name": "err",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "401",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "401 UNAUTHORIZED",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "711e6637.5aafb8"
            ]
        ]
    },
    {
        "id": "711e6637.5aafb8",
        "type": "http response",
        "z": "2161b62e.a025aa",
        "name": "",
        "x": 1210,
        "y": 180,
        "wires": []
    },
    {
        "id": "d46cf5d8.06cf78",
        "type": "comment",
        "z": "2161b62e.a025aa",
        "name": "Auth 2.1a",
        "info": "Handles all own error responses",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "c414b372.aaabe",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "446fce6.08f8f3",
                "b46f1990.eb2188"
            ],
            [
                "559a79e3.a22578"
            ]
        ]
    },
    {
        "id": "8211b32d.65f1e",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "env": [],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "63f379bf.4ddda8",
                "a9f37d45.74bdc"
            ],
            []
        ]
    },
    {
        "id": "35b26532.b3d5fa",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 290,
        "y": 1580,
        "wires": [
            [
                "bc30e127.a0ec8",
                "513c66b3.9c41d8"
            ],
            []
        ]
    },
    {
        "id": "1359e402.c56aac",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 290,
        "y": 1680,
        "wires": [
            [
                "e09d0117.b3a66"
            ],
            []
        ]
    },
    {
        "id": "e54531d1.33816",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "b3f567f9.97d338",
                "ea414a0d.5db798"
            ],
            []
        ]
    },
    {
        "id": "c2be905b.d6c4d",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 350,
        "y": 1280,
        "wires": [
            [
                "a8c74578.c68808"
            ],
            []
        ]
    },
    {
        "id": "c2b97fed.7ecfb",
        "type": "link in",
        "z": "f1c4be48.0cc6a",
        "name": "logThis",
        "links": [
            "2505500d.c33a4",
            "37899314.086ebc",
            "3ed22aaf.ec8716"
        ],
        "x": 195,
        "y": 80,
        "wires": [
            [
                "d95f5086.eced1",
                "12fea76b.747899"
            ]
        ]
    },
    {
        "id": "9bb35d59.c1f43",
        "type": "function",
        "z": "f31934a9.9c1f88",
        "name": "turnOnOrOff",
        "func": "var hue = global.get('hue'),\n    HueApi = hue.HueApi,\n    lightState = hue.lightState,\n    state = (msg.state == \"on\");\n\nvar displayResult = function(result) {\n    node.send({payload: result});\n};\n\nvar displayError = function(err) {\n    node.send({payload: err});\n};\n\nvar hostname = \"192.168.1.123\",\n    username = \"B490lQAuxVUIuvzBt5F-iVKHRCoLSzJ2blvpZJHZ\",\n    api = new HueApi(hostname, username),\n    stateObj = lightState.create();\n    \napi.setLightState(9, stateObj.on(state))\n    .then(displayResult)\n    .fail(displayError)\n    .done();\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 290,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4310186.3f409e8",
        "type": "function",
        "z": "d953cf06.cd796",
        "name": "idFromName",
        "func": "var HueApi = global.get('hue').HueApi;\n\nvar displayResult = function(result) {\n    // Search results.lights for name == msg.payload\n    var light = result.lights.find(function(ele) {\n        return (ele.name == msg.payload);\n    });\n    \n    if (light)\n        node.send([{payload: light.id}, null]);\n    else\n        node.send([null, {payload: \"No such Hue light\"}]);\n};\n\nvar hostname = \"192.168.1.123\",\n    username = \"B490lQAuxVUIuvzBt5F-iVKHRCoLSzJ2blvpZJHZ\";\n    \nvar api = new HueApi(hostname, username);\napi.lights().then(displayResult).done();\n",
        "outputs": "2",
        "noerr": 0,
        "x": 290,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d1a349b4.2f4fa8",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "Hello",
        "topic": "jfdi/studio/voice/all/geraint",
        "payload": "Hello",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "d7199ef9.c2f42",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testEventChampions",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "1b0b1c97.5c5c63"
            ]
        ]
    },
    {
        "id": "3362c34c.9e2c5c",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 435,
        "y": 820,
        "wires": []
    },
    {
        "id": "1b0b1c97.5c5c63",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"testevent\",\n    source: \"test\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 820,
        "wires": [
            [
                "3362c34c.9e2c5c"
            ]
        ]
    },
    {
        "id": "5154afbf.884bd",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1330,
        "y": 400,
        "wires": []
    },
    {
        "id": "bde9a776.807de8",
        "type": "function",
        "z": "ea307f99.462f6",
        "name": "generateEvent",
        "func": "return [\n    {\n        event: [msg.req.params.accountId, msg.req.params.buildingId, \"sensors\", msg.req.params.room, \"cameramotion\"].join(\".\")\n    },\n    null\n];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 540,
        "y": 100,
        "wires": [
            [
                "36258262.e8a8fe",
                "70b5f5b5.590f9c"
            ],
            [
                "41f7436b.cb25bc"
            ]
        ]
    },
    {
        "id": "36258262.e8a8fe",
        "type": "link out",
        "z": "ea307f99.462f6",
        "name": "handleCameraMotionEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 715,
        "y": 60,
        "wires": []
    },
    {
        "id": "70b5f5b5.590f9c",
        "type": "debug",
        "z": "ea307f99.462f6",
        "name": "EVENT",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 760,
        "y": 20,
        "wires": []
    },
    {
        "id": "ef84d9d.cdaaa28",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "delay 10",
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 600,
        "wires": [
            [
                "a0ebfbc0.9406d8"
            ]
        ]
    },
    {
        "id": "9245d0d.3c9693",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "settable delay",
        "func": "var delay = msg.delay;\n\nif (!delay) {\n    node.status({fill: \"grey\", shape: \"dot\", text: \"no delay\"});\n    return msg;\n} else {\n    node.status({fill: \"red\", shape: \"dot\", text: delay + \" second delay\"});\n    \n    setTimeout(function() {\n        node.status({fill: \"green\", shape: \"dot\", text: \"delay released\"});\n        node.send(msg);\n    }, delay * 1000);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 600,
        "wires": [
            [
                "30e70665.26a19a"
            ]
        ]
    },
    {
        "id": "30e70665.26a19a",
        "type": "debug",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 661,
        "y": 600,
        "wires": []
    },
    {
        "id": "8e8ed8e6.2d7ef8",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "no delay",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 640,
        "wires": [
            [
                "9245d0d.3c9693"
            ]
        ]
    },
    {
        "id": "a0ebfbc0.9406d8",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "func": "msg.delay = 10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 600,
        "wires": [
            [
                "9245d0d.3c9693"
            ]
        ]
    },
    {
        "id": "a10aea21.45b388",
        "type": "debug",
        "z": "300a541.08ca6ac",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1030,
        "y": 100,
        "wires": []
    },
    {
        "id": "903704dc.9a5eb8",
        "type": "debug",
        "z": "300a541.08ca6ac",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1030,
        "y": 140,
        "wires": []
    },
    {
        "id": "b32d85f2.81d758",
        "type": "debug",
        "z": "300a541.08ca6ac",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1030,
        "y": 180,
        "wires": []
    },
    {
        "id": "ba91c4d9.791ac8",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "every.hour",
        "topic": "every.hour",
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 40,
        "wires": [
            [
                "d16f7488.15c078"
            ]
        ]
    },
    {
        "id": "b5cc33a8.da08",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "false",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "b5d6d825.3a85d8",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST presence state",
        "url": "/BobbAPI/2.0/presence/register/:accountId/:buildingId/:personId/:present/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1880,
        "wires": [
            [
                "53c13053.58f1e"
            ]
        ]
    },
    {
        "id": "158784e.50f3d7b",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "setScene",
        "func": "// 05-06-2017 Updated with event & ruleId to support logging\nconst G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\n// First node output is data stream, second is for errors/response\nif (!msg.error) {\n    const { building, scene } = msg\n    const sceneId = msg.sceneId || msg.id;\n\n    // WTF?! FORGOTTEN GROUPS, NOT TO MENTION OTHER MULTI DEVICE APIS!!!\n\n    const deviceMsgs = (!scene.devices) ? null : scene.devices.map(deviceState => {\n        const deviceId = deviceState.device || deviceState.deviceId;\n\n        return {\n            accountId: msg.accountId,\n            buildingId: msg.buildingId,\n            duration: deviceState.duration,\n            deviceId: deviceId,\n            eventId: msg.eventId,\n            ruleId: msg.ruleId,\n            payload: deviceState.state\n        };\n    });\n    \n    const groupMsgs = (!scene.groups) ? null : scene.groups.map(groupState => {\n        const groupId = groupState.group || groupState.groupId;\n\n        return {\n            accountId: msg.accountId,\n            buildingId: msg.buildingId,\n            groupId: groupId,\n            eventId: msg.eventId,\n            ruleId: msg.ruleId,\n            payload: groupState.state\n        };\n    });\n\n    msg.payload = \"OK\";\n    msg.statusCode = 200;\n    \n    node.send([deviceMsgs, msg, groupMsgs]);\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 480,
        "y": 1780,
        "wires": [
            [
                "aa16c713.809fa8",
                "176baf18.883971"
            ],
            [
                "886f78c6.0e13e8",
                "ee03da70.2804f8"
            ],
            [
                "4584490f.ef3ac8"
            ]
        ],
        "outputLabels": [
            "devices",
            "response",
            "groups"
        ]
    },
    {
        "id": "aa16c713.809fa8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 635,
        "y": 1780,
        "wires": []
    },
    {
        "id": "e5d09283.bad04",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT set scene",
        "url": "/BobbAPI/2.0/scene/:accountId/:buildingId/:sceneId/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "24f5193f.3d6056",
        "x": 120,
        "y": 1780,
        "wires": [
            [
                "95567531.1878c8"
            ]
        ]
    },
    {
        "id": "886f78c6.0e13e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8654378a.3ba4c8",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set scene",
        "links": [
            "a3de6f64.4409a",
            "50e4e73f.07a248",
            "6cb70c4c.b4d7f4"
        ],
        "x": 355,
        "y": 1820,
        "wires": [
            [
                "158784e.50f3d7b"
            ]
        ]
    },
    {
        "id": "95567531.1878c8",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 290,
        "y": 1780,
        "wires": [
            [
                "158784e.50f3d7b"
            ],
            []
        ]
    },
    {
        "id": "31b66d70.1d7f12",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "NEWEVENT",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1150,
        "y": 440,
        "wires": []
    },
    {
        "id": "372b50b6.dc004",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "raiseFurtherEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 1095,
        "y": 400,
        "wires": []
    },
    {
        "id": "742c5733.cc5628",
        "type": "exec",
        "z": "300a541.08ca6ac",
        "command": "python /home/pi/BlackBeanControl2/BlackBeanControl.py -c ",
        "addpay": true,
        "append": "",
        "useSpawn": false,
        "timer": "",
        "name": "",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "a10aea21.45b388"
            ],
            [
                "903704dc.9a5eb8"
            ],
            [
                "b32d85f2.81d758"
            ]
        ]
    },
    {
        "id": "8186ee8f.7468b",
        "type": "debug",
        "z": "300a541.08ca6ac",
        "name": "IR1",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 690,
        "y": 40,
        "wires": []
    },
    {
        "id": "2afb15df.31311a",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "delay",
        "func": "var delay = msg.delay;\n\nif (!delay) {\n    node.status({fill: \"grey\", shape: \"dot\", text: \"no delay\"});\n    return msg;\n} else {\n    node.status({fill: \"red\", shape: \"dot\", text: delay + \" second delay\"});\n    \n    setTimeout(function() {\n        node.status({fill: \"green\", shape: \"dot\", text: \"delay released\"});\n        node.send(msg);\n    }, delay * 1000);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "5a4f1bbb.ea0f94"
            ]
        ]
    },
    {
        "id": "2a85063b.d8db0a",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "delay",
        "func": "var delay = msg.delay;\n\nif (!delay) {\n    node.status({fill: \"grey\", shape: \"dot\", text: \"no delay\"});\n    return msg;\n} else {\n    node.status({fill: \"red\", shape: \"dot\", text: delay + \" second delay\"});\n    \n    setTimeout(function() {\n        node.status({fill: \"green\", shape: \"dot\", text: \"delay released\"});\n        node.send(msg);\n    }, delay * 1000);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 120,
        "wires": [
            [
                "5ad80a6b.10faa4"
            ]
        ]
    },
    {
        "id": "656b0899.43c168",
        "type": "debug",
        "z": "300a541.08ca6ac",
        "name": "IR2",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "9722cb19.2fffe8",
        "type": "frequency",
        "z": "8d7a0ee3.fbbaf",
        "name": "eventFreq",
        "interval": "60000",
        "ntfyinterval": "60000",
        "x": 260,
        "y": 300,
        "wires": [
            [
                "81b59d4c.a40ae"
            ]
        ]
    },
    {
        "id": "81b59d4c.a40ae",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "EVENTRATE",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 410,
        "y": 300,
        "wires": []
    },
    {
        "id": "a6dacd2e.2be72",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "jfdi/champions",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 200,
        "y": 300,
        "wires": [
            [
                "8ba11902.ef4158"
            ]
        ]
    },
    {
        "id": "8ba11902.ef4158",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "getBuildingBlob",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar blobService = azureStorage.createBlobService(connStr);\n\nblobService.getBlobToText (\"bobb-buildings\", msg.payload, function(error, result, response) {\n    if (!error) {\n        msg.payload = result;\n        node.send(msg);\n    }\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "3f9ec39b.acd61c"
            ]
        ]
    },
    {
        "id": "772cc6e0.2fcd28",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "3f9ec39b.acd61c",
        "type": "json",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 570,
        "y": 300,
        "wires": [
            [
                "772cc6e0.2fcd28"
            ]
        ]
    },
    {
        "id": "91762773.fd9918",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "listBlobs",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 380,
        "wires": [
            [
                "746fd02a.1e442"
            ]
        ]
    },
    {
        "id": "bbf39436.b7c068",
        "type": "function",
        "z": "2debb550.d34c7a",
        "name": "listBlobsWithPrefix",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar blobService = azureStorage.createBlobService(connStr);\n\nif (msg.container && msg.prefix) {\n    blobService.listBlobsSegmentedWithPrefix(msg.container, msg.prefix, null, function(error, result, response) {\n        if (!error) {\n            msg.payload = result;\n            node.send([msg, null]);\n        } else {\n            node.warn(error);\n            node.send([null, error]);\n        }\n    });\n} else {\n    node.warn(\"Insufficient parameters passed\");\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 390,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fc07e163.eb493",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 360,
        "wires": []
    },
    {
        "id": "7b54a744.287338",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "writeDeviceState",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "f81b2dde.0e784"
            ]
        ]
    },
    {
        "id": "7f33b885.cb38d8",
        "type": "function",
        "z": "e645c869.888998",
        "name": "writeTableEntity",
        "func": "const connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\nconst entGen = azureStorage.TableUtilities.entityGenerator;\nconst {payload: task, table, partitionKey, rowKey} = msg\n\nif (table && partitionKey && rowKey && task && typeof task == \"object\") {\n    task.PartitionKey = entGen.String(partitionKey);\n    task.RowKey = rowKey;\n    \n    tableService.insertOrReplaceEntity(table, task, function(error, result, response) {\n        if (!error) {\n            msg.payload = result;\n            node.send(msg);\n        } else {\n            node.warn(error);\n            node.send([null, error]);\n        }\n    });\n} else {\n    node.warn(\"Insufficient parameters passed\");\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ],
        "inputLabels": [
            "query"
        ],
        "outputLabels": [
            "success",
            "failure"
        ]
    },
    {
        "id": "23917774.748098",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "64fc4332.fe8c0c",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "jfdi.champions.study.temperature",
        "payload": "22.1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 440,
        "wires": [
            [
                "9a000388.7b65d"
            ]
        ]
    },
    {
        "id": "9a000388.7b65d",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "writeSensorData",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar tableService = azureStorage.createTableService(connStr);\nvar entGen = azureStorage.TableUtilities.entityGenerator;\n\nvar task = {\n  PartitionKey: entGen.String(msg.topic),\n  RowKey: entGen.String(\"\" + invertedTicks()),\n  value: entGen.Double(msg.payload)\n};\n \ntableService.insertEntity(\"bobbSensorData\", task, function(error, result, response) {\n    if (!error) {\n        msg.payload = result;\n        node.send(msg);\n    }\n});\n\nfunction invertedTicks() {\n    return (new Date(9999, 12, 31, 23, 59, 59, 9999999).getTime() - new Date().getTime());\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "8b0114bc.6582c8"
            ]
        ]
    },
    {
        "id": "8b0114bc.6582c8",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "4c713277.f37e5c",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "jfdi.champions.study.temperature",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 480,
        "wires": [
            [
                "da6a7cf.9fa5b8"
            ]
        ]
    },
    {
        "id": "da6a7cf.9fa5b8",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "readLatestSensorVal",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar tableService = azureStorage.createTableService(connStr);\nvar entGen = azureStorage.TableUtilities.entityGenerator;\n\nvar query = new azureStorage.TableQuery()\n    .select([\"value\"])\n    .top(1)\n    .where('PartitionKey eq ?', msg.topic);\n\ntableService.queryEntities('bobbSensorData', query, null, function(error, result, response) {\n    if(!error) {\n        msg.payload = result;\n        node.send(msg);\n    }\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 480,
        "wires": [
            [
                "7fef8786.47d478"
            ]
        ]
    },
    {
        "id": "7fef8786.47d478",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 630,
        "y": 480,
        "wires": []
    },
    {
        "id": "c7993d35.9dec9",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "deviceKey",
        "func": "msg.partitionKey = [msg.accountId, msg.buildingId, msg.deviceId].join(\".\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "c7269f36.a8165",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "sensorKey",
        "func": "msg.partitionKey = [msg.accountId, msg.buildingId, msg.room, msg.metric].join(\".\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "30ee7fd8.f4dc8",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "saveDataStore",
        "func": "const D = global.get(\"dataEngine\")\n\nD.saveToBlob()",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "77a76fb0.6252c",
        "type": "function",
        "z": "cbfd83cb.65744",
        "name": "readTableEntity",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar tableService = azureStorage.createTableService(connStr);\nvar entGen = azureStorage.TableUtilities.entityGenerator;\n\nif (msg.table && msg.partitionKey && msg.rowKey) {\n    tableService.retrieveEntity(msg.table, msg.partitionKey, msg.rowKey, function(error, result, response) {\n        if (!error) {\n            msg.payload = result;\n            node.send([msg, null]);\n        } else {\n            node.warn(error);\n            node.send([null, error]);\n        }\n    });\n} else {\n    node.warn(\"Insufficient parameters passed\");\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1fcd4168.e0803f",
        "type": "subflow:cbfd83cb.65744",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 500,
        "y": 700,
        "wires": [
            [
                "6b1e478.f9433b8",
                "eec51255.e4465"
            ],
            [
                "fb3fc1b7.252fd"
            ]
        ]
    },
    {
        "id": "e3f4faa1.63c838",
        "type": "subflow:2debb550.d34c7a",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 510,
        "y": 380,
        "wires": [
            [
                "fc07e163.eb493"
            ],
            []
        ]
    },
    {
        "id": "746fd02a.1e442",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "params",
        "rules": [
            {
                "t": "set",
                "p": "container",
                "pt": "msg",
                "to": "bobb-buildings",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "prefix",
                "pt": "msg",
                "to": "jfdi/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "e3f4faa1.63c838"
            ]
        ]
    },
    {
        "id": "4c250b70.521b44",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "params",
        "rules": [
            {
                "t": "set",
                "p": "table",
                "pt": "msg",
                "to": "bobbDeviceStates",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "partitionKey",
                "pt": "msg",
                "to": "jfdi.champions.desklamp1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "rowKey",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 700,
        "wires": [
            [
                "1fcd4168.e0803f"
            ]
        ]
    },
    {
        "id": "450422ca.f694ec",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "getDeviceState",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 700,
        "wires": [
            [
                "4c250b70.521b44"
            ]
        ]
    },
    {
        "id": "6b1e478.f9433b8",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 640,
        "wires": []
    },
    {
        "id": "fb3fc1b7.252fd",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 720,
        "wires": []
    },
    {
        "id": "5300cf44.6424",
        "type": "function",
        "z": "97970932.8c6948",
        "name": "oDataToObject",
        "func": "var newPay = {};\nvar pay = msg.payload;\n\nfor (var key in pay) {\n    var type = pay[key].$;\n    var value = pay[key]._;\n\n    if (!type) {\n        if (typeof value == \"boolean\")\n            type = \"Edm.Boolean\";\n        else\n            type = \"Edm.String\";\n    }\n\n    switch (type) {\n        case \"Edm.String\":\n        case \"Edm.Binary\":\n        case \"Edm.Guid\":\n            newPay[key] = pay[key]._;\n            break;\n            \n        case \"Edm.Int32\":\n        case \"Edm.Int64\":\n        case \"Edm.Double\":\n            newPay[key] = Number(pay[key]._);\n            break;\n            \n        case \"Edm.Boolean\":\n            newPay[key] = pay[key]._;\n            break;\n            \n        case \"Edm.DateTime\":\n            newPay[key] = new Date(pay[key]._);\n            break;\n    }\n}\n\nmsg.payload = newPay;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d3606b54.3c8c28",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 910,
        "y": 680,
        "wires": []
    },
    {
        "id": "eec51255.e4465",
        "type": "subflow:97970932.8c6948",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 720,
        "y": 680,
        "wires": [
            [
                "d3606b54.3c8c28"
            ]
        ]
    },
    {
        "id": "f81b2dde.0e784",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "params",
        "rules": [
            {
                "t": "set",
                "p": "table",
                "pt": "msg",
                "to": "bobbDeviceStates",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "partitionKey",
                "pt": "msg",
                "to": "jfdi.champions.desklamp1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "rowKey",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 580,
        "wires": [
            [
                "ae7908eb.50b5f8"
            ]
        ]
    },
    {
        "id": "bcda7cbb.6d8b4",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 850,
        "y": 600,
        "wires": []
    },
    {
        "id": "c07c2afc.a3c458",
        "type": "subflow:e645c869.888998",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 640,
        "y": 580,
        "wires": [
            [
                "23917774.748098"
            ],
            [
                "bcda7cbb.6d8b4"
            ]
        ]
    },
    {
        "id": "d5458b78.e1da08",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 880,
        "wires": [
            [
                "24b4f072.2c962"
            ]
        ]
    },
    {
        "id": "24b4f072.2c962",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "params",
        "func": "msg.table = \"bobbAuth\";\nmsg.where = [\"uid eq ?\", \"yazo76^1\"];\nmsg.top = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 880,
        "wires": [
            [
                "e1a10f2c.d4029"
            ]
        ]
    },
    {
        "id": "5f45a615.186c48",
        "type": "function",
        "z": "1475fab7.7ab5a5",
        "name": "runTableQuery",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar tableService = azureStorage.createTableService(connStr);\nvar entGen = azureStorage.TableUtilities.entityGenerator;\n\nif (msg.table && msg.where) {\n    var query = new azureStorage.TableQuery();\n    if (msg.select) query = query.select(msg.select);\n    if (msg.top) query = query.top(msg.top);\n\n    query = query.where(...msg.where);\n\n    tableService.queryEntities(msg.table, query, null, function(error, result, response) {\n        if (!error) {\n            msg.payload = result;\n            node.send([msg, null]);\n        } else {\n            node.warn(error);\n            node.send([null, error]);\n        }\n    });\n} else\n    node.warn(\"Insufficient parameters passed\");\n",
        "outputs": "2",
        "noerr": 0,
        "x": 200,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "455f45ce.85190c",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 860,
        "wires": []
    },
    {
        "id": "522a3788.e97508",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 900,
        "wires": []
    },
    {
        "id": "54af023e.1af12c",
        "type": "subflow:97970932.8c6948",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 980,
        "y": 860,
        "wires": [
            [
                "455f45ce.85190c"
            ]
        ]
    },
    {
        "id": "86c3b645.456138",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 820,
        "wires": []
    },
    {
        "id": "cb3c7967.ee55d8",
        "type": "function",
        "z": "30841400.5f7e8c",
        "name": "iterateResults",
        "func": "msg.payload.entries.forEach(function(ele) {\n    msg.payload = ele;\n    node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "df6f1639.50c028",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 960,
        "wires": [
            [
                "4671d9.5ab79e28"
            ]
        ]
    },
    {
        "id": "4671d9.5ab79e28",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "params",
        "rules": [
            {
                "t": "set",
                "p": "accountId",
                "pt": "msg",
                "to": "jfdi",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "room",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 960,
        "wires": [
            [
                "c7993d35.9dec9"
            ]
        ]
    },
    {
        "id": "e1a10f2c.d4029",
        "type": "subflow:1475fab7.7ab5a5",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 500,
        "y": 880,
        "wires": [
            [
                "522a3788.e97508"
            ],
            [
                "86c3b645.456138",
                "ecd26382.9992c"
            ]
        ]
    },
    {
        "id": "ecd26382.9992c",
        "type": "subflow:30841400.5f7e8c",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 760,
        "y": 860,
        "wires": [
            [
                "54af023e.1af12c"
            ]
        ]
    },
    {
        "id": "2ef7e21c.8065ce",
        "type": "subflow:1475fab7.7ab5a5",
        "z": "2161b62e.a025aa",
        "name": "",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "a981e2c6.80058"
            ],
            []
        ]
    },
    {
        "id": "13e604be.9c828b",
        "type": "subflow:97970932.8c6948",
        "z": "2161b62e.a025aa",
        "name": "",
        "x": 740,
        "y": 20,
        "wires": [
            [
                "8682b8e2.ccf088"
            ]
        ]
    },
    {
        "id": "a981e2c6.80058",
        "type": "function",
        "z": "2161b62e.a025aa",
        "name": "extract",
        "func": "if (msg.payload.entries.length == 1) {\n    msg.payload = msg.payload.entries[0];\n    return [msg, null];\n} else\n    return [null, msg];",
        "outputs": "2",
        "noerr": 0,
        "x": 570,
        "y": 60,
        "wires": [
            [
                "13e604be.9c828b"
            ],
            [
                "e07b2d2.df7d9d"
            ]
        ]
    },
    {
        "id": "7fc172d3.c912cc",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "routeToMQTTBroker",
        "links": [
            "5ad80a6b.10faa4",
            "1c53fdc.1368e02",
            "c24d6d96.66df1",
            "576e2770.6a20f8",
            "a74066eb.740c48",
            "dcba4f2b.f3deb",
            "781b348e.0899fc",
            "46ba45ce.7b69dc"
        ],
        "x": 1035,
        "y": 60,
        "wires": [
            [
                "24e6921b.313c7e",
                "9a68d01a.1fbc"
            ]
        ]
    },
    {
        "id": "5ad80a6b.10faa4",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "forwardToMQTTBroker",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 755,
        "y": 120,
        "wires": []
    },
    {
        "id": "d4039437.ce3cf8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "NO-MATCHING-RULES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 590,
        "y": 540,
        "wires": []
    },
    {
        "id": "efa24e47.fb843",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 450,
        "y": 760,
        "wires": []
    },
    {
        "id": "5cef0aa2.1e2584",
        "type": "json",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "efa24e47.fb843",
                "84bbc2fe.315a1"
            ]
        ]
    },
    {
        "id": "84bbc2fe.315a1",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "reassemble",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nconst parts = msg.topic.split(\"/\");\nconst {accountId = parts[0], buildingId = parts[1]} = msg.payload\nconst building = G.getBuilding(accountId, buildingId);\nconst devices = building.devices;\n\nlet deviceId, device;\nconst deviceDescription = msg.payload.deviceId;\n\nfor (let key in devices) {\n    if (((msg.payload.hueType === \"light\" && devices[key].api === \"hue-light\") || (msg.payload.hueType === \"group\" && devices[key].api === \"hue-group\")) && (msg.payload.hueId == devices[key].id || (devices[key].description || \"\").toLowerCase() == deviceDescription)) {\n        device = devices[key];\n        deviceId = key;\n        break;\n    }\n}\n\nif (deviceId) {\n    // node.warn(`Got device id ${deviceId}`);\n    const hueState = msg.payload.currentState;\n    const state = {};\n    \n    if (msg.payload.hueType === \"light\") {\n        if (hueState.hasOwnProperty(\"on\")) state.on = msg.payload.currentState.on;\n        if (hueState.hasOwnProperty(\"bri\")) state.brightness = Math.round(msg.payload.currentState.bri / 2.54, 0);\n        if (hueState.hasOwnProperty(\"hue\")) state.hue = Math.round(msg.payload.currentState.hue / 182.0416667, 0);\n        if (hueState.hasOwnProperty(\"sat\")) state.saturation = Math.round(msg.payload.currentState.sat / 2.54, 0);\n        if (hueState.hasOwnProperty(\"ct\")) state.colourtemperature = msg.payload.currentState.ct;\n    } else {\n        if (hueState.hasOwnProperty(\"all_on\")) state.on = msg.payload.currentState.all_on;\n    }\n    \n    const dataMsg = {\n        accountId, \n        buildingId,\n        topic: deviceId,\n        payload: state,\n        source: \"hue\"\n    };\n    \n    return dataMsg;\n} else node.warn(`no matching ${msg.payload.hueType} for hue id ${msg.payload.hueId} or ${deviceDescription}`);\n",
        "outputs": "1",
        "noerr": 0,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "3e9aea9b.2d5296",
                "ae2cd8bb.7a6878"
            ]
        ],
        "outputLabels": [
            "data-out"
        ]
    },
    {
        "id": "4bfbeee3.41489",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "test1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 1180,
        "wires": [
            [
                "88e4703d.db4da"
            ]
        ]
    },
    {
        "id": "488ee375.21da8c",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "success",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 520,
        "y": 1160,
        "wires": []
    },
    {
        "id": "7b495902.707948",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "failure",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 510,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7f8ea8a.824fc58",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "test2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "950d4.22f78f2d"
            ]
        ]
    },
    {
        "id": "774e1449.d4de6c",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "success",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 520,
        "y": 1260,
        "wires": []
    },
    {
        "id": "75ef13da.70951c",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "failure",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 510,
        "y": 1300,
        "wires": []
    },
    {
        "id": "88e4703d.db4da",
        "type": "unsafe-function",
        "z": "7c5e300a.a71d9",
        "name": "rulesEngine",
        "func": "var Engine = require(\"json-rules-engine\").Engine;\n\nvar ruleDef = {\n    conditions: { \n        all: [\n            {\n                fact: 'allMyData',\n                path: \".enabled\",\n                operator: 'equal',\n                value: true\n            },\n            {\n                fact: 'allMyData',\n                path: \".temp\",\n                operator: 'greaterThan',\n                value: 25\n            }\n        ]\n    },\n    event: {\n        type: \"check.positive\"\n    }\n};\n\nvar engine = new Engine();\nengine.addRule(ruleDef);\n\nvar facts = {\n    allMyData: {\n        enabled: true,\n        temp: 24\n    }\n};\n\nengine.on('success', (event, almanac, ruleResult) => {\n    node.send([{payload: {status: event, ruleResult: ruleResult}}, null]);\n});\n\nengine.on('failure', (event, almanac, ruleResult) => {\n    node.send([null, {payload: {status: event, almanac: almanac, ruleResult: ruleResult}}]);\n});\n\nengine\n    .run(facts)\n    .catch(node.warn);",
        "outputs": "2",
        "noerr": 0,
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "488ee375.21da8c"
            ],
            [
                "7b495902.707948"
            ]
        ]
    },
    {
        "id": "950d4.22f78f2d",
        "type": "unsafe-function",
        "z": "7c5e300a.a71d9",
        "name": "rulesEngine",
        "func": "let Engine = require(\"json-rules-engine\").Engine;\n\n/*\n * This is a basic example demonstrating how to leverage the metadata supplied by rule results\n *\n * Usage:\n *   node ./examples/09-rule-results.js\n *\n * For detailed output:\n *   DEBUG=json-rules-engine node ./examples/09-rule-results.js\n */\n\n/**\n * Setup a new engine\n */\nlet engine = new Engine();\n\n// rule for determining honor role student atheletes (student has GPA >= 3.5 AND is an athlete)\nengine.addRule({\n    conditions: {\n        all: [{\n            fact: 'athlete',\n            operator: 'equal',\n            value: true\n        }, {\n            fact: 'GPA',\n            operator: 'greaterThanInclusive',\n            value: 3.5\n        }]\n    },\n    event: {  // define the event to fire when the conditions evaluate truthy\n        type: 'honor-roll',\n        params: {\n            message: 'Student made the athletics honor-roll'\n        }\n    }\n});\n\nfunction render (message, ruleResult) {\n    // if rule succeeded, render success message\n    if (ruleResult.result) {\n        return message;\n    }\n    // if rule failed, iterate over each failed condition to determine why the student didn't qualify for athletics honor roll\n    let detail = ruleResult.conditions.all\n        .filter(condition => !condition.result)\n        .map(condition => {\n            switch (condition.operator) {\n                case 'equal':\n                    return \"was not an \" + condition.fact;\n                    \n                case 'greaterThanInclusive':\n                    return condition.fact + \" of \" + condition.factResult + \" was too low\";\n            }\n        })\n        .join(' and ');\n    return message + \" \" + detail;\n}\n\n/**\n * On success, retrieve the student's username for display purposes, and render\n */\nengine.on('success', (event, almanac, ruleResult) => {\n    almanac.factValue('username').then(username => {\n        msg.payload = render(username + \" succeeded! \" + event.params.message, ruleResult);\n        msg.results = ruleResult.conditions.all;\n        node.send([msg, null]);\n    });\n});\n\n/**\n * On failure, retrieve the student's username for display purposes, and render\n */\nengine.on('failure', (event, almanac, ruleResult) => {\n    almanac.factValue('username').then(username => {\n        msg.payload = render(username + \" failed - \", ruleResult);\n        msg.results = ruleResult.conditions.all;\n        node.send([null, msg]);\n    });\n});\n\n// Run the engine for 5 different students\nPromise.all([\n  engine.run({ athlete: false, GPA: 3.9, username: 'joe' }),\n  engine.run({ athlete: true, GPA: 3.5, username: 'larry' }),\n  engine.run({ athlete: false, GPA: 3.1, username: 'jane' }),\n  engine.run({ athlete: true, GPA: 4.0, username: 'janet' }),\n  engine.run({ athlete: true, GPA: 1.1, username: 'sarah' })\n]);\n\n/*\n * OUTPUT:\n *\n * joe failed -  was not an athlete\n * larry succeeded! Student made the athletics honor-roll\n * jane failed -  was not an athlete and GPA of 3.1 was too low\n * janet succeeded! Student made the athletics honor-roll\n * sarah failed -  GPA of 1.1 was too low\n */",
        "outputs": "2",
        "noerr": 0,
        "x": 330,
        "y": 1280,
        "wires": [
            [
                "774e1449.d4de6c"
            ],
            [
                "75ef13da.70951c"
            ]
        ]
    },
    {
        "id": "10d6f588.e093aa",
        "type": "unsafe-function",
        "z": "8d7a0ee3.fbbaf",
        "name": "ruleEngine",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nconst {accountId, buildingId, rule, ruleId, eventId, factData, source} = msg\n\nif (accountId && buildingId && rule && ruleId && eventId && factData && typeof factData === \"object\") {\n    const moment = global.get(\"moment\");\n    const Engine = global.get(\"rulesEngine\");\n    const engine = new Engine();\n    const customFacts = (rule.conditions.all || rule.conditions.any).filter(condition => [\"afterTime\", \"beforeTime\", \"elapsedGreaterThanInclusive\", \"elapsedGreaterThan\", \"elapsedLessThanInclusive\", \"elapsedLessThan\"].includes(condition.operator)).length > 0\n    \n    rule.event = { type: \"ruleSuccess\" };\n    \n    engine.addRule(rule);\n    \n    engine.addOperator(\"afterTime\", (factValue, jsonValue) => {\n        const today = moment().format(\"YYYY-MM-DD\");\n        const jsonValueMoment = moment(today + \" \" + jsonValue);\n        if (!jsonValueMoment.isValid()) {\n            node.warn(\"afterTime failed: \" + jsonValue + \"/\" + factValue);\n            return false;\n        }\n        const retVal = moment(factValue).isAfter(jsonValueMoment);\n        return retVal;\n    });\n    \n    engine.addOperator(\"beforeTime\", (factValue, jsonValue) => {\n        const today = moment().format(\"YYYY-MM-DD\");\n        const jsonValueMoment = moment(today + \" \" + jsonValue);\n        if (!jsonValueMoment.isValid()) {\n            node.warn(\"beforeTime failed: \" + jsonValue + \"/\" + factValue);\n            return false;\n        }\n        const retVal = moment(factValue).isBefore(jsonValueMoment);\n        return retVal;\n    });\n    \n    engine.addOperator(\"elapsedGreaterThanInclusive\", (factValue, jsonValue) => {\n        const now = moment();\n        const then = moment(factValue);\n        const calcVal = now.diff(then, \"seconds\") / 60;\n        const retVal = calcVal >= jsonValue;\n        // node.warn(`${now} - ${then} = ${calcVal} >= ${jsonValue} == ${retVal}`)\n        return retVal;\n    });\n    \n    engine.addOperator(\"elapsedGreaterThan\", (factValue, jsonValue) => {\n        const calcVal = moment().diff(moment(factValue), \"seconds\") / 60;\n        const retVal = calcVal > jsonValue;\n        // node.log(\"elapsedGreaterThan: \" + calcVal + \" > \" + jsonValue + \" = \" + retVal);\n        return retVal;\n    });\n    \n    engine.addOperator(\"elapsedLessThanInclusive\", (factValue, jsonValue) => {\n        const calcVal = moment().diff(moment(factValue), \"seconds\") / 60;\n        const retVal = calcVal <= jsonValue;\n        // node.log(\"elapsedLessThanInclusive: \" + calcVal + \" <= \" + jsonValue + \" = \" + retVal);\n        return retVal;\n    });\n    \n    engine.addOperator(\"elapsedLessThan\", (factValue, jsonValue) => {\n        const calcVal = moment().diff(moment(factValue), \"seconds\") / 60;\n        const retVal = calcVal < jsonValue;\n        // node.log(\"elapsedLessThan: \" + calcVal + \" < \" + jsonValue + \" = \" + retVal);\n        return retVal;\n    });\n    \n    engine.on(\"success\", (ruleEvent, almanac, ruleResult) => {\n        node.status({text: \"Rule \" + ruleId + \" = TRUE\", shape: \"dot\", fill: \"green\"});\n        const msgLog = {\n            topic: [accountId, buildingId, \"logging\", \"events\", ruleId].join(\"/\"),\n            eventId,\n            success: true,\n            accountId,\n            buildingId,\n            ruleResult,\n            source,\n            rule,\n            factData\n        };\n    \n        node.send([{\n            success: true,\n            accountId,\n            buildingId,\n            eventId,\n            ruleId,\n            source,\n            rule,\n            factData,\n            status: ruleEvent,\n            ruleResult\n        }, null, null, msgLog]);\n    });\n    \n    engine.on(\"failure\", (ruleEvent, almanac, ruleResult) => {\n        node.status({text: \"Rule \" + ruleId + \" = FALSE\", shape: \"ring\", fill: \"red\"});\n        const msgLog = {\n            topic: [accountId, buildingId, \"logging\", \"events\", ruleId].join(\"/\"),\n            payload: {\n                eventId,\n                success: false,\n                buildingId,\n                ruleResult,\n                rule,\n                factData,\n                source\n            }\n        };\n    \n        node.send([null, {\n            success: false,\n            accountId,\n            buildingId,\n            eventId,\n            ruleId,\n            rule,\n            source,\n            factData,\n            status: ruleEvent,\n            ruleResult\n        }, null, msgLog]);\n    });\n    \n    engine.run({...factData}).catch(error => {\n        node.send([null, null, {\n            root: rule.conditions.any ? \"any\" : \"all\",\n            factCount: Object.keys(factData).length,\n            factIds: Object.keys(factData),\n            customFacts,\n            error,\n            accountId,\n            buildingId,\n            source,\n            eventId,\n            ruleId,\n            rule,\n            factData\n        }, null]);\n    });\n} else node.warn(`Something is missing for rule ${ruleId} event ${eventId}`)\n",
        "outputs": "4",
        "noerr": 0,
        "x": 710,
        "y": 460,
        "wires": [
            [
                "75e33536.72929c"
            ],
            [
                "75e33536.72929c"
            ],
            [
                "f301dac3.185da8"
            ],
            [
                "3c1df964.500286"
            ]
        ],
        "outputLabels": [
            "ruleTrue",
            "ruleFalse",
            "errors",
            "logging"
        ]
    },
    {
        "id": "2c08e85a.72ee88",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "40477758.3655d8"
        ],
        "x": 675,
        "y": 1720,
        "wires": []
    },
    {
        "id": "ab0fd2bd.cbab9",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "setTopic",
        "func": "msg.topic = [msg.accountId, msg.buildingId, \"sound\", msg.room].join(\"/\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 325,
        "y": 380,
        "wires": [
            [
                "1450fe76.a771a2",
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "a7cacfc7.c7e07",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "func": "msg = {accountId: \"jfdi\", buildingId: \"studio\", room: \"all\", payload: \"beepping\"};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 355,
        "y": 500,
        "wires": [
            [
                "b9a86106.1af65"
            ]
        ]
    },
    {
        "id": "1b666d66.420793",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "speech",
        "links": [
            "e281ab07.e11738"
        ],
        "x": 1075,
        "y": 300,
        "wires": []
    },
    {
        "id": "54efb06c.dbab4",
        "type": "function",
        "z": "4b6a44a6.362b4c",
        "name": "builldMsg",
        "func": "msg.topic = [msg.accountId, msg.buildingId, \"voice\", msg.where || \"all\", (msg.voice ? msg.voice: null)].join(\"/\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 60,
        "wires": [
            [
                "e78d394f.5e3e98",
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "e78d394f.5e3e98",
        "type": "debug",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "a49e45ae.056128",
        "type": "frequency",
        "z": "8d7a0ee3.fbbaf",
        "name": "ruleFreq",
        "interval": "60000",
        "ntfyinterval": "60000",
        "x": 620,
        "y": 300,
        "wires": [
            [
                "2f55a846.7dfbf8"
            ]
        ]
    },
    {
        "id": "2f55a846.7dfbf8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "RULERATE",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "93f3db26.827f18",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "DIAGS",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 540,
        "y": 580,
        "wires": []
    },
    {
        "id": "b4bd56ce.d9f7e8",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "engineBypass",
        "func": "const G = global.get(\"globals\")\nconst D = global.get(\"dataEngine\")\n\nconst {accountId, buildingId, eventId, ruleId, rule, eventData, topic, source} = msg;\n\nconst factData = D.getFactValues(accountId, buildingId, rule, eventData);\n\nif (G.ruleHasConditions(rule)) {\n    G.expandConditions(rule.conditions);\n    node.status({text: \"Conditional rule: \" + ruleId, shape: \"dot\", fill: \"green\"});\n    node.send([null,\n        Object.assign(msg, {factData})\n    ]);\n} else {\n    node.status({text: \"Unconditional Rule: \" + ruleId, shape: \"ring\", fill: \"green\"});\n\n    node.send([{\n        accountId,\n        buildingId,\n        topic,\n        success: true,\n        eventId,\n        ruleId,\n        rule,\n        factData,\n        source\n    }, null]);\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "75e33536.72929c",
                "7e661970.f95888"
            ],
            [
                "10d6f588.e093aa",
                "ffa702bc.f2fce"
            ]
        ],
        "outputLabels": [
            "unconditional",
            "conditional"
        ]
    },
    {
        "id": "fc286246.fd3c7",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testEventStudio",
        "topic": "studio",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 860,
        "wires": [
            [
                "1b0b1c97.5c5c63"
            ]
        ]
    },
    {
        "id": "881e433b.11119",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "Hello etc Champions",
        "topic": "jfdi/champions/voice/study/brian",
        "payload": "Hello. Welcome to Champions.",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 230,
        "y": 240,
        "wires": [
            [
                "48c85e47.1c85d",
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "ddcc472.6c20bb8",
        "type": "inject",
        "z": "4b6a44a6.362b4c",
        "name": "Alexa Champions",
        "topic": "jfdi/champions/voice/study",
        "payload": "Alexa, play Barry White.",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 200,
        "y": 320,
        "wires": [
            [
                "530048a3.e794a8"
            ]
        ]
    },
    {
        "id": "5fcd234.56a4fdc",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "jfdi/champions/wol",
        "payload": "90:FB:A6:2E:2B:B3",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 770,
        "y": 1180,
        "wires": [
            [
                "a75ea1e6.c864"
            ]
        ]
    },
    {
        "id": "a75ea1e6.c864",
        "type": "mqtt out",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 960,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8e7c5591.511ce8",
        "type": "comment",
        "z": "a6d79fe1.ede4f",
        "name": "Generate new authToken for a user ID",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "53c13053.58f1e",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 330,
        "y": 1880,
        "wires": [
            [
                "84060ba7.c6a108",
                "8d2b3ebb.9ec6c"
            ],
            []
        ]
    },
    {
        "id": "84060ba7.c6a108",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procPerson",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nmsg.payload = {person: msg.person, present: msg.present};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 1880,
        "wires": [
            [
                "c5035eef.5fe24",
                "4790f2d3.f5d6bc",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "c5035eef.5fe24",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "sendToPresence",
        "links": [
            "2d866bae.05a704"
        ],
        "x": 695,
        "y": 1860,
        "wires": []
    },
    {
        "id": "4790f2d3.f5d6bc",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a8d81221.ad958",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT group state",
        "url": "/BobbAPI/2.0/group/:accountId/:buildingId/:groupId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1620,
        "wires": [
            [
                "35b26532.b3d5fa"
            ]
        ]
    },
    {
        "id": "b60f2c61.5dda3",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT set scene",
        "url": "/BobbAPI/2.0/scene/:accountId/:buildingId/:sceneId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "12e5b76b.90ab79",
        "x": 120,
        "y": 1820,
        "wires": [
            [
                "95567531.1878c8"
            ]
        ]
    },
    {
        "id": "52f5a6c2.1c6388",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT device on-state",
        "url": "/BobbAPI/2.0/device/:accountId/:buildingId/:deviceId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "8211b32d.65f1e"
            ]
        ]
    },
    {
        "id": "5207d835.3100f8",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "getAccounts",
        "topic": "nochain",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "4e645a66.9b3b64"
            ]
        ]
    },
    {
        "id": "464d884e.fedf58",
        "type": "inject",
        "z": "a8359a32.45fb58",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "33852315.e9836c"
            ]
        ]
    },
    {
        "id": "e778a0d4.9598d",
        "type": "http request",
        "z": "a8359a32.45fb58",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "https://transportapi.com/v3/uk/bus/stop/1400LE0172/live.json?app_id=319ef793&app_key=cffa08c4b1b0a19906ea7d5440285ab3&group=route&nextbuses=no",
        "tls": "f5e7cbf5.11cb88",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "ec8b6ad8.892b48"
            ]
        ]
    },
    {
        "id": "ec8b6ad8.892b48",
        "type": "debug",
        "z": "a8359a32.45fb58",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 80,
        "wires": []
    },
    {
        "id": "33852315.e9836c",
        "type": "function",
        "z": "a8359a32.45fb58",
        "name": "",
        "func": "const G = global.get(\"globals\");\n\nvar buses = global.get(\"buses\") || {};\nvar buildings = global.get(\"buildings\") || {};\n\nG.iterateAllBuildings((accountId, buildingId) => {\n    accBuses = buses[accountId] || {};\n    \n    for (let buildingId in buildings) {\n        let bldgBuses = acc[buildingId] || {stops: []};\n        \n        if (bldgBuses.stops.length === 0) {\n            // need to get some bus stops\n            node.send([null, msg]);\n        }\n    }\n});\n",
        "outputs": "2",
        "noerr": 0,
        "x": 290,
        "y": 180,
        "wires": [
            [],
            [
                "1fa7738b.f0128c"
            ]
        ]
    },
    {
        "id": "4a196a2c.8ead74",
        "type": "pushbullet in",
        "z": "27c62c51.a48994",
        "config": "3f7d6808.d41bf8",
        "name": "",
        "x": 100,
        "y": 620,
        "wires": [
            [
                "b10dd193.6abc9",
                "24ad2517.4f92fa"
            ]
        ]
    },
    {
        "id": "24ad2517.4f92fa",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 270,
        "y": 580,
        "wires": []
    },
    {
        "id": "b10dd193.6abc9",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "decodeMessage",
        "func": "const G = global.get(\"globals\");\n\nlet {data, payload} = msg\nconst {accountId, personId} = findUser()\nlet buildingId, eventId, eventData\n\nif (payload.includes(\"\\n\")) {\n    const parts = payload.split(\"\\n\")\n    eventData = parts[1].trim()\n    payload = parts[0].trim()\n}\n\nif (payload.includes(\"@\")) {\n    const parts = payload.split(\"@\")\n    buildingId = parts[1].trim()\n    eventId = [\"message\"].concat(parts[0].trim().split(\" \")).join(\".\")\n}\n\nconst newMsg = {\n    topic: eventId,\n    payload: eventData,\n    personId,\n    accountId,\n    buildingId\n}\n\nreturn newMsg;\n\n\nfunction findUser() {\n    let foundUserId, foundAccountId\n    \n    G.iterateAllAccounts(accountId => {\n        const account = G.getAccount(accountId)\n        if (account && account.people && !foundUserId) {\n            const userId = Object.keys(account.people).find(personId => account.people[personId].pushbullet && account.people[personId].pushbullet.userId && account.people[personId].pushbullet.userId === data.sender_email)\n            // node.warn(userId)\n            if (userId) {\n                foundUserId = userId\n                foundAccountId = accountId\n                return\n            }\n        }\n    })\n    \n    return {personId: foundUserId, accountId: foundAccountId}\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 620,
        "wires": [
            [
                "e13d78df.937a68",
                "701237e7.45b538"
            ]
        ]
    },
    {
        "id": "e13d78df.937a68",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 490,
        "y": 660,
        "wires": []
    },
    {
        "id": "ccdd26b.c4703d8",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "every.minute",
        "topic": "every.minute",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "d16f7488.15c078"
            ]
        ]
    },
    {
        "id": "ec79b93.81f0548",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "every.5minutes",
        "topic": "every.5minutes",
        "payload": "",
        "payloadType": "date",
        "repeat": "300",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "d16f7488.15c078"
            ]
        ]
    },
    {
        "id": "5874c7f6.157088",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "86be1d99.9e0ca",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "addUplighter1",
        "topic": "jfdi/champions/homekit/to/add",
        "payload": "{\"name\":\"uplighter1\",\"service_name\":\"Uplighter\",\"service\":\"Switch\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 560,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "36ac4c1f.157e44",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "ACK",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 810,
        "y": 420,
        "wires": []
    },
    {
        "id": "be64aead.39b8a",
        "type": "json",
        "z": "998225a2.49fc08",
        "name": "",
        "pretty": false,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "c4a2c041.53ad4"
            ]
        ]
    },
    {
        "id": "cb3d9b7a.f49f78",
        "type": "json",
        "z": "998225a2.49fc08",
        "name": "",
        "pretty": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "e15a1e67.e47"
            ]
        ]
    },
    {
        "id": "4676cec.9465b3",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "deleteADevice",
        "topic": "jfdi/studio/homekit/to/remove",
        "payload": "{\"name\":\"hall/pir\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 620,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "701cf8dd.c3b738",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "SendToBobb",
        "links": [
            "fa0f9ab3.6ffe68"
        ],
        "x": 915,
        "y": 180,
        "wires": []
    },
    {
        "id": "104af851.d03a38",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "addAllDevices",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "99ccb904.bd4b08"
            ]
        ]
    },
    {
        "id": "5175b37f.a5686c",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "addToHomekit",
        "func": "const {accountId, buildingId, deviceId, device: {description = \"\", hidden = false, light = false, lock = false, dimmable = false, color = false, colour = false} = {}} = msg;\n\nif (!hidden) {\n    let service = \"Switch\";\n    \n    if (light)\n        service = \"Lightbulb\";\n    else if (lock)\n        service = \"LockMechanism\";\n    \n    let newMsg = {\n        diag: accountId + \"->\" + buildingId + \"->\" + deviceId,\n        topic: [accountId, buildingId, \"homekit/to/add\"].join(\"/\"),\n        accountId,\n        buildingId,\n        payload: {\n            name: deviceId,\n            service_name: description,\n            service: service\n        }\n    };\n    \n    if (dimmable) newMsg.payload.Brightness = \"default\";\n    if (color || colour) {\n        newMsg.payload.Hue = \"default\";\n        newMsg.payload.Saturation = \"default\";\n    }\n    \n    return newMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 320,
        "wires": [
            [
                "3c3befa3.1272a",
                "c24d6d96.66df1"
            ]
        ]
    },
    {
        "id": "c24d6d96.66df1",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "toMQTTrouter",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 635,
        "y": 320,
        "wires": []
    },
    {
        "id": "3c3befa3.1272a",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 670,
        "y": 360,
        "wires": []
    },
    {
        "id": "28af91a9.9008ce",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "queryStudio",
        "topic": "jfdi/studio/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 680,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "2b9115f7.c4bf6a",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "deleteAll@Studio",
        "topic": "jfdi/studio/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 840,
        "wires": [
            [
                "1a908a26.ee9d76"
            ]
        ]
    },
    {
        "id": "1a908a26.ee9d76",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "msg.accountId = \"jfdi\";\nmsg.buildingId = \"studio\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 840,
        "wires": [
            [
                "b2cddeed.41b25"
            ]
        ]
    },
    {
        "id": "b2cddeed.41b25",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "query",
        "func": "msg.topic = [msg.accountId, msg.buildingId, \"homekit/to/get\"].join(\"/\");\nmsg.payload = {name: \"*\"};\nflow.set(\"command\", {command: \"deleteAll\", accountId: msg.accountId, buildingId: msg.buildingId});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 840,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "1334b4fb.25e32b",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "deleteAll",
        "func": "for (let deviceId in msg.payload) {\n    let newMsg = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        topic: [msg.accountId, msg.buildingId, \"homekit/to/remove\"].join(\"/\"),\n    payload: {name: deviceId}};\n    node.send(newMsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 720,
        "wires": [
            [
                "a74066eb.740c48",
                "905fa295.00bd6"
            ]
        ]
    },
    {
        "id": "c4a2c041.53ad4",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "route",
        "func": "if (msg.payload.hasOwnProperty(\"ack\")) {\n    node.send([msg, null]);\n} else {\n    node.send([null, msg]);\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 650,
        "y": 460,
        "wires": [
            [
                "36ac4c1f.157e44"
            ],
            [
                "2a812b49.cdf7d4",
                "f91beeed.d0d75"
            ]
        ],
        "outputLabels": [
            "ack",
            "info"
        ]
    },
    {
        "id": "2a812b49.cdf7d4",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "INFO",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 810,
        "y": 540,
        "wires": []
    },
    {
        "id": "f91beeed.d0d75",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "routeCommands",
        "func": "let command = flow.get(\"command\");\n\nif (command) {\n    let msgs = [null, null];\n    let routeIdx;\n    \n    switch (command.command) {\n        default:\n            routeIdx = 0;\n            break;\n\n        case \"deleteAll\":\n            routeIdx = 1;\n            break;\n\n        case \"deleteNumbered\":\n            routeIdx = 2;\n            break;\n    }\n\n    flow.set(\"command\", null);\n    \n    msg.accountId = command.accountId;\n    msg.buildingId = command.buildingId;\n    msgs[routeIdx] = msg;\n    \n    return msgs;\n}\n",
        "outputs": "3",
        "noerr": 0,
        "x": 850,
        "y": 480,
        "wires": [
            [
                "5a113141.a494a"
            ],
            [
                "893f2c13.ed457",
                "f16f2a1f.b0a138"
            ],
            [
                "a5799ed4.a0448"
            ]
        ],
        "outputLabels": [
            "unrouted",
            "deleteAll",
            "deleteNumbered"
        ]
    },
    {
        "id": "fc636dc7.d0e94",
        "type": "link in",
        "z": "998225a2.49fc08",
        "name": "deleteAllHomebridgeMQTTDevices",
        "links": [
            "893f2c13.ed457"
        ],
        "x": 715,
        "y": 720,
        "wires": [
            [
                "1334b4fb.25e32b"
            ]
        ]
    },
    {
        "id": "893f2c13.ed457",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "",
        "links": [
            "fc636dc7.d0e94"
        ],
        "x": 995,
        "y": 460,
        "wires": []
    },
    {
        "id": "a74066eb.740c48",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "toMQTTrouter",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 1015,
        "y": 720,
        "wires": []
    },
    {
        "id": "61b08d31.29f644",
        "type": "mqtt in",
        "z": "998225a2.49fc08",
        "name": "homekitAction",
        "topic": "+/+/homekit/from/set",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "cb3d9b7a.f49f78"
            ]
        ]
    },
    {
        "id": "e15a1e67.e47",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "let parts = msg.topic.split(\"/\");\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nmsg.topic = [parts[0], parts[1], msg.payload.name].join(\".\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "5874c7f6.157088",
                "7674c070.d3005"
            ]
        ]
    },
    {
        "id": "bf889324.853ff",
        "type": "mqtt in",
        "z": "998225a2.49fc08",
        "name": "homekitResponses",
        "topic": "+/+/homekit/from/response",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "7f2e7d76.da2184"
            ]
        ]
    },
    {
        "id": "7f2e7d76.da2184",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "let parts = msg.topic.split(\"/\");\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 460,
        "wires": [
            [
                "be64aead.39b8a"
            ]
        ]
    },
    {
        "id": "5a113141.a494a",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "UNROUTED",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1050,
        "y": 420,
        "wires": []
    },
    {
        "id": "42f9122f.7ab0ec",
        "type": "json",
        "z": "998225a2.49fc08",
        "name": "",
        "pretty": false,
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "1286de8d.b642a1",
                "bcf7b065.d1106"
            ]
        ]
    },
    {
        "id": "89bbd06e.e5b15",
        "type": "mqtt in",
        "z": "998225a2.49fc08",
        "name": "statusQuery",
        "topic": "+/+/homekit/from/get",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "fbb8da8c.476478"
            ]
        ]
    },
    {
        "id": "fbb8da8c.476478",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "let parts = msg.topic.split(\"/\");\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "42f9122f.7ab0ec"
            ]
        ]
    },
    {
        "id": "dcba4f2b.f3deb",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "SendToBobb",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 895,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1286de8d.b642a1",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "toBobb",
        "func": "const D = global.get(\"dataEngine\");\n\nmsg.topic = [msg.accountId, msg.buildingId, \"homekit/to/set\"].join(\"/\");\nconst deviceId = msg.payload.name;\nlet characteristic = msg.payload.characteristic.toLowerCase();\n\nconst getValue = (deviceId, characteristic) => {\n    const data = D.getDataNode(msg.accountId, msg.buildingId, [deviceId, characteristic].join(\".\"));\n    return data.value;\n};\n\nswitch (characteristic) {\n    case \"on\":\n    case \"brightness\":\n    case \"hue\":\n    case \"saturation\":\n        break;\n        \n    case \"CurrentTemperature\":\n        characteristic = \"temperature\";\n        break;\n        \n    case \"CurrentRelativeHumidity\":\n        characteristic = \"humidity\";\n        break;\n        \n    case \"CurrentAmbientLightLevel\":\n        characteristic = \"light\";\n        break;\n\n    case \"CurrentAirPressure\":\n        characteristic = \"pressure\";\n        break;\n        \n    case \"MotionDetected\":\n        characteristic = \"pir\";\n        break;\n\n    case \"CurrentDoorState\":\n        characteristic = \"open\";\n        break;\n        \n    default:\n        node.status({text: \"Unknown characteristic\"});\n        return;\n}\n\nmsg.payload.value = getValue(deviceId, characteristic);\nnode.status({text: characteristic + \"=\" + msg.payload.value});\n\nreturn [msg, null];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 700,
        "y": 1080,
        "wires": [
            [
                "dcba4f2b.f3deb",
                "9b219808.e54388"
            ],
            [
                "4027d972.788598"
            ]
        ]
    },
    {
        "id": "bcf7b065.d1106",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9b219808.e54388",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 930,
        "y": 1040,
        "wires": []
    },
    {
        "id": "41f7436b.cb25bc",
        "type": "debug",
        "z": "ea307f99.462f6",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "9586403f.a58a2",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT building lights state",
        "url": "/BobbAPI/2.0/lights/building/:accountId/:buildingId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "e54531d1.33816"
            ]
        ]
    },
    {
        "id": "c6a98abc.1b5368",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT room lights state",
        "url": "/BobbAPI/2.0/lights/room/:accountId/:buildingId/:roomId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1320,
        "wires": [
            [
                "c2be905b.d6c4d"
            ]
        ]
    },
    {
        "id": "29c85fca.31664",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "toRoomLights",
        "links": [
            "5c234450.36c1ac"
        ],
        "x": 1295,
        "y": 280,
        "wires": []
    },
    {
        "id": "604661c3.e6eef",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "toBuildingLights",
        "links": [
            "22ff396e.8d9f46"
        ],
        "x": 1295,
        "y": 320,
        "wires": []
    },
    {
        "id": "f65bdaad.d4ed98",
        "type": "link in",
        "z": "998225a2.49fc08",
        "name": "addAllDevicesToHomekit",
        "links": [
            "eddf2590.741e48",
            "a18a35f4.229a18",
            "7581f529.1df97c"
        ],
        "x": 315,
        "y": 360,
        "wires": [
            [
                "5175b37f.a5686c"
            ]
        ]
    },
    {
        "id": "720788a4.e29668",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testEventChampions",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 920,
        "wires": [
            [
                "6ed257a4.091938"
            ]
        ]
    },
    {
        "id": "3fcca295.33a98e",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testEventStudio",
        "topic": "studio",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 960,
        "wires": [
            [
                "6ed257a4.091938"
            ]
        ]
    },
    {
        "id": "47dfd6d9.901ee8",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 455,
        "y": 920,
        "wires": []
    },
    {
        "id": "6ed257a4.091938",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent2",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"testevent2\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 920,
        "wires": [
            [
                "47dfd6d9.901ee8"
            ]
        ]
    },
    {
        "id": "376d570a.1f15c8",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procBuildingCooling",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nconst G = global.get(\"globals\");\nG.handleQuery(msg, node, {nostatus: true});\n\nconst {error, accountId, buildingId, building, state, payload, eventId, ruleId, source} = msg\n\nnode.status({});\n\nif (!error) {\n    let newState = G.normaliseState(state || payload.on)\n\n    // build array of indices for all light devices matching room\n    G.getDevices(accountId, buildingId)\n        .filter(deviceId => {\n            const {cooling, alwaysOn} = building.devices[deviceId];\n            return cooling && !alwaysOn;\n        })\n        .map(deviceId => {\n            node.send([\n                {\n                    accountId, buildingId, deviceId, device: building.devices[deviceId], eventId, ruleId, source,\n                    payload: {\n                        on: newState\n                    }\n                },\n                null\n            ]);\n        }\n    );\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \":\" + \":\" + state));\n    node.send([null, Object.assign(msg, {payload: \"OK\", statusCode: 200})]);\n} else node.send([null, Object.assign(msg, {payload: \"Error\", statusCode: 500})]);\n",
        "outputs": "2",
        "noerr": 0,
        "x": 580,
        "y": 1380,
        "wires": [
            [
                "c78b034b.c2af"
            ],
            [
                "992c09ff.272e98",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "992c09ff.272e98",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 820,
        "y": 1420,
        "wires": []
    },
    {
        "id": "c78b034b.c2af",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "d7700d1d.f500d"
        ],
        "x": 775,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c8163eee.a9fd4",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "set building cooling state",
        "links": [
            "3faec473.6ecd4c"
        ],
        "x": 415,
        "y": 1420,
        "wires": [
            [
                "376d570a.1f15c8"
            ]
        ]
    },
    {
        "id": "c8996387.c4003",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT building cooling state",
        "url": "/BobbAPI/2.0/cooling/building/:accountId/:buildingId/:state/:authToken",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "f6a3dd12.cceef"
            ]
        ]
    },
    {
        "id": "f6a3dd12.cceef",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 350,
        "y": 1380,
        "wires": [
            [
                "376d570a.1f15c8",
                "b9b1ff31.251ed"
            ],
            []
        ]
    },
    {
        "id": "20e92018.95fad",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT building cooling state",
        "url": "/BobbAPI/2.0/cooling/building/:accountId/:buildingId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1420,
        "wires": [
            [
                "f6a3dd12.cceef"
            ]
        ]
    },
    {
        "id": "d95f5086.eced1",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "674eeed5.7f7b5",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT seq state",
        "url": "/BobbAPI/2.0/sequence/:accountId/:buildingId/:sequenceId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1720,
        "wires": [
            [
                "1359e402.c56aac"
            ]
        ]
    },
    {
        "id": "ff91d138.b8b83",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST presence state",
        "url": "/BobbAPI/2.0/presence/register/:accountId/:buildingId/:personId/:present",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1920,
        "wires": [
            [
                "53c13053.58f1e"
            ]
        ]
    },
    {
        "id": "1687607f.7bd09",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "PUT room state",
        "url": "/BobbAPI/2.0/room/:accountId/:buildingId/:roomId/:state",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1520,
        "wires": [
            [
                "c414b372.aaabe"
            ]
        ]
    },
    {
        "id": "3faec473.6ecd4c",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "toBuildingCoolingState",
        "links": [
            "c8163eee.a9fd4"
        ],
        "x": 1295,
        "y": 360,
        "wires": []
    },
    {
        "id": "5c4eaf97.495b3",
        "type": "link in",
        "z": "27c62c51.a48994",
        "name": "notifyUser",
        "links": [
            "5e925d7f.c8c414",
            "782e86b9.f4a868",
            "68ace6b1.5c2aa8",
            "90dc8951.ec7cc8"
        ],
        "x": 355,
        "y": 100,
        "wires": [
            [
                "9d5044cb.9cc698",
                "b7db24ea.d932d8"
            ]
        ]
    },
    {
        "id": "5e925d7f.c8c414",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "links": [
            "5c4eaf97.495b3"
        ],
        "x": 1095,
        "y": 520,
        "wires": [],
        "inputLabels": [
            "notify"
        ]
    },
    {
        "id": "c53e3832.269d98",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "NOTIFY",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "9a9e1290.ff391",
        "type": "mqtt in",
        "z": "10b53f5c.013c31",
        "name": "Bobb-Plugin-Kodi",
        "topic": "+/+/kodi/events/#",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "a6279851.665ae8"
            ]
        ]
    },
    {
        "id": "a6279851.665ae8",
        "type": "function",
        "z": "10b53f5c.013c31",
        "name": "championsIDs",
        "func": "let parts = msg.topic.split(\"/\");\n\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nmsg.payload.priority = 10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 100,
        "wires": [
            [
                "6626b1c6.40291"
            ]
        ]
    },
    {
        "id": "6626b1c6.40291",
        "type": "function",
        "z": "10b53f5c.013c31",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "aa8d0585.4d7718",
        "type": "inject",
        "z": "f1c4be48.0cc6a",
        "name": "testLog",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 560,
        "wires": [
            [
                "fb234fce.50203"
            ]
        ]
    },
    {
        "id": "7d046518.4fc8cc",
        "type": "comment",
        "z": "f1c4be48.0cc6a",
        "name": "Logging Structure",
        "info": "Folders & blobs\n\naccount/building/year/month/day/subject\n",
        "x": 190,
        "y": 500,
        "wires": []
    },
    {
        "id": "723e945c.29f63c",
        "type": "function",
        "z": "f1c4be48.0cc6a",
        "name": "logIt",
        "func": "var connStr = global.get(\"azureConnStr\");\nvar azureStorage = global.get(\"azureStorage\");\nvar blobService = azureStorage.createBlobService(connStr);\nvar appendBlob = \"bobb-ops.json\";\nvar entry;\n\nif (typeof msg.payload == \"object\")\n    entry = JSON.stringify(msg.payload);\nelse\n    entry = msg.payload;\n    \n\nblobService.appendFromText(\"bobb-logs\", appendBlob, entry, function(error, result, response) {\n    if (error) {\n        blobService.createAppendBlobFromText(\"bobb-logs\", appendBlob, entry, function(error, result, response) {\n            if (error)\n                node.status({text: appendBlob + \":\" + new Date().toLocaleTimeString(), shape: \"ring\", fill: \"red\"});\n            else\n                node.status({text: appendBlob + \":\" + new Date().toLocaleTimeString(), shape: \"dot\", fill: \"green\"});\n        });\n    } else\n        node.status({text: appendBlob + \":\" + new Date().toLocaleTimeString(), shape: \"dot\", fill: \"green\"});\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fb234fce.50203",
        "type": "template",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"timestamp\": \"{{payload}}\",\n    \"message\": \"Test message\"\n}",
        "output": "json",
        "x": 330,
        "y": 560,
        "wires": [
            [
                "dbcb99da.05a138",
                "723e945c.29f63c"
            ]
        ]
    },
    {
        "id": "dbcb99da.05a138",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 510,
        "y": 520,
        "wires": []
    },
    {
        "id": "6dc3aab1.f07fc4",
        "type": "mqtt in",
        "z": "43f12961.0018d8",
        "name": "",
        "topic": "+/owntracks/+/+/event",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "ae7c50fd.d5f97",
                "b19ac831.e13e28"
            ]
        ]
    },
    {
        "id": "ae7c50fd.d5f97",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "owntracks event",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 360,
        "y": 180,
        "wires": []
    },
    {
        "id": "c3a858fc.6306c8",
        "type": "mqtt in",
        "z": "43f12961.0018d8",
        "name": "",
        "topic": "+/owntracks/+/+/info",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "7c6eb929.545408"
            ]
        ]
    },
    {
        "id": "7c6eb929.545408",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "owntracks info",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 360,
        "y": 240,
        "wires": []
    },
    {
        "id": "95aed0a1.af504",
        "type": "mqtt out",
        "z": "43f12961.0018d8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "broker": "74909a69.35ca34",
        "x": 790,
        "y": 300,
        "wires": []
    },
    {
        "id": "dd76488a.9a33e8",
        "type": "geohash",
        "z": "7c5e300a.a71d9",
        "name": "",
        "x": 740,
        "y": 220,
        "wires": [
            [
                "8dc20e17.64e1f"
            ]
        ]
    },
    {
        "id": "27e59b05.44ce94",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 440,
        "y": 220,
        "wires": [
            [
                "8a9746b0.84dd98"
            ]
        ]
    },
    {
        "id": "8dc20e17.64e1f",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a9746b0.84dd98",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "msg.thing = \"thing\";\nmsg.payload = {lat: 51.5138453, lon: -0.1005393, poo: \"poo\"};\nmsg.location = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "dd76488a.9a33e8",
                "2992cdd8.72eab2"
            ]
        ]
    },
    {
        "id": "2992cdd8.72eab2",
        "type": "google places",
        "z": "7c5e300a.a71d9",
        "reqType": "placesNearby",
        "googleAPI": "15b12f9f.4ee7e",
        "name": "",
        "lat": "",
        "lon": "",
        "query": "",
        "radius": "50",
        "rankBy": "prominence",
        "keyword": "",
        "language": "",
        "minPrice": "",
        "maxPrice": "",
        "placeName": "",
        "placeId": "",
        "extensions": "",
        "openNow": "",
        "types": "",
        "outputnumber": "5",
        "outputas": "single",
        "x": 780,
        "y": 260,
        "wires": [
            [
                "2666ce1.d790732"
            ]
        ]
    },
    {
        "id": "2666ce1.d790732",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 980,
        "y": 260,
        "wires": []
    },
    {
        "id": "806a85d6.9f5ae8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "3153afec.2cdbf",
            "5ef9ff7.3e52b"
        ],
        "x": 1315,
        "y": 420,
        "wires": []
    },
    {
        "id": "13695eeb.aa1db1",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "alwaysOns",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllDevices(function(accountId, buildingId, deviceId) {\n    const device = G.getDevice(accountId, buildingId, deviceId);\n    \n    if (device && device.alwaysOn) {\n        node.send({\n            accountId,\n            buildingId,\n            deviceId,\n            payload: {on: true},\n            api: device.api,\n            source: \"alwayson\"\n        });\n    }\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 420,
        "wires": [
            [
                "806a85d6.9f5ae8",
                "43869680.ea57e8"
            ]
        ]
    },
    {
        "id": "1aab96bd.5fb529",
        "type": "inject",
        "z": "9556cd1.486d63",
        "name": "Turn on alwaysOns",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 940,
        "y": 420,
        "wires": [
            [
                "13695eeb.aa1db1"
            ]
        ]
    },
    {
        "id": "43869680.ea57e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "ALWAYSON",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1370,
        "y": 380,
        "wires": []
    },
    {
        "id": "927dd427.3a1438",
        "type": "link out",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 715,
        "y": 380,
        "wires": []
    },
    {
        "id": "cf4e6a5.18e0298",
        "type": "mqtt in",
        "z": "16c1aedb.4b0961",
        "name": "sonoff-tasmota result",
        "topic": "+/+/sonoff/+/RESULT",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "c037561b.d73db8"
            ]
        ]
    },
    {
        "id": "33b34b73.da43e4",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "empty?",
        "func": "const [G, azureConnStr, D, accounts] = global.get([\"globals\", \"azureConnStr\", \"dataEngine\", \"accounts\"]) ;\n\nif (!G || (G && !G.hasOwnProperty(\"objectReduce\")) || !azureConnStr || !D || (D && !D.hasOwnProperty(\"storeData\")) || !accounts) {\n    node.send(msg);\n}\n\n\nconst status = {\n    text: G.shortestDateTime()\n}\n    \nnode.status(status)\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 180,
        "wires": [
            [
                "38b66d1e.a08fc2"
            ]
        ],
        "outputLabels": [
            "globals"
        ]
    },
    {
        "id": "48c85e47.1c85d",
        "type": "debug",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "1cc65ec4.92c1a1",
        "type": "mqtt in",
        "z": "43f12961.0018d8",
        "name": "",
        "topic": "+/owntracks/+/+/waypoint",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "7c6eb929.545408"
            ]
        ]
    },
    {
        "id": "5be772eb.aa66ac",
        "type": "inject",
        "z": "43f12961.0018d8",
        "name": "requestUpdate",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 440,
        "y": 300,
        "wires": [
            [
                "e5768196.fcbc4"
            ]
        ]
    },
    {
        "id": "e5768196.fcbc4",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "OwnTracks",
        "func": "const G = global.get(\"globals\")\n\nG.iterateAllAccounts(accountId => {\n    const account = G.getAccount(accountId)\n    \n    if (account.people) {\n        Object.keys(account.people).map(personId => node.send({\n            topic: [accountId, \"owntracks\", personId, \"phone\", \"cmd\"].join(\"/\"),\n            payload: {\n                \"_type\":\"cmd\",\n                \"action\":\"reportLocation\"\n            }\n        }))\n    }\n})\n// node.send({\n//     topic: \"owntracks/jsilver/59E0B1E6-5D51-43A1-BBD6-02314296F3DA/cmd\",\n//     payload: {\n//         \"_type\":\"cmd\",\n//         \"action\":\"reportLocation\"\n//     }\n// });\n\n// node.send({\n//     topic: \"owntracks/jjeffery/iPhone/cmd\",\n//     payload: {\n//         \"_type\":\"cmd\",\n//         \"action\":\"reportLocation\"\n//     }\n// });\n\n// node.send({\n//     topic: \"owntracks/esilver/iPhone/cmd\",\n//     payload: {\n//         \"_type\":\"cmd\",\n//         \"action\":\"reportLocation\"\n//     }\n// });\n",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 300,
        "wires": [
            [
                "95aed0a1.af504",
                "b998dc59.e2a7f"
            ]
        ]
    },
    {
        "id": "816a201d.1c18f",
        "type": "link in",
        "z": "f96e1e80.b1c1a",
        "name": "reloadBuildingsAndStates",
        "links": [
            "8df6a8e2.39e918",
            "69fdecfa.af96b4"
        ],
        "x": 575,
        "y": 300,
        "wires": [
            [
                "4e645a66.9b3b64"
            ]
        ]
    },
    {
        "id": "da8332a2.194ad",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "reloadBuildingsAndStates",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 1160,
        "wires": [
            [
                "8df6a8e2.39e918"
            ]
        ]
    },
    {
        "id": "8df6a8e2.39e918",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "",
        "links": [
            "816a201d.1c18f"
        ],
        "x": 335,
        "y": 1160,
        "wires": []
    },
    {
        "id": "99ccb904.bd4b08",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "enumerate",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllDevices((accountId, buildingId, deviceId) => {\n    const device = G.getDevice(accountId, buildingId, deviceId);\n    \n    const newMsg = {\n        accountId: accountId,\n        buildingId: buildingId,\n        deviceId: deviceId,\n        device: device\n    };\n\n    node.send(newMsg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 320,
        "wires": [
            [
                "5175b37f.a5686c"
            ]
        ]
    },
    {
        "id": "40b45da6.51d964",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "offline?",
        "func": "const {topic, payload: status = \"offline\"} = msg;\nconst [accountId, buildingId] = topic.split(\"/\");\n\nnode.send({\n    topic: [accountId, buildingId, buildingId, \"rf-bridge\", \"online\"].join(\".\"),\n    payload: [\"online\", \"1\"].includes(status.toLowerCase())\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 420,
        "wires": [
            [
                "bd0ade2.0630d2",
                "6ad1959.55b3b6c"
            ]
        ]
    },
    {
        "id": "bd0ade2.0630d2",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "statusData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "9cd6c59e.af3388",
        "type": "function",
        "z": "ea307f99.462f6",
        "name": "getMovementLog",
        "func": "msg.payload = global.get(\"movementLog\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "1fd9958d.f21aea"
            ]
        ]
    },
    {
        "id": "75fc7fc6.20baa",
        "type": "inject",
        "z": "ea307f99.462f6",
        "name": "inspect",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 480,
        "wires": [
            [
                "9cd6c59e.af3388"
            ]
        ]
    },
    {
        "id": "1fd9958d.f21aea",
        "type": "debug",
        "z": "ea307f99.462f6",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 550,
        "y": 480,
        "wires": []
    },
    {
        "id": "5bb6a15b.ddcb7",
        "type": "inject",
        "z": "ea307f99.462f6",
        "name": "update",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "958e614f.36715"
            ]
        ]
    },
    {
        "id": "958e614f.36715",
        "type": "function",
        "z": "ea307f99.462f6",
        "name": "sinces",
        "func": "let moment = global.get(\"moment\");\nlet movementLog = global.get(\"movementLog\");\n\nif (movementLog) {\n    for (let accountId in movementLog) {\n        for (let buildingId in movementLog[accountId]) {\n            for (let roomId in movementLog[accountId][buildingId]) {\n                let now = new Date();\n                let sinceLastRoom, sinceLastAnywhere;\n                let sinceLastRoomMins, sinceLastAnywhereMins;\n\n                if (!movementLog[accountId][buildingId][roomId].last) {\n                    sinceLastRoomMins = null;\n                    sinceLastRoom = \"unknown\";\n                } else {\n                    let interval = new Date(now - movementLog[accountId][buildingId][roomId].last).getTime();\n                    let duration = moment.duration(interval);\n                    sinceLastRoomMins = duration.humanize();\n                    sinceLastRoom = interval;\n                }\n                \n                if (!movementLog[accountId][buildingId].anywhere) movementLog[accountId][buildingId].anywhere = {};\n                \n                if (!movementLog[accountId][buildingId].anywhere.last)\n                    sinceLastAnywhere = \"unknown\";\n                else {\n                    let interval = new Date(now - movementLog[accountId][buildingId].anywhere.last).getTime();\n                    let duration = moment.duration(interval);\n                    sinceLastAnywhereMins = duration.humanize();\n                    sinceLastAnywhere = interval;\n                }\n                \n                movementLog[accountId][buildingId].anywhere.sinceLast = sinceLastAnywhere;\n                movementLog[accountId][buildingId].anywhere.sinceLastMins = sinceLastAnywhereMins;\n                \n                movementLog[accountId][buildingId][roomId].sinceLast = sinceLastRoom;\n                movementLog[accountId][buildingId][roomId].sinceLastMins = sinceLastRoomMins;\n            }\n        }\n    }\n    \n    global.set(\"movementLog\", movementLog);\n\n    return {payload: movementLog};\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "781b348e.0899fc",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "routeMQTT",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 1095,
        "y": 620,
        "wires": []
    },
    {
        "id": "3c6ab77a.da32b8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "To MQTT",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1140,
        "y": 660,
        "wires": []
    },
    {
        "id": "6c62124a.c007bc",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testOffTimeChampions",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "51d1688c.9b4448"
            ]
        ]
    },
    {
        "id": "51d1688c.9b4448",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"testofftime\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "f34ab82f.fcd388",
                "bec85ef5.6440a",
                "3ec125ec.80c7fa"
            ]
        ]
    },
    {
        "id": "f34ab82f.fcd388",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 435,
        "y": 1020,
        "wires": []
    },
    {
        "id": "52a584c4.518b7c",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "func": "var msg1 = {event: \"jfdi.studio.events.aircon1.\" + msg.payload};\nnode.send(msg1);\n\nvar msg2 = {event: \"jfdi.studio.events.aircon2.\" + msg.payload};\nnode.send(msg2);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 960,
        "wires": [
            [
                "955ec6a5.63bdb8",
                "dcff1de4.ed032"
            ]
        ]
    },
    {
        "id": "955ec6a5.63bdb8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1050,
        "y": 960,
        "wires": []
    },
    {
        "id": "ed4329f.e6040d8",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "aircons on",
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 700,
        "y": 940,
        "wires": [
            [
                "52a584c4.518b7c"
            ]
        ]
    },
    {
        "id": "268438b8.84dd78",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "aircons off",
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "52a584c4.518b7c"
            ]
        ]
    },
    {
        "id": "dcff1de4.ed032",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 1015,
        "y": 920,
        "wires": []
    },
    {
        "id": "cb568bd5.e3cbf8",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "enumerate",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllBuildings((accountId, buildingId) => {\n    const devices = G.getDevices(accountId, buildingId);\n    devices.map(deviceId => {\n        const device = G.getDevice(accountId, buildingId, deviceId);\n        \n        let newMsg = {\n            accountId: accountId,\n            buildingId: buildingId,\n            deviceId: deviceId,\n            device: device\n        };\n    \n        node.send(newMsg);\n    });\n    \n    node.warn(`${devices.length} devices in building ${accountId}.${buildingId} sent to HomeKit`);\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "9d3742b6.f7801"
            ]
        ]
    },
    {
        "id": "e3615fe2.cf15f",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "updateAllLightDevices",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 1300,
        "wires": [
            [
                "cb568bd5.e3cbf8"
            ]
        ]
    },
    {
        "id": "9d3742b6.f7801",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "sendToHomekit",
        "func": "let newMsg = {\n    diag: msg.accountId + \"->\" + msg.buildingId + \"->\" + msg.deviceId,\n    topic: \"homebridge/to/remove/service\",\n    accountId: msg.accountId,\n    buildingId: msg.buildingId,\n    payload: {\n        name: msg.deviceId,\n        service_name: msg.device.description,\n        service: msg.device.light ? \"Lightbulb\": \"Switch\"\n    }\n};\n            \nnode.send(newMsg);\n\n\nnewMsg = {\n    diag: msg.accountId + \"->\" + msg.buildingId + \"->\" + msg.deviceId,\n    topic: \"homebridge/to/add/service\",\n    accountId: msg.accountId,\n    buildingId: msg.buildingId,\n    payload: {\n        name: msg.deviceId,\n        service_name: msg.device.description,\n        service: msg.device.light ? \"Lightbulb\": \"Switch\"\n    }\n};\n            \nnode.send(newMsg);\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 1300,
        "wires": [
            [
                "3f08ffa7.800b2",
                "46ba45ce.7b69dc"
            ]
        ]
    },
    {
        "id": "46ba45ce.7b69dc",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "toMQTTrouter",
        "links": [
            "7fc172d3.c912cc"
        ],
        "x": 715,
        "y": 1300,
        "wires": []
    },
    {
        "id": "3f08ffa7.800b2",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 750,
        "y": 1340,
        "wires": []
    },
    {
        "id": "694f95e8.c5b4ac",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "queryChampions",
        "topic": "jfdi/champions/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 140,
        "y": 740,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "47eaa398.cf2bac",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bec85ef5.6440a",
        "type": "delay",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 480,
        "y": 1060,
        "wires": [
            [
                "c0bbd0ed.5f32f"
            ]
        ]
    },
    {
        "id": "c0bbd0ed.5f32f",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "func": "msg.payload = global.get(\"dataEngine\").getDataNode(\"jfdi\", \"champions\", \"study.desklamp3.on\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "47eaa398.cf2bac"
            ]
        ]
    },
    {
        "id": "3ec125ec.80c7fa",
        "type": "delay",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "pauseType": "delay",
        "timeout": "11",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 480,
        "y": 1100,
        "wires": [
            [
                "c0bbd0ed.5f32f"
            ]
        ]
    },
    {
        "id": "a5799ed4.a0448",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "",
        "links": [
            "51f7eb3e.57cbb4"
        ],
        "x": 995,
        "y": 500,
        "wires": []
    },
    {
        "id": "94ec30bf.e87e1",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "deleteNumbered",
        "func": "for (let deviceId in msg.payload) {\n    if (!isNaN(deviceId)) {\n        let newMsg = {\n            accountId: msg.accountId,\n            buildingId: msg.buildingId,\n            topic: [msg.accountId, msg.buildingId, \"homekit/to/remove\"].join(\"/\"),\n        payload: {name: deviceId}};\n        node.send(newMsg);\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 680,
        "wires": [
            [
                "717efb83.40afa4",
                "a74066eb.740c48"
            ]
        ]
    },
    {
        "id": "51f7eb3e.57cbb4",
        "type": "link in",
        "z": "998225a2.49fc08",
        "name": "deleteNumberedHomebridgeMQTTDevices",
        "links": [
            "a5799ed4.a0448"
        ],
        "x": 715,
        "y": 680,
        "wires": [
            [
                "94ec30bf.e87e1"
            ]
        ]
    },
    {
        "id": "717efb83.40afa4",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1080,
        "y": 680,
        "wires": []
    },
    {
        "id": "8975c378.c1644",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "deleteAll@Champions",
        "topic": "jfdi/champions/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 880,
        "wires": [
            [
                "ab8247dd.cfe458"
            ]
        ]
    },
    {
        "id": "ab8247dd.cfe458",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "msg.accountId = \"jfdi\";\nmsg.buildingId = \"champions\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 880,
        "wires": [
            [
                "b2cddeed.41b25"
            ]
        ]
    },
    {
        "id": "4c471d08.625014",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "deleteNums@Studio",
        "topic": "jfdi/studio/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 150,
        "y": 940,
        "wires": [
            [
                "6f827af8.063204"
            ]
        ]
    },
    {
        "id": "6f827af8.063204",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "msg.accountId = \"jfdi\";\nmsg.buildingId = \"studio\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 940,
        "wires": [
            [
                "9e4e7f7d.36fc8"
            ]
        ]
    },
    {
        "id": "5e91b58d.9905bc",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "deleteNums@Champions",
        "topic": "jfdi/champions/homekit/to/get",
        "payload": "{\"name\": \"*\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 170,
        "y": 980,
        "wires": [
            [
                "8315815f.dc3fa"
            ]
        ]
    },
    {
        "id": "8315815f.dc3fa",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "IDs",
        "func": "msg.accountId = \"jfdi\";\nmsg.buildingId = \"champions\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 980,
        "wires": [
            [
                "9e4e7f7d.36fc8"
            ]
        ]
    },
    {
        "id": "9e4e7f7d.36fc8",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "query",
        "func": "msg.topic = [msg.accountId, msg.buildingId, \"homekit/to/get\"].join(\"/\");\nmsg.payload = {name: \"*\"};\nflow.set(\"command\", {command: \"deleteNumbered\", accountId: msg.accountId, buildingId: msg.buildingId});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 940,
        "wires": [
            [
                "60de4301.0e753c"
            ]
        ]
    },
    {
        "id": "c993b0d2.a1e9b",
        "type": "mqtt in",
        "z": "4ec77ac0.46dd44",
        "name": "+/+/sensors/#",
        "topic": "+/+/sensors/#",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "a0726ae4.9e8c98",
                "df5ba685.0b6e58"
            ]
        ]
    },
    {
        "id": "a0726ae4.9e8c98",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "IDs",
        "func": "const [accountId, buildingId] = msg.topic.split(\"/\");\n\nreturn {\n    ...msg,\n    accountId,\n    buildingId\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 260,
        "wires": [
            [
                "60922e58.141dc",
                "3a585e4b.e19fb2"
            ]
        ]
    },
    {
        "id": "c0a3ddd4.7dcb4",
        "type": "mqtt in",
        "z": "4ec77ac0.46dd44",
        "name": "+/+/zwave/#",
        "topic": "+/+/zwave/#",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "44a359b3.1d5838",
                "e83ef176.f424f"
            ]
        ]
    },
    {
        "id": "981494d3.f50ca8",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "identifyZWaveDevice",
        "func": "const G = global.get(\"globals\");\n\nconst {topic, payload, payload: {metric: metricId} = {}} = msg;\nconst [accountId, buildingId, api, nodeId, classId] = topic.split(\"/\");\n\n// topic format is accountId/buildingId/zwave/nodeid/class\n\nconst deviceId = G.findDeviceByApiId(accountId, buildingId, nodeId, api);\n\nif (deviceId) { // device is defined - save data\n    const key = G.joiner([deviceId, metricId], \".\");\n    \n    node.send([{\n        accountId, \n        buildingId, \n        topic: key,\n        payload: typeof payload === \"boolean\" ? payload : payload.value,\n        source: \"zwave\",\n        nodeId,\n        metricId\n    }, null]);\n} else {    // device isn't defined yet - ignore data\n    node.send([null,\n    {\n        accountId, \n        buildingId, \n        topic: key,\n        payload: nodeId,\n        api,\n        metricId\n    }]);\n    node.warn(`ZWave device id ${nodeId} not defined`);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 720,
        "y": 120,
        "wires": [
            [
                "f69cd6c9.0647d8",
                "30b67b.61aea986"
            ],
            [
                "1d4980d8.c64bef"
            ]
        ]
    },
    {
        "id": "f69cd6c9.0647d8",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "ZWave",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 940,
        "y": 60,
        "wires": []
    },
    {
        "id": "24e6921b.313c7e",
        "type": "mqtt out",
        "z": "9556cd1.486d63",
        "name": "CloudMQTT",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 1230,
        "y": 60,
        "wires": []
    },
    {
        "id": "9a68d01a.1fbc",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "CloudMQTT",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1230,
        "y": 120,
        "wires": []
    },
    {
        "id": "1b04ae2a.af5dc2",
        "type": "http request",
        "z": "d7e6850e.758d08",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "468e5b7b.cb0504",
                "24d4a728.87e488"
            ]
        ]
    },
    {
        "id": "f47b9a72.2083f8",
        "type": "inject",
        "z": "d7e6850e.758d08",
        "name": "hourly",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "1d5fe35d.7a3f3d"
            ]
        ]
    },
    {
        "id": "f38d15cd.e89a08",
        "type": "debug",
        "z": "d7e6850e.758d08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 890,
        "y": 80,
        "wires": []
    },
    {
        "id": "1d5fe35d.7a3f3d",
        "type": "function",
        "z": "d7e6850e.758d08",
        "name": "getAllBuildingsWeather",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllBuildings((accountId, buildingId) => {\n    const {lat, lon} = G.getBuilding(accountId, buildingId);\n    \n    node.send({\n        url: \"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&units=metric&APPID=6e5752d3294bbca0fdb06460afe4704c\",\n        accountId,\n        buildingId\n    });\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "1b04ae2a.af5dc2"
            ]
        ]
    },
    {
        "id": "59bc9b8a.d40734",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "update",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 750,
        "y": 840,
        "wires": [
            [
                "c2d59d9c.078de"
            ]
        ]
    },
    {
        "id": "c2d59d9c.078de",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "",
        "func": "msg = {\n    topic: \"jfdi/champions/homekit/to/set\",\n    payload: {\n        name: \"largeluminaire\",\n        service_name: \"Large Luminaire\",\n        characteristic: \"Brightness\",\n        value: \"default\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 840,
        "wires": [
            [
                "f63b26f7.055078"
            ]
        ]
    },
    {
        "id": "f63b26f7.055078",
        "type": "mqtt out",
        "z": "998225a2.49fc08",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 1050,
        "y": 840,
        "wires": []
    },
    {
        "id": "3a585e4b.e19fb2",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 470,
        "y": 220,
        "wires": []
    },
    {
        "id": "4dbe1ddd.1727d4",
        "type": "comment",
        "z": "998225a2.49fc08",
        "name": "HomeKit changed something",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "25b094.2c88bf6c",
        "type": "comment",
        "z": "998225a2.49fc08",
        "name": "HomeKit sent us some info",
        "info": "",
        "x": 150,
        "y": 420,
        "wires": []
    },
    {
        "id": "fea6b7b1.21c8e8",
        "type": "comment",
        "z": "998225a2.49fc08",
        "name": "HomeKit wants a device status update",
        "info": "",
        "x": 190,
        "y": 1040,
        "wires": []
    },
    {
        "id": "da60eb28.8296b8",
        "type": "comment",
        "z": "998225a2.49fc08",
        "name": "Add Bobb devices to HomeKit (no overwriting allowed)",
        "info": "",
        "x": 240,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f6f751.a0c4f8c",
        "type": "mqtt in",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "topic": "+/+/eventsout",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "5cef0aa2.1e2584"
            ]
        ]
    },
    {
        "id": "4027d972.788598",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "DIAGNOSTICS",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 970,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4c238a12.7c14a4",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "IDs",
        "func": "let parts = msg.topic.split(\"/\");\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 210,
        "y": 180,
        "wires": [
            [
                "5d12780a.f6c888",
                "8fa91a8c.72e408"
            ]
        ]
    },
    {
        "id": "3d2b54d3.745aec",
        "type": "mqtt in",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "+/+/rf/status/#",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 420,
        "wires": [
            [
                "40b45da6.51d964"
            ]
        ]
    },
    {
        "id": "530048a3.e794a8",
        "type": "mqtt out",
        "z": "4b6a44a6.362b4c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "af5a7245.0b52e",
        "type": "http in",
        "z": "8d7a0ee3.fbbaf",
        "name": "POST event trigger",
        "url": "/BobbAPI/2.0/events/:accountId/:buildingId/:eventId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "59e0ea4f.667bc4",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "6f7fdf7a.5eeca"
            ]
        ]
    },
    {
        "id": "8bfa4cec.2ce1b",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "EXTEVENT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 220,
        "wires": []
    },
    {
        "id": "4dcf760a.084298",
        "type": "http response",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "f16f2a1f.b0a138",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "DELETEALLCMD",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1150,
        "y": 480,
        "wires": []
    },
    {
        "id": "905fa295.00bd6",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "DELETEALLEXEC",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1090,
        "y": 760,
        "wires": []
    },
    {
        "id": "96a768bd.23a908",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "NULLACCOUNTS",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1230,
        "y": 720,
        "wires": []
    },
    {
        "id": "4f66105.261e3f",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "resetAccounts",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 870,
        "y": 720,
        "wires": [
            [
                "d5af06.bacda0f8"
            ]
        ]
    },
    {
        "id": "d5af06.bacda0f8",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "reset",
        "func": "global.set(\"accounts\", null);\nreturn {payload: \"Accounts & buildings purged.\"};",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 720,
        "wires": [
            [
                "96a768bd.23a908"
            ]
        ]
    },
    {
        "id": "7581f529.1df97c",
        "type": "link out",
        "z": "f96e1e80.b1c1a",
        "name": "updateHomekit",
        "links": [
            "f65bdaad.d4ed98"
        ],
        "x": 895,
        "y": 240,
        "wires": []
    },
    {
        "id": "3c1df964.500286",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "logging",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 920,
        "y": 660,
        "wires": []
    },
    {
        "id": "bfa64acb.e5a548",
        "type": "inject",
        "z": "998225a2.49fc08",
        "name": "TestDoor",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "3bdd3224.093fbe"
            ]
        ]
    },
    {
        "id": "3bdd3224.093fbe",
        "type": "link out",
        "z": "998225a2.49fc08",
        "name": "",
        "links": [
            "a0abef40.43c7e"
        ],
        "x": 255,
        "y": 60,
        "wires": []
    },
    {
        "id": "98b48bd9.f5f2e8",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "2553bdb3.922d62",
        "type": "mqtt in",
        "z": "16c1aedb.4b0961",
        "name": "sonoff-tasmota telemetry",
        "topic": "+/+/sonoff/+/STATE",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "c037561b.d73db8"
            ]
        ]
    },
    {
        "id": "111dfd04.c53353",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "EXTRACTED",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 780,
        "y": 280,
        "wires": []
    },
    {
        "id": "7aa6d1a9.24c12",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 490,
        "y": 620,
        "wires": []
    },
    {
        "id": "ad8567ef.200df8",
        "type": "mqtt out",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "9981d7af.c7a828",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "ACCOUNTS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "688815a7.d1cadc",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "mongoDB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "22e29593.3640da",
                "42f63bf9.a56524"
            ]
        ]
    },
    {
        "id": "fa3758b0.9a08a8",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "mongoDB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "7d9a8e75.75d91"
            ]
        ]
    },
    {
        "id": "6a967f4f.e1dde",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "mongoDB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 380,
        "wires": [
            [
                "efd9394f.053408",
                "e5a34d14.bd834"
            ]
        ]
    },
    {
        "id": "3e34d278.0ed93e",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "mongoDB",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "48d5845d.606e0c",
                "13d66e9c.237b41"
            ]
        ]
    },
    {
        "id": "22aa65fc.7a59da",
        "type": "delay",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 300,
        "y": 80,
        "wires": [
            [
                "50f298d8.eefe48"
            ]
        ]
    },
    {
        "id": "e66fa7b3.5bde28",
        "type": "http in",
        "z": "f96e1e80.b1c1a",
        "name": "ReloadAccount",
        "url": "/BobbAPI/2.0/accounts/reload/:accountId/:authToken/",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1180,
        "wires": [
            [
                "18b4b42.ade054c"
            ]
        ]
    },
    {
        "id": "924839c6.f0f988",
        "type": "http in",
        "z": "f96e1e80.b1c1a",
        "name": "ReloadAccount",
        "url": "/BobbAPI/2.0/accounts/reload/:accountId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1220,
        "wires": [
            [
                "18b4b42.ade054c"
            ]
        ]
    },
    {
        "id": "18b4b42.ade054c",
        "type": "subflow:2161b62e.a025aa",
        "z": "f96e1e80.b1c1a",
        "name": "Auth",
        "x": 270,
        "y": 1200,
        "wires": [
            [
                "b478a46f.566088",
                "224639ca.bb0306"
            ],
            [
                "e51b3037.45bf8",
                "f3ef623a.61325"
            ]
        ]
    },
    {
        "id": "6d9d2bfc.645464",
        "type": "http in",
        "z": "f96e1e80.b1c1a",
        "name": "ReloadBuilding",
        "url": "/BobbAPI/2.0/buildings/reload/:accountId/:buildingId/:authToken/",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1280,
        "wires": [
            [
                "8b423dc5.2423a"
            ]
        ]
    },
    {
        "id": "e17d1fae.78aa8",
        "type": "http in",
        "z": "f96e1e80.b1c1a",
        "name": "ReloadBuilding",
        "url": "/BobbAPI/2.0/buildings/reload/:accountId/:buildingId",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1320,
        "wires": [
            [
                "8b423dc5.2423a"
            ]
        ]
    },
    {
        "id": "8b423dc5.2423a",
        "type": "subflow:2161b62e.a025aa",
        "z": "f96e1e80.b1c1a",
        "name": "Auth",
        "x": 270,
        "y": 1300,
        "wires": [
            [
                "24e56f49.d363",
                "8b12e4b9.c59098"
            ],
            [
                "e51b3037.45bf8",
                "f3ef623a.61325"
            ]
        ]
    },
    {
        "id": "7428d561.9e542c",
        "type": "http response",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b478a46f.566088",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "getAccount",
        "func": "const G = global.get(\"globals\");\nlet err = false;\nlet text = \"\";\nG.extractParams(msg);\nconst {accountId} = msg;\n\nif (global.get(\"accounts\")[accountId]) {\n    msg.payload = {\n        accountId\n    };\n    \n    text = \"Loading a/c \" + accountId;\n    msg.statusCode = 200;\n    msg.payload = text;\n} else {\n    err = true;\n    msg.statusCode = 404;\n    text = \"No such a/c \" + accountId;\n}\n\nnode.status(G.nodeStatus(err, text));\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1180,
        "wires": [
            [
                "e51b3037.45bf8",
                "5c6dc2f3.e2277c",
                "69fdecfa.af96b4"
            ]
        ]
    },
    {
        "id": "24e56f49.d363",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "getBuilding",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nconst G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    // node.status();\n    const {accountId} = msg\n    msg.payload = {\n        accountId\n    };\n    \n    msg.statusCode = 200;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1280,
        "wires": [
            [
                "e51b3037.45bf8",
                "69fdecfa.af96b4",
                "e8e01f35.22563"
            ]
        ]
    },
    {
        "id": "e51b3037.45bf8",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "resp",
        "func": "if (msg.req)\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "7428d561.9e542c"
            ]
        ]
    },
    {
        "id": "224639ca.bb0306",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 450,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5c6dc2f3.e2277c",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f3ef623a.61325",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "ERROR",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 710,
        "y": 1280,
        "wires": []
    },
    {
        "id": "69fdecfa.af96b4",
        "type": "link out",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "links": [
            "816a201d.1c18f"
        ],
        "x": 640,
        "y": 1140,
        "wires": []
    },
    {
        "id": "519ce7a.820d418",
        "type": "comment",
        "z": "f96e1e80.b1c1a",
        "name": "Make this better!",
        "info": "Selectively reload individual accounts and buildings",
        "x": 760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "8b12e4b9.c59098",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 450,
        "y": 1380,
        "wires": []
    },
    {
        "id": "e8e01f35.22563",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4d387411.e66f8c",
        "type": "http in",
        "z": "7a8e8ea9.9ee48",
        "name": "Hello",
        "url": "/BobbAPI/2.0/scheduling/hello/:authToken/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "1e00286d.c91cb8"
            ]
        ]
    },
    {
        "id": "f03e1151.e2caa",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "1ef9d0f5.61a82f",
        "type": "inject",
        "z": "7a8e8ea9.9ee48",
        "name": "NameThisMinute",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": true,
        "x": 170,
        "y": 160,
        "wires": [
            [
                "c3e22339.35274"
            ]
        ]
    },
    {
        "id": "c3e22339.35274",
        "type": "function",
        "z": "7a8e8ea9.9ee48",
        "name": "minuteSerial",
        "func": "msg.payload = {minuteSerial: Math.round((msg.payload  / 60000))};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 160,
        "wires": [
            [
                "a9408d0.7d30f7"
            ]
        ]
    },
    {
        "id": "a9408d0.7d30f7",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "3d588c4f.b41304",
        "type": "inject",
        "z": "7a8e8ea9.9ee48",
        "name": "ScheduleHello",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "11a4287f.70d278"
            ]
        ]
    },
    {
        "id": "11a4287f.70d278",
        "type": "function",
        "z": "7a8e8ea9.9ee48",
        "name": "request a hello",
        "func": "const S = global.get(\"server\");\n\nmsg = {\n    time: msg.payload + 60000,\n    topic: \"hello\",\n    url: `https://${S.url}/api/BobbAPI/2.0/scheduling/hello`\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 220,
        "wires": [
            [
                "e3b36798.b687d8",
                "e967d9ca.591c38"
            ]
        ]
    },
    {
        "id": "d677bccb.5d9b2",
        "type": "http in",
        "z": "7a8e8ea9.9ee48",
        "name": "Hello",
        "url": "/BobbAPI/2.0/scheduling/hello",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "1e00286d.c91cb8"
            ]
        ]
    },
    {
        "id": "1e00286d.c91cb8",
        "type": "subflow:2161b62e.a025aa",
        "z": "7a8e8ea9.9ee48",
        "name": "Auth",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "85319611.996528"
            ],
            [
                "5ddea287.a67c3c"
            ]
        ]
    },
    {
        "id": "85319611.996528",
        "type": "function",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "func": "msg.payload = \"Hello!\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 60,
        "wires": [
            [
                "f03e1151.e2caa",
                "31dd16b3.cc5efa"
            ]
        ]
    },
    {
        "id": "5ddea287.a67c3c",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "ERROR",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 860,
        "y": 120,
        "wires": []
    },
    {
        "id": "31dd16b3.cc5efa",
        "type": "http response",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 20,
        "wires": []
    },
    {
        "id": "1bf4ffe7.7335c",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "93412f5f.d3603",
        "type": "inject",
        "z": "7a8e8ea9.9ee48",
        "name": "ScheduleOff",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "6c97a2c8.d7f99c"
            ]
        ]
    },
    {
        "id": "6c97a2c8.d7f99c",
        "type": "function",
        "z": "7a8e8ea9.9ee48",
        "name": "request an offtime",
        "func": "const S = global.get(\"server\");\n\nmsg = {\n    time: msg.payload + 10 * 1000,\n    topic: \"jfdi.studio.office.jonsdesklamp\",\n    url: `https://${S.url}/api/BobbAPI/2.0/device/jfdi/studio/office.jonsdesklamp/off`,\n    source: \"scheduler\",\n    reason: \"offtimes\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "4a0e639f.7a050c",
                "e967d9ca.591c38"
            ]
        ]
    },
    {
        "id": "b1dab438.d6a7b8",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "bcc6ed51.811b5",
        "type": "mqtt in",
        "z": "4ec77ac0.46dd44",
        "name": "+/+/sensors/+/status",
        "topic": "+/+/sensors/+/status",
        "qos": "2",
        "datatype": "auto",
        "broker": "74909a69.35ca34",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "7b430948.0f1278"
            ]
        ]
    },
    {
        "id": "b1729889.bdd7c8",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "RAWzwave",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "12fea76b.747899",
        "type": "function",
        "z": "f1c4be48.0cc6a",
        "name": "toTableStorage",
        "func": "const G = global.get(\"globals\");\nconst start = Date.now();\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\nconst entGen = azureStorage.TableUtilities.entityGenerator;\nconst {accountId, buildingId, deviceId, state, from, to, durationSecs, api = \"\", event = \"\", ruleId = \"\"} = msg.payload;\nconst tableName = 'bobbDeviceLogs';\n\nconst rec = {\n    PartitionKey: entGen.String([accountId, buildingId, deviceId].join(\".\")),\n    RowKey: entGen.String(G.invertedTicks().toString()),\n    accountId: entGen.String(accountId),\n    buildingId: entGen.String(buildingId),\n    deviceId: entGen.String(deviceId),\n    state: entGen.Boolean(state),\n    from: entGen.DateTime(new Date(from)),\n    to: entGen.DateTime(new Date(to)),\n    durationSecs: entGen.Int32(durationSecs),\n    api: entGen.String(api),\n    event: entGen.String(event),\n    ruleId: entGen.String(ruleId),\n};\n\ntableService.createTableIfNotExists(tableName, (error, result, response) => null);\n\ntableService.insertEntity(tableName, rec, function (error, result, response) {\n    msg.payload = {topic: msg.topic, status: error ? \"failed\" : \"succeeded\", elapsedms: Date.now() - start};\n    msg.payload.error = error;\n    msg.payload.rec = rec;\n    \n    if (error) {\n        node.send([null, msg]);\n    } else\n        node.send([msg, null]);\n});\n",
        "outputs": "2",
        "noerr": 0,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "ffea39c4.036ce8"
            ],
            [
                "d248e8e0.443bc8"
            ]
        ]
    },
    {
        "id": "ffea39c4.036ce8",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "YAY",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "x": 610,
        "y": 40,
        "wires": []
    },
    {
        "id": "d248e8e0.443bc8",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "AWWW",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "d7a093d9.e42ff",
        "type": "inject",
        "z": "27c62c51.a48994",
        "name": "testJon",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 320,
        "wires": [
            [
                "98637935.2b1a58"
            ]
        ]
    },
    {
        "id": "90dc8951.ec7cc8",
        "type": "link out",
        "z": "27c62c51.a48994",
        "name": "",
        "links": [
            "5c4eaf97.495b3"
        ],
        "x": 395,
        "y": 320,
        "wires": []
    },
    {
        "id": "98637935.2b1a58",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "jonTest",
        "func": "msg.accountId = \"jfdi\";\nmsg.payload = \"Test message\";\nmsg.topic = \"Test subject\";\nmsg.who = \"jsilver\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 320,
        "wires": [
            [
                "90dc8951.ec7cc8"
            ]
        ]
    },
    {
        "id": "9d5044cb.9cc698",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 510,
        "y": 100,
        "wires": []
    },
    {
        "id": "6c74c53.4fc843c",
        "type": "inject",
        "z": "27c62c51.a48994",
        "name": "pushbulletGetUser",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "418cbf65.9c6c9"
            ]
        ]
    },
    {
        "id": "fc7d5c6.666a1a",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 820,
        "wires": []
    },
    {
        "id": "418cbf65.9c6c9",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "getUser",
        "func": "let accounts = global.get(\"accounts\");\n\nmsg.headers = {\n    \"content-type\": \"application/json\",\n    \"Access-Token\": accounts.jfdi.people.jsilver.pushbullet.apiKey\n};\n\nmsg.url = \"https://api.pushbullet.com/v2/users/me\";\n\n// msg.payload = accounts.jfdi.people.jsilver.pushbullet;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 820,
        "wires": [
            [
                "5252a8cb.9107c8"
            ]
        ]
    },
    {
        "id": "5252a8cb.9107c8",
        "type": "http request",
        "z": "27c62c51.a48994",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 550,
        "y": 820,
        "wires": [
            [
                "fc7d5c6.666a1a"
            ]
        ]
    },
    {
        "id": "42558ddc.42de74",
        "type": "inject",
        "z": "27c62c51.a48994",
        "name": "pushbulletPushUser",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 900,
        "wires": [
            [
                "a36d1437.4ce3e8"
            ]
        ]
    },
    {
        "id": "ffc9a10c.11c34",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 900,
        "wires": []
    },
    {
        "id": "a36d1437.4ce3e8",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "pushUser",
        "func": "let accounts = global.get(\"accounts\");\n\nmsg.headers = {\n    \"content-type\": \"application/json\",\n    \"Access-Token\": accounts.jfdi.people.datkins.pushbullet.apiKey\n};\n\nmsg.url = \"https://api.pushbullet.com/v2/pushes\";\nmsg.payload = {\n    type: \"note\",\n    title: \"Pushbullet Test from JFDI\",\n    body: \"Let me know via Skype if this is working... Jon\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 900,
        "wires": [
            [
                "164f4b8.f05bbb5"
            ]
        ]
    },
    {
        "id": "164f4b8.f05bbb5",
        "type": "http request",
        "z": "27c62c51.a48994",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 550,
        "y": 900,
        "wires": [
            [
                "ffc9a10c.11c34"
            ]
        ]
    },
    {
        "id": "a4290a75.6fd8c8",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "preparePBfromMQTT",
        "func": "const {payload, payload: {body, subject}} = msg;\n\n// topic is accountId/notify/personId\nconst [accountId, , who] = msg.topic.split(\"/\");\n\nreturn Object.assign(msg, {topic: subject, payload: body ? body : JSON.parse(payload)});\n",
        "outputs": "1",
        "noerr": 0,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "b7db24ea.d932d8"
            ]
        ],
        "outputLabels": [
            "to PB"
        ]
    },
    {
        "id": "b74ed011.94552",
        "type": "http request",
        "z": "27c62c51.a48994",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 730,
        "y": 120,
        "wires": [
            [
                "de3417fe.24a668"
            ]
        ]
    },
    {
        "id": "de3417fe.24a668",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 950,
        "y": 120,
        "wires": []
    },
    {
        "id": "1d0abe56.5a6e22",
        "type": "debug",
        "z": "27c62c51.a48994",
        "name": "ERROR",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 720,
        "y": 180,
        "wires": []
    },
    {
        "id": "b7db24ea.d932d8",
        "type": "function",
        "z": "27c62c51.a48994",
        "name": "pushUser",
        "func": "const G = global.get(\"globals\");\nconst {accountId, who, topic, payload} = msg;\nconst account = G.getAccount(accountId);\n\nif (account && account.notifications && account.notifications.pushbullet && account.notifications.pushbullet.token && account.people && account.people[who] && account.people[msg.who].pushbullet && account.people[msg.who].pushbullet.userId) {\n    msg = {\n        url: \"https://api.pushbullet.com/v2/pushes\",\n        headers: {\n            \"content-type\": \"application/json\",\n            \"Access-Token\": account.notifications.pushbullet.token\n        },\n        method: \"POST\",\n        payload: {\n            type: \"note\",\n            title: topic,\n            body: payload,\n            email: account.people[who].pushbullet.userId\n        }\n    };\n\n    return [msg, null];\n} else\n    return [null, msg];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 520,
        "y": 160,
        "wires": [
            [
                "b74ed011.94552"
            ],
            [
                "1d0abe56.5a6e22"
            ]
        ],
        "outputLabels": [
            "to PB",
            "Errors"
        ]
    },
    {
        "id": "583664ef.d3ce6c",
        "type": "comment",
        "z": "27c62c51.a48994",
        "name": "Future",
        "info": "Need to support other messengers.\nTwilio for SMS & WhatsApp.\nAlso Telegram.\nand email!",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "ebda940f.bfa6d8",
        "type": "http in",
        "z": "f1c4be48.0cc6a",
        "name": "POST device log",
        "url": "/BobbAPI/2.0/logs/:accountId/:buildingId/devices/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "f8309c84.b9a19"
            ]
        ]
    },
    {
        "id": "f8309c84.b9a19",
        "type": "subflow:2161b62e.a025aa",
        "z": "f1c4be48.0cc6a",
        "name": "Auth",
        "x": 310,
        "y": 700,
        "wires": [
            [
                "438fb0d0.de824",
                "c7469550.e018a8"
            ],
            [
                "6e806c6f.405094"
            ]
        ]
    },
    {
        "id": "8a0b8b00.38ab38",
        "type": "http in",
        "z": "f1c4be48.0cc6a",
        "name": "POST device log",
        "url": "/BobbAPI/2.0/logs/:accountId/:buildingId/devices",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "f8309c84.b9a19"
            ]
        ]
    },
    {
        "id": "438fb0d0.de824",
        "type": "function",
        "z": "f1c4be48.0cc6a",
        "name": "getDeviceLogs v3",
        "func": "const G = global.get(\"globals\");\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\n\nG.extractParams(msg);\n\nconst {accountId, buildingId, payload: {count: resultCount = 1}} = msg;\nconst deviceKeys = G.getDevices(accountId, buildingId);   // a list of deviceIds in a building\n// gather an array of promised jobs, one for each deviceId\nconst jobs = deviceKeys.map(deviceId => \n    queryTable([accountId, buildingId, deviceId].join(\".\"), resultCount)\n);\n\nPromise.all(jobs)   // showtime\n    .then(results => {\n        msg.payload = G.flattenArrayOfArrays(results.filter(result => result.entries)\n            .map(result => result.entries.map(entry => G.oDataToObject(entry))))\n            .sort(G.deviceIdSortComparator);\n        node.status(G.nodeStatus(false, `${new Date().toLocaleTimeString()}: ${jobs.length} jobs`));\n        node.send(msg, null);\n    })\n    .catch(error => {\n        node.send(null, msg);\n        node.warn(error);\n    });\n\n\nfunction queryTable(partitionKey, top) {\n    const query = new azureStorage.TableQuery()\n        .top(resultCount)\n        .where('PartitionKey eq ?', partitionKey);\n\n    return new Promise((resolve, reject) => {\n        tableService.queryEntities('bobbDeviceLogs', query, null, (error, result, response) => resolve(error || result));\n    });\n}\n",
        "outputs": "2",
        "noerr": 0,
        "x": 670,
        "y": 700,
        "wires": [
            [
                "4f78bace.9c6254",
                "2fb8435a.afec4c"
            ],
            [
                "6e806c6f.405094"
            ]
        ],
        "outputLabels": [
            "Hue",
            "Debug"
        ]
    },
    {
        "id": "4f78bace.9c6254",
        "type": "http response",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 700,
        "wires": []
    },
    {
        "id": "6e806c6f.405094",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "ERRORS",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 880,
        "y": 800,
        "wires": []
    },
    {
        "id": "2fb8435a.afec4c",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 890,
        "y": 660,
        "wires": []
    },
    {
        "id": "8b38a36b.a888c",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 800,
        "y": 880,
        "wires": [
            [
                "3cb995ae.22defa"
            ]
        ]
    },
    {
        "id": "3cb995ae.22defa",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "accounts==null?",
        "func": "let accounts = global.get(\"accounts\");\nmsg.payload = (accounts === null || !accounts);\n// accounts[\"blah\"] = {};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 880,
        "wires": [
            [
                "8d12fc0e.0935a"
            ]
        ]
    },
    {
        "id": "8d12fc0e.0935a",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 880,
        "wires": []
    },
    {
        "id": "6d02cb1e.d24434",
        "type": "inject",
        "z": "9556cd1.486d63",
        "name": "auth?",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 870,
        "y": 460,
        "wires": [
            [
                "edeb9310.741da"
            ]
        ]
    },
    {
        "id": "edeb9310.741da",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "auth",
        "func": "msg.payload = global.get(\"authObject\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 460,
        "wires": [
            [
                "321536e3.5a350a"
            ]
        ]
    },
    {
        "id": "321536e3.5a350a",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1130,
        "y": 460,
        "wires": []
    },
    {
        "id": "c7469550.e018a8",
        "type": "debug",
        "z": "f1c4be48.0cc6a",
        "name": "AUTHREQ",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 650,
        "y": 640,
        "wires": []
    },
    {
        "id": "fbb8a48e.31dae8",
        "type": "mqtt in",
        "z": "6dba87b8.b5f088",
        "name": "",
        "topic": "+/+/rf/info",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 80,
        "y": 480,
        "wires": [
            [
                "4fc52508.f81b9c"
            ]
        ]
    },
    {
        "id": "e80953f8.bfd9f",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "infoData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 540,
        "y": 440,
        "wires": []
    },
    {
        "id": "4fc52508.f81b9c",
        "type": "json",
        "z": "6dba87b8.b5f088",
        "name": "",
        "pretty": false,
        "x": 230,
        "y": 480,
        "wires": [
            [
                "e4792e51.340dd"
            ]
        ]
    },
    {
        "id": "5774ff5d.ce938",
        "type": "mqtt out",
        "z": "f96e1e80.b1c1a",
        "name": "Roundtrip Test",
        "topic": "bobb/tests/roundtrip",
        "qos": "2",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 320,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a9417931.e0ca88",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 130,
        "y": 1440,
        "wires": [
            [
                "5774ff5d.ce938"
            ]
        ]
    },
    {
        "id": "8a3b343c.cac3d8",
        "type": "mqtt in",
        "z": "f96e1e80.b1c1a",
        "name": "Roundtrip Test",
        "topic": "bobb/tests/roundtrip",
        "qos": "2",
        "datatype": "utf8",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 1500,
        "wires": [
            [
                "146e916f.152f5f"
            ]
        ]
    },
    {
        "id": "b98703f8.4a982",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "RoundtripTest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "x": 460,
        "y": 1500,
        "wires": []
    },
    {
        "id": "146e916f.152f5f",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "func": "msg.payload = {timems: Date.now() - Number(msg.payload)};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 1500,
        "wires": [
            [
                "b98703f8.4a982"
            ]
        ]
    },
    {
        "id": "b3eab583.f77a88",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "UNKNOWN",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "60de4301.0e753c",
        "type": "mqtt out",
        "z": "998225a2.49fc08",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "59228561.7a90fc",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "getSensorData",
        "func": "const G = global.get(\"globals\");\nconst S = global.get(\"store\");\nnode.send({topic: \"DataStore\", payload: S});",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 660,
        "wires": [
            [
                "535bc613.b34148"
            ]
        ]
    },
    {
        "id": "a7667230.c9f77",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "inspectSensorData",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 660,
        "wires": [
            [
                "59228561.7a90fc"
            ]
        ]
    },
    {
        "id": "535bc613.b34148",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 490,
        "y": 660,
        "wires": []
    },
    {
        "id": "176baf18.883971",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 710,
        "y": 1760,
        "wires": []
    },
    {
        "id": "55f99d5a.afffa4",
        "type": "inject",
        "z": "4d99c870.c1d7a8",
        "name": "getTomorrowsDaylightEvents",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "01 00 * * *",
        "once": false,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "a1b17e10.787fe"
            ]
        ]
    },
    {
        "id": "a1b17e10.787fe",
        "type": "function",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "func": "const G = global.get(\"globals\");\nconst moment = global.get(\"moment\");\nconst setTime = moment(new Date()).startOf(\"day\").add(1, 'days').add(12, \"hours\");\n\nnode.warn(`Generating daylight events for ${setTime}`);\n\nconst sendToScheduler = (accountId, buildingId, event, times) => G.scheduleJob({\n    time: times[event], \n    topic: [accountId, buildingId, event].join(\".\"), \n    url: [G.getApiBaseUrl(), \"event\", accountId, buildingId, event].join(\"/\")\n}); \n\nG.iterateAllBuildings((accountId, buildingId) => {\n    const building = G.getBuilding(accountId, buildingId);\n    const suncalc = G.easySuncalc(building.lat, building.lon, setTime);\n    \n    let newMsg = {\n        payload: Object.assign({buildingId: buildingId}, suncalc)\n    };\n\n    node.send(newMsg);\n    \n    Object.keys(suncalc.times).map(key => sendToScheduler(accountId, buildingId, key, suncalc.times));\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 700,
        "wires": [
            [
                "e714be13.9a48d"
            ]
        ]
    },
    {
        "id": "e714be13.9a48d",
        "type": "debug",
        "z": "4d99c870.c1d7a8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 650,
        "y": 700,
        "wires": []
    },
    {
        "id": "3e36ac4f.c0d174",
        "type": "function",
        "z": "be29c938.4a2448",
        "name": "setScheduler",
        "func": "const G = global.get(\"globals\");\n\nconst result = G.scheduleJob(msg);\n\nsendResult(result, msg.time);\n\nfunction sendResult(error, txt) {\n    msg.payload = {minuteSerial: txt, result: error ? \"Error\" : \"Success\"};\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4a0e639f.7a050c",
        "type": "subflow:be29c938.4a2448",
        "z": "7a8e8ea9.9ee48",
        "name": "SendToScheduler",
        "env": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "b1dab438.d6a7b8"
            ]
        ]
    },
    {
        "id": "e3b36798.b687d8",
        "type": "subflow:be29c938.4a2448",
        "z": "7a8e8ea9.9ee48",
        "name": "SendToScheduler",
        "env": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "1bf4ffe7.7335c"
            ]
        ]
    },
    {
        "id": "eca327b6.e59be8",
        "type": "mqtt in",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "topic": "+/+/hue/eventsout",
        "qos": "2",
        "datatype": "auto",
        "broker": "74909a69.35ca34",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "5cef0aa2.1e2584"
            ]
        ]
    },
    {
        "id": "eae3b916.bf6748",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 800,
        "y": 760,
        "wires": []
    },
    {
        "id": "f83a792b.c61ba8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "b6707391.0f5c2",
            "d7700d1d.f500d"
        ],
        "x": 755,
        "y": 720,
        "wires": []
    },
    {
        "id": "46f87d79.4c3994",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST device state",
        "url": "/BobbAPI/2.0/device/:accountId/:buildingId/:deviceId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "f62f8d6a.61d68"
            ]
        ]
    },
    {
        "id": "b7aec8b3.6b1b38",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procDevice",
        "func": "// new API endpoint\n// device state in payload\n\nconst [G, D, S] = global.get([\"globals\", \"dataEngine\", \"server\"]);\n\nG.handleQuery(msg, node, {nostatus: true});\n\nconst {accountId, buildingId, source = \"Command API\", device, state, cause, error} = msg;\nconst payload = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : {};\nconst duration = msg.duration || payload.duration;\nconst offTime = (payload.offTime ? new Date(payload.offTime) : (duration ? new Date(new Date().getTime() + (duration * 60 * 1000)) : null));\nif (payload.duration) delete payload.duration;\n\nconst { delay = 0, priority = 1, ruleId, eventId } = payload;\nconst { building } = msg;\n\nif (!error) {\n    const deviceId = msg.deviceId || msg.id;\n\n    let oldState;\n    \n    if (payload.hasOwnProperty(\"on\")) {\n        oldState = (D.getDataNode(accountId, buildingId, [deviceId, \"on\"].join(\".\")) || {value: false, timestamp: 0});\n        const oldOn = oldState.value;\n        const newState = state || payload.on;\n        payload.on = G.normaliseState(newState, oldOn);\n    }\n\n    if (offTime && payload.on) {\n        G.scheduleJob({\n            time: offTime, \n            topic: [accountId, buildingId, deviceId].join(\".\"), \n            url: `${G.getApiBaseUrl()}/device/${accountId}/${buildingId}/${deviceId}/off`,\n            body: {\n                event: \"offTime\", \n                ruleId: new Date().toTimeString() + \">\" + offTime.toTimeString(),\n                priority: S.defaults.commandPriorities.timeouts || 2\n            }\n        });\n    }\n    \n    const swMsg = {\n        accountId, \n        buildingId, \n        topic: deviceId,\n        deviceId, \n        api: device.api, \n        device: device, \n        eventId,\n        ruleId, \n        delay,\n        cause,\n        source,\n        payload: Object.assign(payload, {offTime})\n    };\n    \n    msg.statusCode = 200;\n    msg.payload = \"OK\";\n\n    node.send([swMsg, msg]);\n    node.status(G.nodeStatus(false, buildingId + \":\" + deviceId + \":\" + swMsg.payload.on));\n}\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 550,
        "y": 720,
        "wires": [
            [
                "f83a792b.c61ba8",
                "85bcbd3f.c2c98"
            ],
            [
                "eae3b916.bf6748",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "f62f8d6a.61d68",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 310,
        "y": 720,
        "wires": [
            [
                "b7aec8b3.6b1b38",
                "637f0727.b63498"
            ],
            []
        ]
    },
    {
        "id": "cdedad1c.18c6e",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST device state",
        "url": "/BobbAPI/2.0/device/:accountId/:buildingId/:deviceId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "f62f8d6a.61d68"
            ]
        ]
    },
    {
        "id": "714c7747.8c9408",
        "type": "inject",
        "z": "a8359a32.45fb58",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "e778a0d4.9598d"
            ]
        ]
    },
    {
        "id": "1fa7738b.f0128c",
        "type": "debug",
        "z": "a8359a32.45fb58",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "e710f470.2faca8",
        "type": "http request",
        "z": "9556cd1.486d63",
        "name": "alexa",
        "method": "use",
        "ret": "txt",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "a483e849.fdc8e8"
            ]
        ]
    },
    {
        "id": "a483e849.fdc8e8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 980,
        "y": 600,
        "wires": []
    },
    {
        "id": "2713ab9a.258c24",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET device details",
        "url": "/BobbAPI/2.0/device/detail/:accountId/:buildingId/:deviceId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "d82350e9.84a15"
            ]
        ]
    },
    {
        "id": "d8790fa0.86d8c",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET devices count",
        "url": "/BobbAPI/2.0/devices/count/building/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1620,
        "wires": [
            [
                "486cb5b7.cc90ac"
            ]
        ]
    },
    {
        "id": "ab3777f6.887d48",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8043936a.bd29a",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET devices list",
        "url": "/BobbAPI/2.0/devices/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "5f9d0d34.260204"
            ]
        ]
    },
    {
        "id": "ce43b416.818f38",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET device status",
        "url": "/BobbAPI/2.0/device/status/:accountId/:buildingId/:deviceId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1540,
        "wires": [
            [
                "69ceabe6.e00134"
            ]
        ]
    },
    {
        "id": "213bc99b.e43a76",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "deviceStatus",
        "func": "let globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    var devStateRec = globals.getDeviceState(msg.accountId, msg.buildingId, msg.deviceId);\n    var currState = devStateRec.deviceState.state || \"off\";\n\n    msg.payload = (currState == \"on\" ? 1 : 0);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 1540,
        "wires": [
            [
                "49bb509c.fddd2",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "611b8a62.025c14",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getDevices",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\nconst {building, payload, accountId, buildingId} = msg;\n\nif (!msg.error) {\n    const filter = payload;\n\n    const deviceMatches = G.getDevices(accountId, buildingId)\n        .map(\n            deviceId => {\n                const device = building.devices[deviceId];\n                const room = device.roomId || device.room;\n                const fullState = D.getDeviceDataValues(accountId, buildingId, room, deviceId);\n                return G.isActuator(device) && Object.assign({deviceId}, device, fullState);\n            }\n        ).filter(device => device)\n        .sort(G.deviceDescriptionSortComparator);\n    \n    msg.payload = {\n        accountId,\n        buildingId,\n        commonName: building.commonName,\n        count: deviceMatches.length,\n        devices: deviceMatches\n    };\n\n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \": \" + deviceMatches.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "8d86fae2.8cc768",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "8d86fae2.8cc768",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 40,
        "wires": []
    },
    {
        "id": "2b07cecb.bb1c62",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "deviceDetails",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nlet globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    var devStateRec = globals.getDeviceState(msg.accountId, msg.buildingId, msg.deviceId);\n    // var currState = devStateRec.deviceState.state || \"off\";\n\n    msg.payload = msg.device;\n    msg.payload.state = devStateRec.deviceState;\n}\n\nreturn msg;\n",
        "outputs": "1",
        "noerr": 0,
        "x": 510,
        "y": 1280,
        "wires": [
            [
                "ab3777f6.887d48",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "49bb509c.fddd2",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ecd0295a.b9caa8",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getCount",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    const count = G.getDevices(msg.accountId, msg.buildingId).length;\n\n    msg.payload = count;\n    msg.statusCode = 200;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 1620,
        "wires": [
            [
                "d82f49da.c96b38",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "d82f49da.c96b38",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1620,
        "wires": []
    },
    {
        "id": "5f9d0d34.260204",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 40,
        "wires": [
            [
                "611b8a62.025c14"
            ],
            []
        ]
    },
    {
        "id": "d82350e9.84a15",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1280,
        "wires": [
            [
                "2b07cecb.bb1c62"
            ],
            []
        ]
    },
    {
        "id": "69ceabe6.e00134",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "213bc99b.e43a76"
            ],
            []
        ]
    },
    {
        "id": "486cb5b7.cc90ac",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1620,
        "wires": [
            [
                "ecd0295a.b9caa8"
            ],
            []
        ]
    },
    {
        "id": "836f7aca.b31208",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET groups list",
        "url": "/BobbAPI/2.0/groups/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "80dc4061.ed757"
            ]
        ]
    },
    {
        "id": "64ac69ba.06c3f8",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getGroups",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\nif (!msg.error) {\n    const building = msg.building;\n    const filter = msg.payload;\n\n    const groupMatches = G.getGroups(msg.accountId, msg.buildingId)\n        .map(groupId => Object.assign({groupId: groupId}, building.groups[groupId]))\n        .filter(group => group);\n    \n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: building.commonName,\n        count: groupMatches.length,\n        groups: groupMatches\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + groupMatches.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 440,
        "wires": [
            [
                "f69a2867.dc60e8",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "f69a2867.dc60e8",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 440,
        "wires": []
    },
    {
        "id": "80dc4061.ed757",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "64ac69ba.06c3f8"
            ],
            []
        ]
    },
    {
        "id": "f5d8c730.763c18",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET groups list",
        "url": "/BobbAPI/2.0/groups/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "80dc4061.ed757"
            ]
        ]
    },
    {
        "id": "a6986867.de1738",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET devices list",
        "url": "/BobbAPI/2.0/devices/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "5f9d0d34.260204"
            ]
        ]
    },
    {
        "id": "50f77f3f.44a65",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET scenes list",
        "url": "/BobbAPI/2.0/scenes/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 780,
        "wires": [
            [
                "bd0df9e1.e23918"
            ]
        ]
    },
    {
        "id": "c69f8c0d.8c486",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getScenes",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nlet globals = global.get(\"globals\");\nglobals.handleQuery(msg, node, {nostatus: true});\n\nif (!msg.error) {  // valid data\n    node.status();\n    \n    let sceneCount = Object.keys(msg.building.scenes).length;\n\n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: msg.building.commonName,\n        count: sceneCount,\n        scenes: msg.building.scenes\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(globals.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + sceneCount));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 780,
        "wires": [
            [
                "af16ba93.ba42b8",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "af16ba93.ba42b8",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "bd0df9e1.e23918",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "c69f8c0d.8c486"
            ],
            []
        ]
    },
    {
        "id": "ec6aa3b1.77e5f",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET scenes list",
        "url": "/BobbAPI/2.0/scenes/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 820,
        "wires": [
            [
                "bd0df9e1.e23918"
            ]
        ]
    },
    {
        "id": "8626d6e8.63b668",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET sequences list",
        "url": "/BobbAPI/2.0/sequences/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "154f3b.c3f190c5"
            ]
        ]
    },
    {
        "id": "9908ce0c.65c93",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getSequences",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nlet globals = global.get(\"globals\");\nglobals.handleQuery(msg, node, {nostatus: true});\n\nif (!msg.error) {  // valid data\n    node.status();\n    \n    let count = Object.keys(msg.building.sequences).length;\n\n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: msg.building.commonName,\n        count: count,\n        sequences: msg.building.sequences\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(globals.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + count));\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 980,
        "wires": [
            [
                "4b02d43c.14badc",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "4b02d43c.14badc",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 980,
        "wires": []
    },
    {
        "id": "154f3b.c3f190c5",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 980,
        "wires": [
            [
                "9908ce0c.65c93"
            ],
            []
        ]
    },
    {
        "id": "2ada791e.206966",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET sequences list",
        "url": "/BobbAPI/2.0/sequences/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "154f3b.c3f190c5"
            ]
        ]
    },
    {
        "id": "2030db2.2e6d124",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rules list",
        "url": "/BobbAPI/2.0/rules/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "78dae86e.a3ed68"
            ]
        ]
    },
    {
        "id": "a725e056.05782",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getRules",
        "func": "let globals = global.get(\"globals\");\nglobals.handleQuery(msg, node, {noStatus: true});\n\nif (!msg.error) {  // valid data\n    let ruleCount = Object.keys(msg.building.rules).length;\n    \n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: msg.building.commonName,\n        count: ruleCount,\n        rules: msg.building.rules\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(globals.nodeStatus(false, msg.accountId + \".\" + msg.building.commonName + \": \" + ruleCount));\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 1080,
        "wires": [
            [
                "c5e49237.3e062",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "c5e49237.3e062",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1080,
        "wires": []
    },
    {
        "id": "78dae86e.a3ed68",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "a725e056.05782"
            ],
            []
        ]
    },
    {
        "id": "bb49bc17.60157",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rules list",
        "url": "/BobbAPI/2.0/rules/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "78dae86e.a3ed68"
            ]
        ]
    },
    {
        "id": "92dc819d.3644e",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET group status",
        "url": "/BobbAPI/2.0/group/status/:accountId/:buildingId/:groupId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "da80fd4a.90974"
            ]
        ]
    },
    {
        "id": "7f51aca3.f27de4",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "groupStatus",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nconst G = global.get(\"globals\")\nconst D = global.get(\"dataEngine\")\n\nG.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    let allOn = true;\n    let anyOn = false;\n\n    const devices = msg.group.devices.map(deviceId => {\n        const on = (D.getDataNode(msg.accountId, msg.buildingId, [deviceId, \"on\"]) || {value: false}).value;\n        \n        allOn = allOn && on;\n        anyOn = anyOn || on;\n        \n        return {\n            deviceId,\n            on\n        };\n    });\n\n    msg.payload = {groupId: msg.groupId, anyOn, allOn, devices};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 600,
        "wires": [
            [
                "f40173e8.462ef",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "f40173e8.462ef",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "da80fd4a.90974",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 600,
        "wires": [
            [
                "7f51aca3.f27de4"
            ],
            []
        ]
    },
    {
        "id": "6ac790ee.50934",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET group status",
        "url": "/BobbAPI/2.0/group/status/:accountId/:buildingId/:groupId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "da80fd4a.90974"
            ]
        ]
    },
    {
        "id": "c5293f55.4deb",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET device status",
        "url": "/BobbAPI/2.0/device/status/:accountId/:buildingId/:deviceId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1580,
        "wires": [
            [
                "69ceabe6.e00134"
            ]
        ]
    },
    {
        "id": "e67104ea.08dc88",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET devices count",
        "url": "/BobbAPI/2.0/devices/count/building/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1660,
        "wires": [
            [
                "486cb5b7.cc90ac"
            ]
        ]
    },
    {
        "id": "f6c51d6f.33493",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET device details",
        "url": "/BobbAPI/2.0/device/detail/:accountId/:buildingId/:deviceId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "d82350e9.84a15"
            ]
        ]
    },
    {
        "id": "b4227f3e.0b706",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query scenes list",
        "url": "/BobbAPI/2.0/scenes/:accountId/:buildingId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "f8af9ee3.1fa8"
            ]
        ]
    },
    {
        "id": "cd1171.13704e9",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getFilteredScenes",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\nif (!msg.error) {\n    const building = msg.building;\n    const filter = msg.payload;\n\n    const sceneMatches = G.getScenes(msg.accountId, msg.buildingId)\n        .map(sceneId => G.objectMatches(building.scenes[sceneId], filter) ? Object.assign({sceneId: sceneId}, building.scenes[sceneId]) : null)\n        .filter(scene => scene);\n    \n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: building.commonName,\n        count: sceneMatches.length,\n        scenes: sceneMatches\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + sceneMatches.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 880,
        "wires": [
            [
                "8c0d6976.86f258",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "8c0d6976.86f258",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 730,
        "y": 880,
        "wires": []
    },
    {
        "id": "f8af9ee3.1fa8",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 880,
        "wires": [
            [
                "cd1171.13704e9"
            ],
            []
        ]
    },
    {
        "id": "8c2919b5.466018",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query scenes list",
        "url": "/BobbAPI/2.0/scenes/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 920,
        "wires": [
            [
                "f8af9ee3.1fa8"
            ]
        ]
    },
    {
        "id": "8e1a3ff8.99ad9",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query groups list",
        "url": "/BobbAPI/2.0/groups/:accountId/:buildingId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 680,
        "wires": [
            [
                "cdcc4ea7.25381"
            ]
        ]
    },
    {
        "id": "30a0efdd.85503",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getFilteredGroups",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\nif (!msg.error) {\n    const building = msg.building;\n    const filter = msg.payload;\n\n    const groupMatches = G.getGroups(msg.accountId, msg.buildingId)\n        .map(groupId => G.objectMatches(building.groups[groupId], filter) ? Object.assign({groupId: groupId}, building.groups[groupId]) : null)\n        .filter(group => group);\n    \n    msg.payload = {\n        accountId: msg.accountId,\n        buildingId: msg.buildingId,\n        commonName: building.commonName,\n        count: groupMatches.length,\n        groups: groupMatches\n    };\n    \n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + groupMatches.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 680,
        "wires": [
            [
                "65014e7a.69b3",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "65014e7a.69b3",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 680,
        "wires": []
    },
    {
        "id": "cdcc4ea7.25381",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 680,
        "wires": [
            [
                "30a0efdd.85503"
            ],
            []
        ]
    },
    {
        "id": "74f579f6.20bbd8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query groups list",
        "url": "/BobbAPI/2.0/groups/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "cdcc4ea7.25381"
            ]
        ]
    },
    {
        "id": "8c21a9c0.b33cf8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rule",
        "url": "/BobbAPI/2.0/rule/:accountId/:buildingId/:ruleId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1180,
        "wires": [
            [
                "522b7246.b7cebc"
            ]
        ]
    },
    {
        "id": "ad0264e0.dd9038",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getRule",
        "func": "let globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    msg.payload = msg.building.rules[msg.ruleId];\n    msg.statusCode = 200;\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 1180,
        "wires": [
            [
                "62d09c84.44fa54",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "62d09c84.44fa54",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1180,
        "wires": []
    },
    {
        "id": "522b7246.b7cebc",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "ad0264e0.dd9038"
            ],
            []
        ]
    },
    {
        "id": "e796e1cb.35634",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rule",
        "url": "/BobbAPI/2.0/rule/:accountId/:buildingId/:ruleId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1220,
        "wires": [
            [
                "522b7246.b7cebc"
            ]
        ]
    },
    {
        "id": "eacff8b3.b6fc98",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET group details",
        "url": "/BobbAPI/2.0/group/:accountId/:buildingId/:groupId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "38428810.599398"
            ]
        ]
    },
    {
        "id": "29064d48.c50c42",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 520,
        "wires": []
    },
    {
        "id": "7e61f683.60bc08",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "groupDetails",
        "func": "// 31-12-2017 Completely rewritten to use central helper functions\nlet globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    msg.payload = msg.group;\n}\n\nreturn msg;\n",
        "outputs": "1",
        "noerr": 0,
        "x": 510,
        "y": 520,
        "wires": [
            [
                "29064d48.c50c42",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "38428810.599398",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 520,
        "wires": [
            [
                "7e61f683.60bc08"
            ],
            []
        ]
    },
    {
        "id": "6b185fab.08e85",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET group details",
        "url": "/BobbAPI/2.0/group/:accountId/:buildingId/:groupId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "38428810.599398"
            ]
        ]
    },
    {
        "id": "c0edff3d.ff42e",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query devices",
        "url": "/BobbAPI/2.0/devices/:accountId/:buildingId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "80d323d7.6ef2c"
            ]
        ]
    },
    {
        "id": "a1f5fa6b.b97598",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query devices",
        "url": "/BobbAPI/2.0/devices/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "80d323d7.6ef2c"
            ]
        ]
    },
    {
        "id": "dfc57c04.64bb5",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getFilteredDeviceArray",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\ntry {\n    msg.payload = JSON.parse(msg.payload);\n} catch(e) {\n}\n\nif (!msg.error) {\n    const bare = msg.payload.bare;\n\n    const building = msg.building;\n    const filter = msg.payload.filter || {};\n    \n    const deviceMatches = G.getDevices(msg.accountId, msg.buildingId)\n        .filter(deviceId => G.isActuator(building.devices[deviceId]) && G.objectMatches(building.devices[deviceId], filter))\n        .map(deviceId => {\n            const device = building.devices[deviceId];\n            // const room = device.roomId || device.room;\n            const fullState = D.getDeviceDataValues(msg.accountId, msg.buildingId, null, deviceId);\n            return Object.assign({deviceId: deviceId}, device, {state: fullState});\n        })\n        .sort(G.deviceDescriptionSortComparator);\n    \n    if (bare) {\n        msg.payload = deviceMatches;\n    } else {\n        msg.payload = {\n            accountId: msg.accountId,\n            buildingId: msg.buildingId,\n            commonName: building.commonName,\n            count: deviceMatches.length,\n            devices: deviceMatches\n        };\n    }\n    \n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, msg.accountId + \".\" + msg.buildingId + \": \" + deviceMatches.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 120,
        "wires": [
            [
                "3b005416.98edec",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "3b005416.98edec",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 120,
        "wires": []
    },
    {
        "id": "80d323d7.6ef2c",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "dfc57c04.64bb5"
            ],
            []
        ]
    },
    {
        "id": "b623b91c.b003a8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET scene",
        "url": "/BobbAPI/2.0/scene/:accountId/:buildingId/:sceneId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1380,
        "wires": [
            [
                "a73d9ca8.7a3fe"
            ]
        ]
    },
    {
        "id": "f20cd971.3c22f8",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getScene",
        "func": "let globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    msg.payload = msg.building.scenes[msg.sceneId];\n    msg.statusCode = 200;\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 1380,
        "wires": [
            [
                "4ceb61a6.f7e8f",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "4ceb61a6.f7e8f",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a73d9ca8.7a3fe",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1380,
        "wires": [
            [
                "f20cd971.3c22f8"
            ],
            []
        ]
    },
    {
        "id": "929c006f.60fb7",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET scene",
        "url": "/BobbAPI/2.0/scene/:accountId/:buildingId/:sceneId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1420,
        "wires": [
            [
                "a73d9ca8.7a3fe"
            ]
        ]
    },
    {
        "id": "b8b745c3.88ee08",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET sequence",
        "url": "/BobbAPI/2.0/sequence/:accountId/:buildingId/:sequenceId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1460,
        "wires": [
            [
                "5190e0f.fe5722"
            ]
        ]
    },
    {
        "id": "c986a184.6b9b1",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getSequence",
        "func": "let globals = global.get(\"globals\");\nglobals.handleQuery(msg, node);\n\nif (!msg.error) {  // valid data\n    msg.payload = msg.building.sequences[msg.sequenceId];\n    msg.statusCode = 200;\n}\n    \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 1460,
        "wires": [
            [
                "c736cf67.fa625",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "c736cf67.fa625",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5190e0f.fe5722",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 1460,
        "wires": [
            [
                "c986a184.6b9b1"
            ],
            []
        ]
    },
    {
        "id": "8e94f7a7.c04488",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET sequence",
        "url": "/BobbAPI/2.0/sequence/:accountId/:buildingId/:sequenceId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1500,
        "wires": [
            [
                "5190e0f.fe5722"
            ]
        ]
    },
    {
        "id": "ee5611b6.36162",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "resp",
        "func": "if (msg.req)\n    return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 740,
        "wires": [
            [
                "26b0f2a1.963b7e"
            ]
        ]
    },
    {
        "id": "26b0f2a1.963b7e",
        "type": "http response",
        "z": "94771f7d.38037",
        "name": "",
        "x": 1510,
        "y": 740,
        "wires": []
    },
    {
        "id": "f515f5bb.efefa8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET room environment",
        "url": "/BobbAPI/2.0/environment/room/:accountId/:buildingId/:roomId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1700,
        "wires": [
            [
                "9dd4d695.43c378"
            ]
        ]
    },
    {
        "id": "3e3150ec.75217",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getRoomEnvironment",
        "func": "// 27-06-2017 brand new api endpoint\nconst G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nconst sensorData = G.getSensorData();\nif (sensorData[msg.accountId][msg.buildingId] && sensorData[msg.accountId][msg.buildingId][msg.roomId]) {\n    var results = {};\n    var roomData = sensorData[msg.accountId][msg.buildingId][msg.roomId];\n\n    for (var metric in roomData) {\n        results[metric] = roomData[metric].value;\n    }\n    \n    node.status({fill: \"green\", shape: \"dot\", text: msg.buildingId + \":\" + msg.roomId});\n    msg.payload = results;\n\n    return msg;\n} else { // building not found\n    node.status({fill: \"red\", shape: \"ring\", text: \"NO DATA\"});\n    msg.payload = {};\n    msg.statusCode = 200;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1700,
        "wires": [
            [
                "b96c964.4fcbd68",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "b96c964.4fcbd68",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 1700,
        "wires": []
    },
    {
        "id": "9dd4d695.43c378",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 330,
        "y": 1700,
        "wires": [
            [
                "3e3150ec.75217"
            ],
            []
        ]
    },
    {
        "id": "34a39ead.92cfc2",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET room environment",
        "url": "/BobbAPI/2.0/environment/room/:accountId/:buildingId/:roomId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1740,
        "wires": [
            [
                "9dd4d695.43c378"
            ]
        ]
    },
    {
        "id": "f9a8ca07.9376c8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET building environment",
        "url": "/BobbAPI/2.0/environment/building/:accountId/:buildingId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1780,
        "wires": [
            [
                "56da8c20.1599e4"
            ]
        ]
    },
    {
        "id": "30e81b9d.39f904",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getBuildingEnvironment",
        "func": "// 27-06-2017 brand new api endpoint\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId} = msg\n \nmsg.payload = mapObjectsToArray(D.getBuildingData(accountId, buildingId));\n\nreturn msg;\n\nfunction mapObjectsToArray(object) {\n    return Object.keys(object).map(key => Object.assign({key: key}, D.decomposeStoreKey(accountId, buildingId, key), object[key]));\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 1780,
        "wires": [
            [
                "74d28049.86b65",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "74d28049.86b65",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 1780,
        "wires": []
    },
    {
        "id": "56da8c20.1599e4",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 350,
        "y": 1780,
        "wires": [
            [
                "30e81b9d.39f904"
            ],
            []
        ]
    },
    {
        "id": "8aba6cea.41f01",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET building environment",
        "url": "/BobbAPI/2.0/environment/building/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "56da8c20.1599e4"
            ]
        ]
    },
    {
        "id": "aa7f915f.7c8e2",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 2180,
        "wires": []
    },
    {
        "id": "4c30735c.d3c99c",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getBuildings",
        "func": "const globals = global.get(\"globals\");\nglobals.extractParams(msg);\nconst {accountId} = msg;\nconst account = global.get(\"accounts\")[accountId];\n\nif (account) {  // valid data\n    node.status({});\n    \n    let buildings = [];\n    Object.keys(account.buildings).map(buildingId => buildings.push(Object.assign({buildingId: buildingId}, globals.deleteSubObjects(account.buildings[buildingId]))));\n\n    msg.payload = {\n        accountId: accountId,\n        commonName: account.commonName,\n        count: buildings.length,\n        buildings: buildings\n    };\n    \n    msg.statusCode = 200;\n    \n    node.status(globals.nodeStatus(false, accountId + \".\" + buildings.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 2180,
        "wires": [
            [
                "aa7f915f.7c8e2",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "5176456.6e26abc",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 2180,
        "wires": [
            [
                "4c30735c.d3c99c"
            ],
            []
        ]
    },
    {
        "id": "b180dff2.2b556",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET buildings list",
        "url": "/BobbAPI/2.0/buildings/:accountId/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2180,
        "wires": [
            [
                "5176456.6e26abc"
            ]
        ]
    },
    {
        "id": "915bd816.2b6ab8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET buildings list",
        "url": "/BobbAPI/2.0/buildings/:accountId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2220,
        "wires": [
            [
                "5176456.6e26abc"
            ]
        ]
    },
    {
        "id": "c2906232.2b1cb",
        "type": "http in",
        "z": "43f12961.0018d8",
        "name": "POST building in/out",
        "url": "/BobbAPI/2.0/geo/:accountId/:buildingId/:personId/:event/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "2d45c16c.643b0e",
                "1e5ad5d1.e3d62a"
            ]
        ]
    },
    {
        "id": "8253a678.bec6b8",
        "type": "http in",
        "z": "43f12961.0018d8",
        "name": "POST building in/out",
        "url": "/BobbAPI/2.0/geo/:accountId/:buildingId/:personId/:event",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "2d45c16c.643b0e",
                "1e5ad5d1.e3d62a"
            ]
        ]
    },
    {
        "id": "44a359b3.1d5838",
        "type": "json",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "pretty": false,
        "x": 250,
        "y": 120,
        "wires": [
            [
                "df5ba685.0b6e58",
                "b1729889.bdd7c8",
                "dbf7baa4.9829e8"
            ]
        ]
    },
    {
        "id": "bc740b8e.a3dec8",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "dataEngine",
        "func": "const _createStorage = store => {\n    G.iterateAllBuildings((accountId, buildingId) => {\n        _createIfNotExists(store, accountId, {});\n        _createIfNotExists(store[accountId], buildingId, {});\n    });\n};\n\nconst getStore = () => {\n    if (!global.get(\"store\")) global.set(\"store\", _createStorage({}));\n    \n    return global.get(\"store\");\n}\n\nconst [G = {}, server = {}, changeThresholds = {}, M = {}] = global.get([\"globals\", \"server\", \"changeThresholds\", \"metrics\"]);\n\nconst _mean = args => args.reduce((a, b) => a + b, 0) / args.length;\nconst _historyMean = args => args.reduce((a, b) => a + b.value, 0) / args.length;\nconst _round = (number, precision = 2) => {\n    const factor = Math.pow(10, precision);\n    return Math.round(number * factor) / factor;\n};\nconst _createIfNotExists = (object, property, value) => {\n    if (object && !object.hasOwnProperty(property)) object[property] = value;\n};\nconst _getEMA = (array, range) => array.reduce((prev, curr, i) => i ? prev.concat({ value: _round(2 * curr.value / (range + 1) + prev[prev.length - 1].value * (range - 1) / (range + 1), 2), timestamp: curr.timestamp }) : prev, [{ value: array[0].value, timestamp: array[0].timestamp }]);\nconst _meanRateOfChangePerMin = array => array.reduce((p, c, i) => i ? p + ((c.value - array[i - 1].value) / ((c.timestamp - array[i - 1].timestamp) / 60000)) : p, 0) / (array.length - 1);\nconst _range = (array, property) => array[array.length - 1][property] - array[0][property];\nconst _timespan = array => _range(array, \"timestamp\");\nconst _deltaPerHour = array => _range(array, \"value\") * (60 / (_timespan(array) / 60000));\nconst _ratePerHour = array => array.length * (60 / ((_timespan(array)) / 1000 / 60));\nconst _isNumber = x => typeof x === \"number\" || (![\"object\", \"boolean\"].includes(typeof x) && !Number.isNaN(parseFloat(x)) && Number.isNaN(Date.parse(x)) && x.match(/^[0-9]+([.|,][0-9]+)?$/) !== null);\n\nconst storeData = (props, timestamp, callback) => {\n    const S = getStore();\n    const now = timestamp || Date.now();\n    let events = [];\n\n    const extractFullKey = (key) => {\n        const parts = key.split(\".\");\n        return {\n            accountId: parts[0],\n            buildingId: parts[1],\n            key: parts.slice(2).join(\".\")\n        };\n    };\n\n    if (props.hasOwnProperty(\"key\") && (props.hasOwnProperty(\"value\") || (props.hasOwnProperty(\"values\") && typeof props.values == \"object\"))) {\n        let accountId, buildingId;\n        let key = props.key;\n        let insertionPoint;\n\n        if (props.hasOwnProperty(\"accountId\")) {\n            accountId = props.accountId;\n\n            if (props.hasOwnProperty(\"buildingId\")) {\n                buildingId = props.buildingId;\n            }\n        }\n\n        if ((buildingId && !accountId) || !(buildingId || accountId)) {\n            // Assume accountId & buildingId are to be extracted from key\n            let newBag = extractFullKey(props.key);\n\n            accountId = newBag.accountId;\n            buildingId = newBag.buildingId;\n            key = newBag.key; // the trimmed down key\n        }\n\n        if (S.hasOwnProperty(accountId)) { // account exists\n            insertionPoint = S[accountId]; // this is where we'll put the data\n\n            if (buildingId && S[accountId].hasOwnProperty(buildingId)) { // building exists\n                insertionPoint = S[accountId][buildingId]; // this is where we'll put the data\n            } else buildingId = null;\n        } else accountId = null;\n\n        if ((accountId && buildingId && key) || (accountId && key)) {\n            if (props.hasOwnProperty(\"values\") && typeof props.values == \"object\") { // multiple values to store\n                Object.keys(props.values).map(valKey => {\n                    let fqKey = [key, valKey].join(\".\");\n\n                    let options = {\n                        timestamp: now,\n                        metricMeta: props.metricMeta,\n                        callback: callback\n                    };\n                    events = [].concat(events, _ingestData(accountId, buildingId, insertionPoint, fqKey, props.values[valKey], options));\n                });\n\n                success = true;\n            } else if (props.hasOwnProperty(\"value\")) {\n                let options = {\n                    timestamp: now,\n                    metricMeta: props.metricMeta,\n                    callback: callback\n                };\n                events = _ingestData(accountId, buildingId, insertionPoint, key, props.value, options);\n            }\n        }\n    }\n\n    return events;\n};\n\nconst _ingestData = (accountId, buildingId, object, key, value, options) => {\n    let keyParts = key.split(\".\");\n    let metricId = keyParts[keyParts.length - 1];\n    let metricMeta = options.metricMeta || M[metricId] || M.default || {};\n    let events = [];\n\n    if (value !== undefined) {\n        while (metricMeta.map) {\n            keyParts[keyParts.length - 1] = metricMeta.map;\n            metricId = metricMeta.map;\n            metricMeta = M[metricId] || M.default || {};\n            key = keyParts.join(\".\");\n        }\n\n        let isNumericData = _isNumber(value) || (![\"boolean\", \"object\"].includes(typeof value) && !metricMeta.noStatistics);\n\n        _createIfNotExists(object, key, {});\n\n        if (isNumericData) {\n            const {decimals = 2} = metricMeta;\n            if (!metricMeta.noRounding) value = _round(value, decimals);\n\n            if (!metricMeta.noEvents) {\n                _createIfNotExists(object[key], \"eventValues\", {\n                    value: null,\n                    mean: null,\n                    max: null,\n                    min: null\n                });\n            }\n        }\n\n        if (!metricMeta.noEvents && ((!isNumericData && object[key].value != value) || (isNumericData && (object[key].eventValues.value === null || Math.abs(value - object[key].eventValues.value) >= (changeThresholds[metricId] || changeThresholds.any))))) {\n            events.push(_generateEvent(accountId, buildingId, value, object[key], key, \"changed\"));\n            if (isNumericData) object[key].eventValues.value = value;\n        }\n\n        if (isNumericData && !metricMeta.noEvents) {\n            if (value === 0 && object[key].value !== 0) {\n                events.push(_generateEvent(accountId, buildingId, value, object[key], key, \"zero\"));\n            } else if (value !== 0 && object[key].value === 0) {\n                events.push(_generateEvent(accountId, buildingId, value, object[key], key, \"nonzero\"));\n            }\n        }\n        \n        if (isNumericData && !metricMeta.noStatistics) {\n            object[key].delta = value - _round(object[key].value, 2);\n            \n            const oldMax = object[key].maxAll || value;\n            const newMax = Math.max(oldMax, value);\n            object[key].maxAll = newMax;\n            if (!metricMeta.noEvents && newMax !== oldMax)\n                events.push(_generateEvent(accountId, buildingId, newMax, object[key], key, \"maxAll\", \"changed\"));\n\n            const oldMin = object[key].minAll || value;\n            const newMin = Math.min(oldMin, value);\n            object[key].minAll = newMin;\n            if (!metricMeta.noEvents && newMin !== oldMin)\n                events.push(_generateEvent(accountId, buildingId, newMin, object[key], key, \"minAll\", \"changed\"));\n        }\n            \n        object[key].previousValue = object[key].value;\n        object[key].value = value;\n        // object[key].numeric = isNumericData\n\n        events.push(_generateEvent(accountId, buildingId, value, object[key], key, \"data\"));\n\n        if (options.callback && typeof options.callback === \"function\")\n            options.callback(key, value, options.timestamp)\n\n        if (!metricMeta.noTimestamp) {\n            object[key].previousTimestamp = object[key].timestamp;\n            object[key].timestamp = options.timestamp;\n        }\n\n        if (!metricMeta.noHistory) {\n            _createIfNotExists(object[key], \"history\", []);\n            _addHistory(object[key].history, value, options.timestamp);\n\n            object[key].rate = _round(_ratePerHour(object[key].history), 2);\n            object[key].timespan = _timespan(object[key].history);\n\n            if (!metricMeta.noStatistics && isNumericData) {\n                let tempVal = _round(_historyMean(object[key].history), metricMeta.decimals);\n                if (!metricMeta.noEvents && (object[key].eventValues.mean === null || Math.abs(tempVal - object[key].eventValues.mean) >= (changeThresholds[metricId] || changeThresholds.any))) {\n                    events.push(_generateEvent(accountId, buildingId, tempVal, object[key], key, \"mean\", \"changed\"));\n                    object[key].eventValues.mean = tempVal;\n                }\n                object[key].mean = tempVal;\n\n                tempVal = Math.max(...object[key].history.map(ele => ele.value));\n                if (!metricMeta.noEvents && (object[key].eventValues.max === null || Math.abs(tempVal - object[key].eventValues.max) >= (changeThresholds[metricId] || changeThresholds.any))) {\n                    events.push(_generateEvent(accountId, buildingId, tempVal, object[key], key, \"max\", \"changed\"));\n                    object[key].eventValues.max = tempVal;\n                }\n                object[key].max = tempVal;\n\n                tempVal = Math.min(...object[key].history.map(ele => ele.value));\n                if (!metricMeta.noEvents && (object[key].eventValues.min === null || Math.abs(tempVal - object[key].eventValues.min) >= (changeThresholds[metricId] || changeThresholds.any))) {\n                    events.push(_generateEvent(accountId, buildingId, tempVal, object[key], key, \"min\", \"changed\"));\n                    object[key].eventValues.min = tempVal;\n                }\n                object[key].min = tempVal;\n\n                if (!metricMeta.noEvents) {\n                    object[key].roc = _round(_meanRateOfChangePerMin(object[key].history), 2);\n                    object[key].cph = _round(_deltaPerHour(object[key].history), 2);\n                    object[key].ma3 = _getEMA(object[key].history, 3);\n                    object[key].ma6 = _getEMA(object[key].history, 6);\n                }\n            }\n        }\n\n        if (metricMeta.convert && !options.noRecurse) {\n            const _arithmetic = global.get(\"arithmetic\");\n\n            metricMeta.convert.map(conversion => {\n                const toMetric = Object.keys(conversion)[0];\n                const newKey = key.replace(metricId, toMetric);\n                const formula = Object.values(conversion)[0].replace(metricId, value);\n                const converted = _arithmetic(formula);\n                events = [].concat(events, _ingestData(accountId, buildingId, object, newKey, converted, { timestamp: options.timestamp, noRecurse: true }));\n            });\n        }\n    }\n    \n    return events;\n};\n\n\nconst store = () => getStore();\n    \nconst loadStorage = () => {\n    loadFromBlob()\n        .then(results => {\n            const S = JSON.parse(results);\n            global.set(\"store\", S);\n            node.log(\"dataEngine loaded from blob storage\")\n            return S;\n        })\n        .catch(e => node.error(e));\n};\n\nconst _filterPropertiesByPrefix = (object, prefix) =>\n    Object.keys(object)\n    .reduce((filtered, key) => {\n        if (key.startsWith(prefix))\n            filtered[key] = object[key];\n\n        return filtered;\n    }, {});\n\nconst getAccountData = accountId => {\n    const S = getStore();\n    return (accountId && S.hasOwnProperty(accountId)) ? S[accountId] : undefined;\n};\n\nconst getBuildingData = (accountId, buildingId) => {\n    const S = getStore();\n    if (accountId && S.hasOwnProperty(accountId) && buildingId && S[accountId].hasOwnProperty(buildingId)) {\n        return S[accountId][buildingId];\n    } else\n        return undefined;\n};\n\nconst getRoomData = (accountId, buildingId, roomId) => {\n    const S = getStore();\n    if (accountId && S.hasOwnProperty(accountId) && buildingId && S[accountId].hasOwnProperty(buildingId) && roomId) {\n        let keyPrefix = [roomId, \"\"].join(\".\");\n        return _filterPropertiesByPrefix(S[accountId][buildingId], keyPrefix);\n    } else\n        return undefined;\n};\n\nconst getBuildingMetricData = (accountId, buildingId, metricId) => {\n    const S = getStore();\n    if (accountId && S.hasOwnProperty(accountId) && buildingId && S[accountId].hasOwnProperty(buildingId) && metricId) {\n        let keySuffix = [\"\", metricId].join(\".\");\n        return _filterPropertiesBySuffix(S[accountId][buildingId], keySuffix);\n    } else\n        return undefined;\n};\n\nconst getRoomMetricData = (accountId, buildingId, roomId, metricId) => {\n    const S = getStore();\n    if (accountId && S.hasOwnProperty(accountId) && buildingId && S[accountId].hasOwnProperty(buildingId) && roomId && metricId) {\n        const keyPrefix = [roomId, \"\"].join(\".\");\n        const keySuffix = [\"\", metricId].join(\".\");\n        return _filterPropertiesByPrefixAndSuffix(S[accountId][buildingId], keyPrefix, keySuffix);\n    } else\n        return undefined;\n};\n\nconst getRoomMetricValues = (accountId, buildingId, roomId, metricId) => {\n    const data = getRoomMetricData(accountId, buildingId, roomId, metricId);\n\n    if (data)\n        return Object.keys(data).map(key => data[key].value);\n    else\n        return data;\n};\n\nconst getRoomMetricMean = (accountId, buildingId, roomId, metricId) => _mean(getRoomMetricValues(accountId, buildingId, roomId, metricId));\n\nconst getDeviceData = (accountId, buildingId, roomId, deviceId) => {\n    const buildingData = _filterPropertiesByPrefix(getBuildingData(accountId, buildingId), [roomId, deviceId, \"\"].join(\".\"));\n    return Object.keys(buildingData).map(key => Object.assign({key: key}, buildingData[key]));\n};\n\nconst getDeviceDataValues = (accountId, buildingId, roomId, deviceId) => {\n    const buildingData = _filterPropertiesByPrefix(getBuildingData(accountId, buildingId), [deviceId, \"\"].join(\".\"));\n    return Object.assign({}, ...Object.keys(buildingData).map(key => {\n        const newObj = {};\n        const parts = key.split(\".\");\n        const metric = parts[parts.length - 1];\n        newObj[metric] = buildingData[key].value;\n        if (metric == \"on\" && buildingData[key].timestamp) newObj.timestamp = buildingData[key].timestamp;\n        return newObj;\n    }));\n};\n    \nconst _filterPropertiesBySuffix = (object, suffix) =>\n    Object.keys(object)\n    .reduce((filtered, key) => {\n        if (key.endsWith(suffix))\n            filtered[key] = object[key];\n\n        return filtered;\n    }, {});\n\nconst _filterPropertiesByPrefixAndSuffix = (object, prefix, suffix) =>\n    Object.keys(object)\n    .reduce((filtered, key) => {\n        if (key.startsWith(prefix) && key.endsWith(suffix))\n            filtered[key] = object[key];\n\n        return filtered;\n    }, {});\n\nconst _getAccountOrBuilding = (accountId, buildingId) => {\n    const S = getStore();\n    if (accountId && buildingId)\n        if (S && S[accountId] && S[accountId][buildingId])\n            return S[accountId][buildingId];\n        else return undefined;\n    else if (accountId)\n        if (S && S[accountId])\n            return S[accountId];\n        else return undefined;\n    else return undefined;\n};\n\nconst getDataNode = (accountId, buildingId, key) => {\n    const object = _getAccountOrBuilding(accountId, buildingId);\n\n    if (object) {\n        if (Array.isArray(key)) key = key.join(\".\");\n\n        if (object[key])\n            return object[key];\n        else\n            return undefined;\n    }\n};\n\nconst getFilteredData = (accountId, buildingId, keyParts) => {\n    const S = getStore();\n    let object;\n\n    if (accountId && buildingId) {\n        try {\n            object = S[accountId][buildingId];\n        } catch (e) {\n            return undefined;\n        }\n    } else if (accountId) {\n        try {\n            object = S[accountId];\n        } catch (e) {\n            return undefined;\n        }\n    }\n\n    return getFilteredObjectData(object, keyParts);\n};\n\nconst getFilteredObjectData = (object, keyParts) => {\n    keyParts.push(\"\");\n    const keyPrefix = keyParts.join(\".\");\n    return _filterPropertiesByPrefix(object, keyPrefix);\n};\n\nconst _removeExpiredHistory = (history, now) => {\n    while (history.length > 0 && (now || Date.now()) - history[0].timestamp > server.defaults.maxHistoryAgeMillis) {\n        history.shift();\n    }\n};\n\nconst _addHistory = (history, value, timestamp) => {\n    _removeExpiredHistory(history, timestamp);\n\n    if (value !== null) {\n        history.push({\n            value: value,\n            timestamp: timestamp || Date.now()\n        });\n    }\n};\n\nconst _generateEvent = (accountId, buildingId, value, data, ...parts) => {\n    let event = {\n        accountId: accountId,\n        buildingId: buildingId,\n        event: parts.join(\".\"),\n        value: value,\n        data: data\n    };\n\n    // G.rulesEngine(event);\n    return event;\n};\n    \nconst renameKey = (accountId, buildingId, oldKey, newKey) => {\n    const S = getStore();\n    if (S && S[accountId] && S[accountId][buildingId]) {\n        G.renameKey(S[accountId][buildingId], oldKey, newKey);\n    } else {\n        node.warn(\"dataEngine.renameKey: no such object\");\n    }\n};\n\nconst decomposeStoreKey = (accountId, buildingId, key) => {\n    const returnObj = {};\n    const parts = key.split(\".\");\n    const partMap = (parts.length === 3) ? {roomIdx: 0, deviceIdx: 1, metricIdx: 2} : {roomIdx: 0, metricIdx: 1};\n    const building = G.getBuilding(accountId, buildingId);\n\n    const roomId = parts[partMap.roomIdx];\n    returnObj.room = (building && building.rooms && building.rooms[roomId] && building.rooms[roomId].label) ? building.rooms[roomId].label : G.toTitleCase(roomId);\n    \n    if (partMap.deviceIdx) {\n        const deviceId = parts[partMap.roomIdx] + \".\" + parts[partMap.deviceIdx];\n        returnObj.deviceName = (building && building.devices && building.devices[deviceId] && building.devices[deviceId].description) ? building.devices[deviceId].description : G.toTitleCase(deviceId);\n    }\n    \n    const metricId = parts[partMap.metricIdx];\n    if (M && M[metricId]) {\n        returnObj.metricName = M[metricId].label ? M[metricId].label : G.toTitleCase(metricId);\n        returnObj.unitName = M[metricId].unit ? M[metricId].unit : null;\n    }\n    return returnObj;\n};\n\nconst calculateFact = (accountId, buildingId, fact) => {\n    if (fact.startsWith(\"time.\")) {\n        const moment = global.get(\"moment\");\n        const {timezone, lat, lon} = G.getBuilding(accountId, buildingId);\n        \n        switch (fact) {\n            case \"time.now\":\n                return new Date();\n        \n            case \"time.localTime\":\n                return moment().tz(timezone).format();\n        \n            case \"time.dow\":\n                return moment().tz(timezone).format(\"dddd\");\n        \n            case \"time.seconds\":\n                return (new Date()).getSeconds();\n        \n            case \"time.minutes\":\n                return (new Date()).getMinutes();\n    \n            case \"time.weekend\":\n                return [\"Saturday\", \"Sunday\"].includes(moment().tz(timezone).format(\"dddd\"));\n    \n            case \"time.weekday\":\n                return ![\"Saturday\", \"Sunday\"].includes(moment().tz(timezone).format(\"dddd\"));\n                \n            default:\n                const sunTimes = G.easySuncalc(lat, lon).times;\n                const [lastPart] = fact.split(\".\").reverse();\n                const propName = lastPart + \".value\";\n\n                if (sunTimes.hasOwnProperty(lastPart))\n                    return sunTimes[lastPart];\n        }\n    }\n    \n    return undefined;\n};\n    \nconst getFactValues = (accountId, buildingId, rule, eventData) => {\n    const factIds = rule.facts && Array.isArray(rule.facts) ? rule.facts : [];\n    return factIds.reduce((facts, factId) => {\n        const val = factId.startsWith(\"eventData\") ? eventData : getFactValue(accountId, buildingId, factId);\n        if (val === null) node.warn(`Null value for ${factId} used in rule`);\n        facts[factId] = val;\n        return facts;\n    }, {})\n};\n\nconst getFactValue = (accountId, buildingId, fact) => {\n    const parts = fact.split(\".\");\n    const lastPart = parts[parts.length - 1];\n\n    let variable = \"value\";\n    if ([\"previousValue\", \"value\", \"timestamp\", \"previousTimestamp\"].includes(lastPart)) {\n        variable = lastPart;\n        parts.splice(-1);\n    }\n\n    const factRoot = parts.join(\".\");\n\n    let value = calculateFact(\n        accountId,\n        buildingId,\n        factRoot\n    );\n\n    if (value === undefined) {\n    // node.warn({a: accountId, b: buildingId, f: fact, v: value, factRoot});\n        const values = getDataNode(\n            accountId,\n            buildingId,\n            factRoot\n        );\n        if (values) value = values[variable];\n    }\n\n    return value === undefined ? null : value;\n};\n\nconst saveToBlob = () => {\n    const S = getStore();\n    const blobContainer = \"bobb-data-engine\"\n    const accountSegment = server.accountSegment   // account segments allow a server to handle buildings for just a subset of accounts, e.g. UK South\n    const blobSegment = accountSegment ? accountSegment + \"/\" : \"\"\n    const blobName = \"bobbDataEngine.json\"\n    \n    G.createBlobContainer(blobContainer)\n        .then(result => {\n            node.log(\"dataEngine persisted to blob storage\")\n            return G.saveBlob(blobContainer, blobSegment + blobName, JSON.stringify(S))\n        })\n        .then(result => node.log(result))\n        .catch(e => node.error(e))\n};\n    \nconst loadFromBlob = () => {\n    const blobContainer = \"bobb-data-engine\"\n    const accountSegment = server.accountSegment   // account segments allow a server to handle buildings for just a subset of accounts, e.g. UK South\n    const blobSegment = accountSegment ? accountSegment + \"/\" : \"\"\n    const blobName = \"bobbDataEngine.json\"\n\n    return G.loadBlob(blobContainer, blobSegment + blobName)\n};\n\nconst deleteInvalidData = () => {\n    const S = getStore();\n    Object.keys(S).map(accountId => \n        Object.keys(S[accountId]).map(buildingId => {\n            Object.keys(S[accountId][buildingId]).filter(key => key.includes(\"/\")).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n            Object.keys(S[accountId][buildingId]).filter(key => key.includes([accountId, buildingId].join(\".\"))).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n            Object.keys(S[accountId][buildingId]).filter(key => key.match(/presence\\.people\\.\\d{1,3}/) !== null).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n            Object.keys(S[accountId][buildingId]).filter(key => (key === \"presence..present\" || key.match(/^(\\w+)\\.+\\1\\b/) !== null || key.startsWith(\"test.sensor\") || key.endsWith(\".state\") || key.endsWith(\".unknown\") || key.endsWith(\".offTime\") || key.endsWith(\".timestamp\"))).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n            Object.keys(S[accountId][buildingId]).filter(key => key.endsWith(\".icon\")).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n            Object.keys(S[accountId][buildingId]).filter(key => key.includes(\".co2sensor.\")).map(key => {\n                node.log(`Deleting key ${key} from ${accountId}.${buildingId}`)\n                delete S[accountId][buildingId][key]\n            })\n        })\n    )\n};\n\nconst dataEngine = {\n    getStore,\n    storeData,\n    store,\n    loadStorage,\n    getAccountData,\n    getBuildingData,\n    getRoomData,\n    getBuildingMetricData,\n    getRoomMetricData,\n    getRoomMetricValues,\n    getRoomMetricMean,\n    getDeviceData,\n    getDeviceDataValues,\n    getDataNode,\n    getFilteredData,\n    getFilteredObjectData,\n    deleteInvalidData,\n    saveToBlob,\n    loadFromBlob,\n    calculateFact,\n    decomposeStoreKey,\n    getFactValue,\n    getFactValues,\n    renameKey\n};\n\n// G.bindAll(dataEngine);\n\ndataEngine.loadStorage();\n\nglobal.set([\"dataEngine\"], [dataEngine]);\n\nnode.status(G.nodeStatus(false, G.shortestDateTime()));\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 180,
        "wires": [
            [
                "ff3f21a1.bdaa4"
            ]
        ]
    },
    {
        "id": "ff3f21a1.bdaa4",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1110,
        "y": 180,
        "wires": []
    },
    {
        "id": "468e5b7b.cb0504",
        "type": "function",
        "z": "d7e6850e.758d08",
        "name": "process",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nconst compassDirection = angle => [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"][Math.floor((angle / 22.5) + 0.5) % 16];\n\nconst {payload: {\n    visibility, \n    main: {temp, pressure, humidity, temp_min, temp_max, description}, \n    wind: {speed, deg}, clouds: {all},\n    rain: {\"1h\": rain1h = null, \"3h\": rain3h = null} = {},\n    snow: {\"1h\": snow1h = null, \"3h\": snow3h = null} = {}\n}, accountId, buildingId} = msg;\nconst winddir = compassDirection(deg);\n\nconst base = {\n    accountId, \n    buildingId,\n    source: \"weather\"\n};\n\nD.storeData({...base, key: \"weather.current.description\", value: description});\nD.storeData({...base, key: \"weather.current.temperature\", value: temp});\nD.storeData({...base, key: \"weather.current.humidity\", value: humidity});\nD.storeData({...base, key: \"weather.current.pressure\", value: pressure});\nD.storeData({...base, key: \"weather.current.windspeed\", value: speed});\nD.storeData({...base, key: \"weather.current.winddir\", value: winddir});\nD.storeData({...base, key: \"weather.current.cloud\", value: all});\nD.storeData({...base, key: \"weather.current.rain.1h\", value: rain1h});\nD.storeData({...base, key: \"weather.current.rain.3h\", value: rain3h});\nD.storeData({...base, key: \"weather.current.snow.1h\", value: snow1h});\nD.storeData({...base, key: \"weather.current.snow.3h\", value: snow3h});\nD.storeData({...base, key: \"weather.current.temperature.max\", value: temp_max});\nD.storeData({...base, key: \"weather.current.temperature.min\", value: temp_min});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 80,
        "wires": [
            [
                "f38d15cd.e89a08"
            ]
        ]
    },
    {
        "id": "74e4eae1.80c534",
        "type": "debug",
        "z": "998225a2.49fc08",
        "name": "HOMEKITCMD",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "64024545.37e2bc",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 920,
        "y": 520,
        "wires": [
            [
                "bc427b5a.197078"
            ]
        ]
    },
    {
        "id": "bc427b5a.197078",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "const a = {\n    \"1\": {\n        word: \"one\"\n    },\n    \"2\": {\n        word: \"two\"\n    },\n    \"3\": {\n        word: \"three\"\n    },\n    \"4\": {\n        word: \"four\"\n    }\n};\n\nglobal.set(\"a\", a);\n\na[\"1\"].touched = true;\n\nconst b = global.get(\"a\");\n\nb[\"5\"] = {\n    word: \"five\"\n};\n\nmsg.payload = global.get(\"a\");\n\nconst p = {\n    _a: a,\n    total: function() { return Object.keys(this._a).reduce((s, x) => s+Number(x), 0); }\n};\n\nglobal.set(\"p\", p);\n\nconst q = global.get(\"p\");\nmsg.payload.total = q.total();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 520,
        "wires": [
            [
                "e97c7d79.7f54f"
            ]
        ]
    },
    {
        "id": "e97c7d79.7f54f",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1240,
        "y": 520,
        "wires": []
    },
    {
        "id": "582d6733.d2f4d8",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "setDeviceStateOld",
        "links": [],
        "x": 375,
        "y": 760,
        "wires": [
            [
                "b7aec8b3.6b1b38",
                "637f0727.b63498"
            ]
        ]
    },
    {
        "id": "adef34f7.231798",
        "type": "function",
        "z": "16c1aedb.4b0961",
        "name": "storeTelemetry",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nconst parts = msg.topic.split(\"/\");\n\nconst accountId = parts[0];\nconst buildingId = parts[1];\nconst lastPart = parts[parts.length - 1];\n\nconst pay = msg.payload;\n\n// 5 part topic for sonoff5 = account/building/sonoff/deviceId/STATE - need to derive room from device def\nswitch (lastPart) {\n    case \"SENSOR\":\n        const deviceId = parts[3];\n\n        if (deviceId) {\n            node.send([{\n                topic: [accountId, buildingId, deviceId, \"power\"].join(\".\"),\n                payload: msg.payload.ENERGY,\n                source: \"sonoff\"\n            }, null]);\n        } else {\n            node.warn(`no deviceId in ${topic}/${msg}`)\n        }\n        break;\n        \n    case \"STATE\": {\n        let deviceTopic = parts[3];\n    \n        if (pay.hasOwnProperty(\"POWER1\") || pay.hasOwnProperty(\"POWER2\")) { // sonoff duals\n            for (let i = 1; i <= 2; i++) {\n                const deviceId = findDeviceByTopicAndChannel(deviceTopic, i);\n                const itsOn = (pay[\"POWER\" + i] === \"ON\");\n                \n                if (deviceId)\n                    node.send([{\n                        topic: [accountId, buildingId, deviceId, \"on\"].join(\".\"),\n                        payload: itsOn,\n                        source: \"sonoff\"\n                    },\n                    null]);\n                else\n                    node.warn(`Couldn't locate device for topic ${deviceTopic} channel ${i}`);\n            }\n        } else {\n            const deviceId = parts[3];\n            const device = G.getDevice(accountId, buildingId, deviceId);\n            const itsOn = (pay.POWER === \"ON\");\n\n            if (device) {\n                node.send([{\n                    topic: [accountId, buildingId, deviceId, \"on\"].join(\".\"),\n                    payload: itsOn,\n                    source: \"sonoff\"\n                }, null]);\n            }\n        }\n        break;\n    }\n    \n    case \"RESULT\": {\n        const powerProp = Object.keys(pay)[0];\n        const itsOn = (pay[powerProp] == \"ON\");\n        const channel = Number(powerProp.substr(-1, 1));\n        let deviceId = parts[3];\n        \n        if (channel > 0) { // sonoff duals\n            deviceId = findDeviceByTopicAndChannel(deviceId, channel);\n        }\n\n        const device = G.getDevice(accountId, buildingId, deviceId);\n    \n        if (device) {\n            node.send([{\n                topic: [accountId, buildingId, deviceId, \"on\"].join(\".\"),\n                payload: itsOn,\n                source: \"sonoff\"\n            }, null]);\n        }\n        break;\n    }\n        \n    // ask for IP address\n    node.send([null, {\n        topic: parts.slice(null, -1).concat(\"IPAddress1\").join(\"/\"),\n        payload: \"\"\n    }]);\n}\n\n\nfunction findDeviceByTopicAndChannel(topic, channel) {\n    let devices = G.getBuilding(accountId, buildingId).devices;\n    \n    for (var dId in devices) {\n        let device = devices[dId];\n        \n        if (device.channel && device.topic && device.channel == channel && device.topic == topic) {\n            return dId;\n        }\n    }\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "ff36996b.8eaa88",
                "26ac3d93.8024f2"
            ],
            [
                "c952f627.773e28",
                "b5cc33a8.da08"
            ]
        ],
        "outputLabels": [
            "data-out",
            "mqtt"
        ]
    },
    {
        "id": "c037561b.d73db8",
        "type": "json",
        "z": "16c1aedb.4b0961",
        "name": "",
        "pretty": false,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "b176c22d.40683",
                "98b48bd9.f5f2e8"
            ]
        ]
    },
    {
        "id": "5c8b748a.952d8c",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 240,
        "wires": []
    },
    {
        "id": "c952f627.773e28",
        "type": "mqtt out",
        "z": "16c1aedb.4b0961",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "ff36996b.8eaa88",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "778838db.a75948",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST building environment",
        "url": "/BobbAPI/2.0/environment/building/:accountId/:buildingId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2380,
        "wires": [
            [
                "3ea36b06.ac9e24"
            ]
        ]
    },
    {
        "id": "5cf45bb5.3985f4",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getBuildingEnvironment",
        "func": "// 27-06-2017 brand new api endpoint\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId} = msg;\n\ntry {\n    msg.payload = JSON.parse(msg.payload);\n} catch (e) {}\n\nif (accountId && buildingId) {\n    const {room, metric} = msg.payload\n    \n    if (room && metric) {\n        msg.payload = mapObjectsToArray(D.getRoomMetricData(accountId, buildingId, room, metric));\n    } else if (room) {\n        msg.payload = mapObjectsToArray(D.getRoomData(accountId, buildingId, room));\n    } else if (metric) {\n        msg.payload = mapObjectsToArray(D.getBuildingMetricData(accountId, buildingId, metric));\n    } else {\n        msg.payload = mapObjectsToArray(D.getBuildingData(accountId, buildingId));\n    }\n\n    return msg;\n} else {\n    node.warn(\"No accountId or buildingId specified\");\n}\n\nfunction mapObjectsToArray(object) {\n    return Object.keys(object).map(key => Object.assign({key: key}, D.decomposeStoreKey(accountId, buildingId, key), object[key]));\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 2360,
        "wires": [
            [
                "202bd49c.0232bc",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "202bd49c.0232bc",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 790,
        "y": 2380,
        "wires": []
    },
    {
        "id": "3ea36b06.ac9e24",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 370,
        "y": 2380,
        "wires": [
            [
                "5cf45bb5.3985f4",
                "c91e5ecb.a47fd"
            ],
            []
        ]
    },
    {
        "id": "efb2cd5e.eb8e6",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST building environment",
        "url": "/BobbAPI/2.0/environment/building/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2420,
        "wires": [
            [
                "3ea36b06.ac9e24"
            ]
        ]
    },
    {
        "id": "29058aca.a0be76",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 750,
        "y": 2260,
        "wires": []
    },
    {
        "id": "b69dedb1.df7bc",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getFilteredBuildings",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nG.extractParams(msg);\nconst {accountId, payload: {bare}} = msg;\nconst account = global.get(\"accounts\")[accountId];\n\nif (account) {  // valid data\n    node.status({});\n    \n    delete msg.payload.bare;\n\n    // const buildings = Object.keys(account.buildings).map(buildingId => Object.assign(\n    //     G.shallowCopy(account.buildings[buildingId]), \n    //     {present: D.getDataNode(accountId, buildingId, \"presence.people\").value}\n    // ));\n    const buildings = Object.keys(account.buildings)\n        .map(buildingId => G.shallowCopy(account.buildings[buildingId])\n    );\n\n    if (bare)\n        msg.payload = buildings;\n    else\n        msg.payload = {\n            accountId,\n            commonName: account.commonName,\n            count: buildings.length,\n            buildings\n        };\n    \n    msg.statusCode = 200;\n    \n    node.status(G.nodeStatus(false, accountId + \".\" + buildings.length));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 2260,
        "wires": [
            [
                "29058aca.a0be76",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "cc3d447a.9bfa58",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 2260,
        "wires": [
            [
                "b69dedb1.df7bc"
            ],
            []
        ]
    },
    {
        "id": "915d26ed.f76cf8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST buildings list",
        "url": "/BobbAPI/2.0/buildings/:accountId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2260,
        "wires": [
            [
                "cc3d447a.9bfa58",
                "9d716e7.1e6959"
            ]
        ]
    },
    {
        "id": "7f287c50.55ebb4",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST buildings list",
        "url": "/BobbAPI/2.0/buildings/:accountId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2300,
        "wires": [
            [
                "cc3d447a.9bfa58",
                "9d716e7.1e6959"
            ]
        ]
    },
    {
        "id": "e83ef176.f424f",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 270,
        "y": 160,
        "wires": []
    },
    {
        "id": "df0b2af3.4cac28",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 120,
        "y": 40,
        "wires": [
            [
                "773623db.20540c"
            ]
        ]
    },
    {
        "id": "773623db.20540c",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "generators",
        "func": "const serialNum = function*(seed) {\n  let index = seed;\n  while(true)\n    yield index++;\n};\n\nconst serialNums = serialNum(34245423);\n\nfor (i = 1; i <= 10; i++)\n    node.send({payload: serialNums.next().value});\n    ",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 40,
        "wires": [
            [
                "86da56a4.8de148"
            ]
        ]
    },
    {
        "id": "86da56a4.8de148",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "fb6aef6.f2a151",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST user query",
        "url": "/BobbAPI/2.0/user/accounts/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2540,
        "wires": [
            [
                "1045b379.93ce6d"
            ]
        ]
    },
    {
        "id": "8ddc5cf1.d707b",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getUser",
        "func": "const G = global.get(\"globals\");\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\n\nconst email = msg.payload.email;\n\nif (email) {\n    const job = queryTable(email);\n    \n    job   // showtime\n        .then(results => {\n            msg.payload = results.entries.map(entry => G.oDataToObject(entry).RowKey);\n            node.send(msg);\n            node.status(G.nodeStatus(false, `${new Date().toLocaleTimeString()}: ${email} (${results.entries.length})`));\n        })\n        .catch(error => {\n            msg.statusCode = 500;\n            node.warn(error);\n            node.send(msg);\n        });\n} else {\n    msg.payload = \"bad request\";\n    msg.statusCode = 400;\n    node.warn(\"email not specified\");\n    node.send(msg);\n}\n\n\n\nfunction queryTable(partitionKey) {\n    const query = new azureStorage.TableQuery()\n        .where('PartitionKey eq ?', partitionKey);\n\n    return new Promise((resolve, reject) => {\n        tableService.queryEntities('bobbUsers', query, null, (error, result, response) => resolve(error || result));\n    });\n}\n",
        "outputs": "1",
        "noerr": 0,
        "x": 500,
        "y": 2540,
        "wires": [
            [
                "72ae1df1.2e9c84",
                "ee5611b6.36162"
            ]
        ],
        "outputLabels": [
            "result"
        ]
    },
    {
        "id": "72ae1df1.2e9c84",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 710,
        "y": 2540,
        "wires": []
    },
    {
        "id": "1045b379.93ce6d",
        "type": "subflow:2161b62e.a025aa",
        "z": "94771f7d.38037",
        "name": "Auth",
        "x": 310,
        "y": 2540,
        "wires": [
            [
                "8ddc5cf1.d707b"
            ],
            []
        ]
    },
    {
        "id": "ede440a6.617e4",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST user query",
        "url": "/BobbAPI/2.0/user/accounts",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 2580,
        "wires": [
            [
                "1045b379.93ce6d"
            ]
        ]
    },
    {
        "id": "637f0727.b63498",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 550,
        "y": 680,
        "wires": []
    },
    {
        "id": "da370993.ccc0d8",
        "type": "websocket out",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "server": "69bbf4b3.af508c",
        "client": "",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "9d4eb4cd.2780e8",
        "type": "websocket in",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "server": "69bbf4b3.af508c",
        "client": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "1366acdd.4fe633",
                "db21a66c.722648"
            ]
        ]
    },
    {
        "id": "bc764409.bccdc8",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "CLIENTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 480,
        "y": 220,
        "wires": []
    },
    {
        "id": "37901263.1a6cfe",
        "type": "link in",
        "z": "1f4e439a.78fd7c",
        "name": "toWebSockets",
        "links": [
            "82c3d7b6.ee7ed8",
            "9c8e4f8.587dfb",
            "63d58450.c78c0c",
            "63d06a51.64ba54"
        ],
        "x": 155,
        "y": 100,
        "wires": [
            [
                "8e7762bb.7dd1f"
            ]
        ]
    },
    {
        "id": "ab7d1c51.cc2b5",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "send",
        "func": "const D = global.get(\"dataEngine\")\n\nconst clients = flow.get(\"clients\") || {};\nconst {accountId, buildingId, payload, topic} = msg;\nconst [roomId, deviceName, metric, event] = topic.split(\".\");\nconst deviceId = [roomId, deviceName].join(\".\");\n\nObject.keys(clients).map(sessionId => {\n    if (clients[sessionId].accountId === accountId && clients[sessionId].buildingId === buildingId) {\n        if (clients[sessionId].subs.includes(\"state\") && [\"on\", \"hue\", \"saturation\", \"brightness\", \"power\"].includes(metric))\n            node.send({_session: {type: \"websocket\", id: sessionId}, payload: {a: accountId, b: buildingId, d: deviceId, p: `{\"${metric}\": ${payload}}`}});\n        else if (event === \"unknown\" && clients[sessionId].subs.includes(\"unknown\")) {\n            node.send({_session: {type: \"websocket\", id: sessionId}, payload: {a: accountId, b: buildingId, t: metric, v: payload}})\n        } else if (clients[sessionId].subs.includes(metric)) {\n            const key = [deviceId, metric].join(\".\");\n            node.send({_session: {type: \"websocket\", id: sessionId}, payload: {a: accountId, b: buildingId, k: key, v: payload}})\n        }\n    }\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "da370993.ccc0d8",
                "ba0cd80.2e15a28"
            ]
        ]
    },
    {
        "id": "ea21bb6e.092118",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "1366acdd.4fe633",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "subscribe",
        "func": "clients = flow.get(\"clients\") || {};\n\nconst sessionId = msg._session.id;\nlet pay = null;\n\ntry {\n    pay = JSON.parse(msg.payload);\n} catch(e) {\n    pay = msg.payload;\n}\n\nif (!clients[sessionId])\n    clients[sessionId] = { subs: [], timestamp: 0 };\n\nif (typeof pay === \"string\") {\n    if (pay === \"close\")\n        delete clients[sessionId];\n} else {\n    if (pay.a) clients[sessionId].accountId = pay.a\n    if (pay.b) clients[sessionId].buildingId = pay.b\n    if (pay.m) clients[sessionId].subs.push(pay.m)\n}\n\nif (pay !== \"close\") clients[sessionId].timestamp = Date.now();\n\nflow.set(\"clients\", clients);\n\nreturn { payload: clients, pay:pay};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "bc764409.bccdc8"
            ]
        ]
    },
    {
        "id": "e5fe31fb.07894",
        "type": "inject",
        "z": "1f4e439a.78fd7c",
        "name": "inspect",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 400,
        "wires": [
            [
                "d9762ed0.ccad2"
            ]
        ]
    },
    {
        "id": "d9762ed0.ccad2",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "inspect",
        "func": "msg.payload = flow.get(\"clients\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 400,
        "wires": [
            [
                "44a18e25.2c46"
            ]
        ]
    },
    {
        "id": "44a18e25.2c46",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 470,
        "y": 400,
        "wires": []
    },
    {
        "id": "a1dc52d8.6cb24",
        "type": "inject",
        "z": "1f4e439a.78fd7c",
        "name": "reset",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "a26f4687.3487a8"
            ]
        ]
    },
    {
        "id": "a26f4687.3487a8",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "reset",
        "func": "flow.set(\"clients\", {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ba0cd80.2e15a28",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "528714b8.ad06cc",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "indexRuleConditions",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllRules((accountId, buildingId, ruleId) => {\n    let rule = building.rules[ruleId];\n    \n    if (rule.conditions && (rule.conditions.all || rule.conditions.any)) {\n        iterateRuleConditions(accountId, buildingId, ruleId, rule.conditions.all || rule.conditions.any);\n    }\n});\n\n\nfunction iterateRuleConditions(accountId, buildingId, ruleId, conditionBlock) {\n    conditionBlock.filter(conditionObject => (conditionObject.hasOwnProperty(\"any\") || conditionObject.hasOwnProperty(\"all\"))).map(conditionObject => iterateRuleConditions(accountId, buildingId, ruleId, conditionObject.all || conditionObject.any));\n\n    Array.prototype.push.apply(facts,\n        conditionBlock.filter(conditionObject => \n            (conditionObject.fact && (conditionObject.fact.startsWith(\"sensors\") || conditionObject.fact.startsWith(\"devices\")))\n        )\n        .map(conditionObject => {\n            let parts = conditionObject.fact.split(\".\");\n            if (conditionObject.fact.startsWith(\"sensors\"))\n                return {rule: ruleId, fact: conditionObject.fact, accountId: accountId, buildingId: buildingId, room: parts[1], device: parts[2], variable: parts[3]};\n            else\n                return {rule: ruleId, fact: conditionObject.fact, accountId: accountId, buildingId: buildingId, device: parts[1], variable: parts[2]};\n        })\n    );\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 952,
        "y": 447,
        "wires": [
            [
                "c572b497.8e1758"
            ]
        ]
    },
    {
        "id": "c9081958.fff318",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "IRC",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 721,
        "y": 451,
        "wires": [
            [
                "528714b8.ad06cc"
            ]
        ]
    },
    {
        "id": "c572b497.8e1758",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "5e52e44a.09e7cc",
        "type": "link in",
        "z": "71545018.aa70d",
        "name": "dataInFullKey",
        "links": [
            "ffc62309.b20f",
            "26ac3d93.8024f2",
            "331e5a17.fb54f6",
            "8ee74d36.4e143",
            "b419c00d.10c6e",
            "2d9148f8.d35388",
            "c5e65c91.dfaf2",
            "53771041.5beab",
            "6f3a2ce.39346d4",
            "4cb3a585.9575ec",
            "7a49b049.926a8",
            "6ad1959.55b3b6c",
            "84f487e2.11cbe8",
            "e500cc7a.e70f6"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            [
                "4c141733.2e53b8",
                "73fbb8a9.b99c78"
            ]
        ]
    },
    {
        "id": "4c141733.2e53b8",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "fullKey",
        "func": "const G = global.get(\"globals\");\n\nconst parts = msg.topic.split(\".\");\nconst {source, topic, accountId = parts[0], buildingId = parts[1]} = msg\n\nif (parts.length >= 3) {\n    if (G.buildingExists(accountId, buildingId)) {\n        const newTopic = parts.slice(-(parts.length - 2)).join(\".\");\n    \n        node.send({...msg, accountId, buildingId, newTopic});\n    } else node.warn(`no such account/building (${accountId}.${buildingId}) from source ${source}`);\n} else node.warn(`malformed key '${topic}' from source ${source}`);\n\nif (!source) node.warn(`No source for ${topic}`);",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "3ad9c0e2.31db2",
                "172bbef2.f58c11",
                "4ea834b6.33f84c",
                "c6ad15f3.c20a28"
            ]
        ]
    },
    {
        "id": "62b13075.d81f3",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "partKey",
        "func": "const G = global.get(\"globals\");\n\nconst {accountId, buildingId, topic, source, payload, eventId} = msg\n\nif (G.buildingExists(accountId, buildingId)) {\n    if (topic) {\n        const parts = topic.split(\".\");\n        \n        if (parts.length >= 1) {\n            node.send(msg);\n        } else node.warn(`malformed key '${topic}' from source ${source}`);\n    } else node.warn(`No storage key from source ${JSON.stringify(msg)}`);\n} else node.warn(`no such account/building (${accountId}.${buildingId}) from source ${source}`);\n\nif (!source) node.warn(`No source for ${topic} with payload ${JSON.stringify(payload)} and event ID ${eventId} from node ${msg.node}`)",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 240,
        "wires": [
            [
                "172bbef2.f58c11",
                "3ad9c0e2.31db2",
                "4ea834b6.33f84c"
            ]
        ]
    },
    {
        "id": "b6707391.0f5c2",
        "type": "link in",
        "z": "71545018.aa70d",
        "name": "dataInPartKey",
        "links": [
            "30b67b.61aea986",
            "6f1301a1.1124b",
            "881a2fdc.291f7",
            "934d0f1b.bcaa3",
            "5e2260a8.8160d",
            "fc0197b4.261e28",
            "3e9aea9b.2d5296",
            "f83a792b.c61ba8",
            "c03cb688.d12188",
            "6e7dde7b.d4e42",
            "c8192e84.20b83",
            "66ae929a.89fdfc",
            "6cc12220.e07cfc",
            "65c381cf.3dcee",
            "441b33.9f1794cc"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "62b13075.d81f3",
                "73fbb8a9.b99c78"
            ]
        ]
    },
    {
        "id": "172bbef2.f58c11",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "store",
        "func": "const [G, D] = global.get([\"globals\", \"dataEngine\"]);\n\nconst {payload} = msg;\nconst {values = (typeof payload === \"object\" && !Array.isArray(payload) && !G.isDate(payload)) ? payload : undefined} = msg;\nconst {value = (!values) ? payload : undefined} = msg;\nconst {accountId, buildingId, topic, source} = msg;\nconst diags = errorMsg => node.send([null, null, {errorMsg, accountId, buildingId, payload, topic, value, values}]);\n\nif (payload === null) {\n    diags(`null payload from ${source}: ${topic}`);\n    return;\n} else if (value === undefined && values === undefined) {\n    diags(`missing payload from ${source}: ${topic}`);\n    return;\n}\n\ndiags();\nconst obj1 = (topic.startsWith([accountId, buildingId].join(\".\")) ? {} : {accountId, buildingId});\nconst events = D.storeData(Object.assign(obj1, {key: topic, value, values}), undefined, persistToStorage);\n\n// forward events\nevents.map(event => {\n    const {event: topic, value, data} = event;\n    node.send([\n    {\n        accountId, buildingId, topic, payload: value, data, source\n    },\n    null, null]);\n});\n\n\nfunction persistToStorage(key, value, timestamp) {\n    const fqKey = G.joiner([accountId, buildingId, key], \".\");\n    // node.log(`Stored ${value} in ${fqKey} at ${timestamp}`);\n    node.send([null, {topic: fqKey, payload: value}, null]);\n}",
        "outputs": 3,
        "noerr": 0,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "b96f4e0a.c719",
                "69ea7042.2c963",
                "26ef092e.abeaf6",
                "82c3d7b6.ee7ed8",
                "ce056c1b.4d3f8"
            ],
            [
                "2f83086e.869068",
                "23020ebe.223b72"
            ],
            [
                "4690c42b.67a57c"
            ]
        ],
        "outputLabels": [
            "events",
            "storage",
            "diagnostics"
        ]
    },
    {
        "id": "3ad9c0e2.31db2",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "AFTER",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "6ea6ad04.3a7dc4",
        "type": "link in",
        "z": "71545018.aa70d",
        "name": "dataInAccountOnly",
        "links": [
            "aba28259.a185b",
            "4f912079.38d1b"
        ],
        "x": 155,
        "y": 300,
        "wires": [
            [
                "693dec69.701ae4",
                "73fbb8a9.b99c78"
            ]
        ]
    },
    {
        "id": "693dec69.701ae4",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "accountOnly",
        "func": "const G = global.get(\"globals\");\n\nconst {accountId, topic, source} = msg\n\nif (G.accountExists(accountId)) {\n    if (topic) {\n        const parts = topic.split(\".\");\n        \n        if (parts.length >= 1) {\n            node.send(msg);\n        } else node.warn(`malformed key '${topic}' from source ${source}`);\n    } else node.warn(\"No storage key\");\n} else node.warn(`no such account (${accountId}) from source ${source}`);\n\nif (!source) node.warn(`No source for ${topic}`)",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "172bbef2.f58c11",
                "3ad9c0e2.31db2",
                "4ea834b6.33f84c"
            ]
        ]
    },
    {
        "id": "b96f4e0a.c719",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "EVENTS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "true",
        "x": 800,
        "y": 180,
        "wires": []
    },
    {
        "id": "69ea7042.2c963",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "30b67b.61aea986",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "links": [
            "b6707391.0f5c2"
        ],
        "x": 895,
        "y": 100,
        "wires": []
    },
    {
        "id": "cafe0909.efe678",
        "type": "http in",
        "z": "71545018.aa70d",
        "name": "POST SensorData",
        "url": "/BobbAPI/2.0/sensor/data/:accountId/:buildingId/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "95db4a.121e64b8"
            ]
        ]
    },
    {
        "id": "87f984e8.7f11d8",
        "type": "http in",
        "z": "71545018.aa70d",
        "name": "POST SensorData",
        "url": "/BobbAPI/2.0/sensor/data/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "95db4a.121e64b8"
            ]
        ]
    },
    {
        "id": "95db4a.121e64b8",
        "type": "subflow:2161b62e.a025aa",
        "z": "71545018.aa70d",
        "name": "auth",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "98960c7.c47daf"
            ],
            [
                "95929ef3.eeeda"
            ]
        ]
    },
    {
        "id": "98960c7.c47daf",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "validate",
        "func": "if (msg.payload.hasOwnProperty(\"key\")) {\n    msg.topic = msg.payload.key;\n    \n    if (msg.payload.hasOwnProperty(\"value\") || msg.payload.hasOwnProperty(\"values\")) {\n        msg.payload = msg.payload.value || msg.payload.values;\n        return [msg, msg];\n    } node.warn(\"no data supplied\");\n} else node.warn(\"no key supplied\");\n\nreturn [null, Object.assign(msg, {statusCode: 401})];",
        "outputs": "2",
        "noerr": 0,
        "x": 500,
        "y": 580,
        "wires": [
            [
                "6f1301a1.1124b"
            ],
            [
                "95929ef3.eeeda"
            ]
        ]
    },
    {
        "id": "95929ef3.eeeda",
        "type": "http response",
        "z": "71545018.aa70d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 600,
        "wires": []
    },
    {
        "id": "6f1301a1.1124b",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "b6707391.0f5c2"
        ],
        "x": 695,
        "y": 560,
        "wires": []
    },
    {
        "id": "dbf7baa4.9829e8",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "translate",
        "func": "const classes = {\n    32: {\n        class: \"COMMAND_CLASS_BASIC_V2\",\n        name: \"basic\"\n    },\n    37: {\n        class: \"COMMAND_CLASS_SWITCH_BINARY_V2\",\n        name: \"on\"\n    },\n    38: {\n        class: \"COMMAND_CLASS_SWITCH_MULTILEVEL\",\n        name: \"dimmer\"\n    },\n    39: {\n        class: \"COMMAND_CLASS_SWITCH_ALL\",\n        name: \"onall\"\n    },\n    48: {\n        class: \"COMMAND_CLASS_SENSOR_BINARY_V2\",\n        name: \"binary\"\n    },\n    49: {\n        class: \"COMMAND_CLASS_SENSOR_MULTILEVEL\",\n        name: \"multi\"\n    },\n    50: {\n        class: \"COMMAND_CLASS_METER\",\n        name: \"meter\"\n    },\n    67: {\n        class: \"COMMAND_CLASS_THERMOSTAT_SETPOINT\",\n        name: \"thermostat\"\n    },\n    70: {\n        class: \"COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE\",\n        name: \"climatecontrolschedule\"\n    },\n    76: {\n        class: \"COMMAND_CLASS_DOOR_LOCK_LOGGING\",\n        name: \"doorlocklogging\"\n    },\n    91: {\n        class: \"COMMAND_CLASS_CENTRAL_SCENE\",\n        name: \"scene\"\n    },\n    94: {\n        class: \"COMMAND_CLASS_ZWAVEPLUS_INFO_V2\",\n        name: \"info\"\n    },\n    98: {\n        class: \"COMMAND_CLASS_DOOR_LOCK\",\n        name: \"doorlock\"\n    },\n    99: {\n        class: \"COMMAND_CLASS_USER_CODE\",\n        name: \"usercode\"\n    },\n    112: {\n        class: \"COMMAND_CLASS_CONFIGURATION_V4\",\n        name: \"config\"\n    },\n    113: {\n        class: \"COMMAND_CLASS_NOTIFICATION_V8\",\n        name: \"notification\"\n    },\n    115: {\n        class: \"COMMAND_CLASS_POWERLEVEL\",\n        name: \"power\"\n    },\n    117: {\n        class: \"COMMAND_CLASS_PROTECTION\",\n        name: \"protection\"\n    },\n    128: {\n        class: \"COMMAND_CLASS_BATTERY\",\n        name: \"battery\"\n    },\n    129: {\n        class: \"COMMAND_CLASS_CLOCK\",\n        name: \"clock\"\n    },\n    132: {\n        class: \"COMMAND_CLASS_WAKE_UP_V2\",\n        name: \"wakeup\"\n    },\n    134: {\n        class: \"COMMAND_CLASS_VERSION_V2\",\n        name: \"version\"\n    },\n    139: {\n        class: \"COMMAND_CLASS_TIME_PARAMETERS\",\n        name: \"timeparams\"\n    },\n    152: {\n        class: \"COMMAND_CLASS_SECURITY\",\n        name: \"security\"\n    }\n};\n\nconst [zwClass] = msg.topic.split(\"/\").reverse();\n\nmsg.zwClass = zwClass;\nmsg.zwClassString = classes[zwClass];\n\nconst metricMap = {\n    switch: {\n        metric: \"on\"\n    },\n    accesscontrol: {\n        metric: \"open\",\n        values: {\n            22: true,\n            23: false,\n            default: null\n        }\n    },\n    burglar: {\n        metric: \"pir\",\n        values: {\n            8: 1,\n            254: 0,\n            default: 0\n        }\n    },\n    heating1: {\n        metric: \"setpoint\"\n    }\n}\n\nlet {metric, value, units} = msg.payload\n\nif (msg.variable === \"temperature\" && msg.units === \"F\") metric = \"tempf\"\n\nif (metricMap[metric]) {\n    const mapping = metricMap[metric]\n\n    metric = mapping.metric\n    if (mapping.values)\n        value = mapping.values.hasOwnProperty(value) ? mapping.values[value] : mapping.values.default;\n}\n\nmsg.payload.metric = metric\nmsg.payload.value = value\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "981494d3.f50ca8",
                "cacda580.235448"
            ]
        ]
    },
    {
        "id": "cacda580.235448",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "b9a07ce7.352b4",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 615,
        "y": 260,
        "wires": []
    },
    {
        "id": "a9f37d45.74bdc",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "f890e270.a9626",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 758,
        "y": 1560,
        "wires": []
    },
    {
        "id": "4584490f.ef3ac8",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "7b28656f.0f32fc"
        ],
        "x": 627,
        "y": 1812,
        "wires": []
    },
    {
        "id": "73fbb8a9.b99c78",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "BEFORE",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 300,
        "y": 120,
        "wires": []
    },
    {
        "id": "ffc62309.b20f",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 715,
        "y": 240,
        "wires": []
    },
    {
        "id": "8df8b874.8a6d08",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "",
        "func": "msg.payload = typeof undefined\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 414,
        "y": 679,
        "wires": [
            [
                "b365fcca.f4296"
            ]
        ]
    },
    {
        "id": "6acd547e.2bd8ac",
        "type": "inject",
        "z": "71545018.aa70d",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 229,
        "y": 679,
        "wires": [
            [
                "8df8b874.8a6d08"
            ]
        ]
    },
    {
        "id": "b365fcca.f4296",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 602,
        "y": 691,
        "wires": []
    },
    {
        "id": "c91e5ecb.a47fd",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 2420,
        "wires": []
    },
    {
        "id": "3e9aea9b.2d5296",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "links": [
            "b6707391.0f5c2"
        ],
        "x": 595,
        "y": 720,
        "wires": []
    },
    {
        "id": "1fab8535.78960b",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "toTableStorage",
        "func": "const G = global.get(\"globals\");\nconst start = Date.now();\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\nconst entGen = azureStorage.TableUtilities.entityGenerator;\n\nconst {payload, topic, [typeof payload]: type} = msg\n\nif (type === \"object\" && Object.keys(payload).length > 0)\n    payload = JSON.stringify(payload)\n    \nconst rec = {\n    PartitionKey: entGen.String(topic),\n    RowKey: entGen.String(G.invertedTicks().toString()),\n    value: entGen.String(payload),\n    type: entGen.String(type)\n};\n\ntableService.insertEntity('bobbDataEngine', rec, function (error, result, response) {\n    msg.payload = {topic: msg.topic, status: error ? \"failed\" : \"succeeded\", elapsedms: Date.now() - start};\n    \n    if (error)\n        node.send([null, msg]);\n    else\n        node.send([msg, null]);\n});\n",
        "outputs": "2",
        "noerr": 0,
        "x": 820,
        "y": 260,
        "wires": [
            [
                "19368216.cf885e"
            ],
            [
                "4177c06f.2bb45"
            ]
        ]
    },
    {
        "id": "19368216.cf885e",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "YAY",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1010,
        "y": 260,
        "wires": []
    },
    {
        "id": "4177c06f.2bb45",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "AWW",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1010,
        "y": 300,
        "wires": []
    },
    {
        "id": "76d9ef6e.bd798",
        "type": "mqtt in",
        "z": "e74fac43.1f2b6",
        "name": "present",
        "topic": "+/+/wifipresence/present",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "f23e58f.ec47ca8"
            ]
        ]
    },
    {
        "id": "df299b9c.6e19a8",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "f23e58f.ec47ca8",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "IDs",
        "func": "node.status({shape: \"dot\", fill: \"blue\", text: \"receiving\"})\nconst [accountId, buildingId, , report] = msg.topic.split(\"/\");\nnode.status({})\n\nreturn {\n    accountId,\n    buildingId,\n    report,\n    ...msg\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "7bda604c.e1425",
                "df299b9c.6e19a8",
                "42e099a8.9a3278",
                "1219c5a8.06734a"
            ]
        ]
    },
    {
        "id": "7bda604c.e1425",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "matchPeopleToMACs",
        "func": "node.status({shape: \"dot\", fill: \"blue\", text: \"matching\"});\nconst [G, L] = global.get([\"globals\", \"lodash\"]);\nconst macPresence = global.get(\"macPresence\") || {};\n\nconst DEFPRESMULT = 2;\n\nconst round = (num, dec = 2) =>\n    parseFloat((typeof num === \"number\" ? num : parseFloat(num)).toFixed(dec));\n\nconst {accountId, buildingId, payload: macsSeen, report} = msg;\nconst {devicePeople = {}} = G.getAccount(accountId);\n\nconst present = report !== \"departed\";\n\nconst aPres = G.ensureProp(macPresence, accountId, {});\nconst bPres = G.ensureProp(aPres, buildingId, {});\n\nconst filteredReport = macsSeen.filter(mac => devicePeople.hasOwnProperty(mac))   // filter down to just the macs we're monitoring\n    .map(mac => ({mac, ...devicePeople[mac]}));\n    \nconst peoplesDevices = filteredReport.reduce((a, {mac, personId, definitivePresence}) => {\n        // get personId for each MAC and calc a score for each\n        const person = G.ensureProp(a, personId, {});\n        person[mac] = ((present ? 1 : -1) * (definitivePresence ? DEFPRESMULT : 1))\n        return a;\n    }, {});\n\nL.merge(aPres[buildingId], bPres, peoplesDevices);\n\n// turn the list of macsSeen into peopleIDs, each with a total score based on the number of their devices seen\nconst peopleScores = Object.entries(aPres[buildingId])\n    .reduce((people, [personId, macScores]) => {\n        // calc total score for each person\n        people[personId] = Object.values(macScores).reduce((total, score) => total + score, 0);\n        return people;\n    }, {});\n    \n// Create a presence vote message for each person\nconst msgs = Object.entries(peopleScores)\n    .map(([personId, score]) => ({\n        accountId,\n        buildingId,\n        topic: personId,\n        source: \"macpresence\",\n        personId,\n        score,\n        report\n    }\n));\n\nglobal.set(\"macPresence\", macPresence);\n        \nnode.status({});\n\nreturn [msgs, {accountId, buildingId, filteredReport, peoplesDevices, peopleScores}];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "4d1300fe.c3673",
                "96394c8b.641df",
                "bffc2593.3a07b8"
            ],
            [
                "cfc5008.362ce"
            ]
        ],
        "outputLabels": [
            "people",
            ""
        ]
    },
    {
        "id": "ae2cd8bb.7a6878",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 650,
        "y": 760,
        "wires": []
    },
    {
        "id": "85bcbd3f.c2c98",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 781,
        "y": 674,
        "wires": []
    },
    {
        "id": "8613e303.0e039",
        "type": "inject",
        "z": "1f4e439a.78fd7c",
        "name": "pruneClients",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "5210000b.46a4f"
            ]
        ]
    },
    {
        "id": "5210000b.46a4f",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "func": "const keepTime = 2 * 60 * 1000; // 2 minutes\nconst clients = flow.get(\"clients\") || {};\nconst sessionIds = Object.keys(clients);\nconst before = sessionIds.length;\nlet survivors = {};\n\nsessionIds.filter(sessionId => Date.now() - clients[sessionId].timestamp < keepTime).map(sessionId => survivors[sessionId] = clients[sessionId]);\nflow.set(\"clients\", survivors);\nmsg.payload = {before: before, after: Object.keys(survivors).length, survivors: survivors};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "fd2c568d.c0ebd8"
            ]
        ]
    },
    {
        "id": "82c3d7b6.ee7ed8",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "37901263.1a6cfe"
        ],
        "x": 815,
        "y": 200,
        "wires": []
    },
    {
        "id": "fd2c568d.c0ebd8",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "PRUNED",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 480,
        "y": 300,
        "wires": []
    },
    {
        "id": "4ea834b6.33f84c",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "objs",
        "func": "const {payload} = msg;\nif (typeof payload === \"object\") {\n    if (Object.keys(payload).length >= 2) {\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 60,
        "wires": [
            [
                "6b17c329.34b86c"
            ]
        ]
    },
    {
        "id": "6b17c329.34b86c",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 770,
        "y": 60,
        "wires": []
    },
    {
        "id": "2f83086e.869068",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "STORAGE",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "26ac3d93.8024f2",
        "type": "link out",
        "z": "16c1aedb.4b0961",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 915,
        "y": 200,
        "wires": []
    },
    {
        "id": "7674c070.d3005",
        "type": "batcher",
        "z": "998225a2.49fc08",
        "name": "",
        "maxTopics": 1,
        "maxMessagesPerTopic": 10,
        "maxDelay": "100",
        "x": 640,
        "y": 180,
        "wires": [
            [
                "597d4293.e9ec7c"
            ]
        ]
    },
    {
        "id": "597d4293.e9ec7c",
        "type": "function",
        "z": "998225a2.49fc08",
        "name": "reduce",
        "func": "const parts = msg.topic.split(\".\");\nmsg.accountId = parts[0];\nmsg.buildingId = parts[1];\nmsg.deviceId = [parts[2], parts[3]].join(\".\");\nconst first = msg.payload[0];\nconst values = msg.payload.reduce((a, obj) => Object.assign(a, {[obj.characteristic.toLowerCase()]: obj.value}), {}) \nmsg.payload = values;\nmsg.source = \"Apple Homekit\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 180,
        "wires": [
            [
                "74e4eae1.80c534",
                "701cf8dd.c3b738"
            ]
        ]
    },
    {
        "id": "aa250808.0e1dc8",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "runTest",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 330,
        "y": 1480,
        "wires": [
            [
                "9d92deec.d4543"
            ]
        ]
    },
    {
        "id": "ec97e2a5.09ec5",
        "type": "html",
        "z": "7c5e300a.a71d9",
        "name": "extractTemp",
        "property": "payload",
        "tag": "tr > td:nth-child(2)",
        "ret": "text",
        "as": "single",
        "x": 610,
        "y": 1480,
        "wires": [
            [
                "345e5f6c.9db84",
                "df8cd887.0dc4b8",
                "2eb662b7.3c602e"
            ]
        ]
    },
    {
        "id": "9d92deec.d4543",
        "type": "template",
        "z": "7c5e300a.a71d9",
        "name": "test",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "    <tr>\n      <td bordercolor=\"#000000\" style=\"border: thin solid rgb(0, 0, 0); height: 69px; text-align: center; color: red; width: 189px;\"><font face=\"verdana, Arial, Helvetica\"><small><strong>Temperatuur</strong> </small></font></td>\n      <td bordercolor=\"#000000\" style=\"border: thin solid rgb(0, 0, 0); height: 69px; text-align: center; color: red; width: 237px;\"><font face=\"verdana, Arial, Helvetica\"><strong><small>1.8°C<br>\n      </small></strong></font> </td>\n    </tr>\n",
        "output": "str",
        "x": 460,
        "y": 1480,
        "wires": [
            [
                "ec97e2a5.09ec5"
            ]
        ]
    },
    {
        "id": "8cd2ba31.f588f8",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "pureNum",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1000,
        "y": 1480,
        "wires": []
    },
    {
        "id": "345e5f6c.9db84",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "pureNum",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length >= 1) {\n    msg.payload = Number(msg.payload[0].match(/[\\.0-9]+/));\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 1480,
        "wires": [
            [
                "8cd2ba31.f588f8"
            ]
        ]
    },
    {
        "id": "df8cd887.0dc4b8",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "rawOutput",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 830,
        "y": 1440,
        "wires": []
    },
    {
        "id": "2eb662b7.3c602e",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "cleanStr",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length >= 1) {\n    msg.payload = String(msg.payload[0].match(/^.*/));\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 1520,
        "wires": [
            [
                "d6a2e4d6.cba608"
            ]
        ]
    },
    {
        "id": "d6a2e4d6.cba608",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "cleanStr",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1000,
        "y": 1520,
        "wires": []
    },
    {
        "id": "aba28259.a185b",
        "type": "link out",
        "z": "43f12961.0018d8",
        "name": "",
        "links": [
            "6ea6ad04.3a7dc4"
        ],
        "x": 915,
        "y": 120,
        "wires": []
    },
    {
        "id": "8c124587.af6798",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "storeData",
        "func": "const G = global.get(\"globals\");\n\nconst { payload: {personId, deviceId, lat, lon, acc, vel = 0, event, buildingId: at = \"\", accountId = findAccountByPerson(personId)}} = msg;\n\nif (accountId) {\n    const buildingId = at === \"\" ? (G.findBuildingNear(accountId, lat, lon, 300) || \"undefined\") : at;\n    const present = (Boolean(buildingId) && !event) || (event === \"enter\");\n    \n    return [\n        {\n            topic: [\"tracking\", \"people\", personId].join(\".\"),\n            deviceId,\n            accountId,\n            source: \"tracking\",\n            payload: {\n                buildingId,\n                location: {lat, lon},\n                vel\n            }\n        },\n        {\n            accountId,\n            personId,\n            buildingId,\n            source: \"tracking\",\n            score: (present ? 1 : -1) * 10,\n            expiry: 4 * 60 * 60 * 1000 \n        }\n    ];\n} else node.warn(\"Couldn't identify account for tracked person\");\n\nfunction findAccountByPerson(personId) { \n    return G.getAccounts().find(accountId => {\n        const account = G.getAccount(accountId);\n        return account && account.people && account.people[personId];\n    })\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 760,
        "y": 140,
        "wires": [
            [
                "aba28259.a185b",
                "37d1a037.d4724"
            ],
            [
                "c240434c.c6c12",
                "11de6ef.1042991"
            ]
        ],
        "outputLabels": [
            "store data",
            "presence"
        ]
    },
    {
        "id": "37d1a037.d4724",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "166d607e.d0c8d",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "getDataEngine",
        "topic": "nochain",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "bc740b8e.a3dec8"
            ]
        ]
    },
    {
        "id": "db29e58a.52e468",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "whenIsSunset (champions)",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 670,
        "y": 820,
        "wires": [
            [
                "16b42cb9.084ca3"
            ]
        ]
    },
    {
        "id": "8aa36d7a.ac9c6",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 1035,
        "y": 820,
        "wires": []
    },
    {
        "id": "16b42cb9.084ca3",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent3",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"testevent3\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 820,
        "wires": [
            [
                "8aa36d7a.ac9c6"
            ]
        ]
    },
    {
        "id": "995dd02.eaf533",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "whenIsSunset (studio)",
        "topic": "studio",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 660,
        "y": 860,
        "wires": [
            [
                "16b42cb9.084ca3"
            ]
        ]
    },
    {
        "id": "b998dc59.e2a7f",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "76ba6b85.5d5924",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 420,
        "wires": [
            [
                "24b23843.0a9178"
            ]
        ]
    },
    {
        "id": "bc6e853c.eb82b8",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 450,
        "y": 420,
        "wires": []
    },
    {
        "id": "24b23843.0a9178",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "testRulesInBuilding",
        "func": "const G = global.get(\"globals\")\n\nmsg.building = G.getBuilding(\"jfdi\", \"champions\")\nmsg.rules = G.getRules(\"jfdi\", \"champions\")\nG.forRulesInBuilding(\"jfdi\", \"champions\", ruleId => node.warn(ruleId))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 420,
        "wires": [
            [
                "bc6e853c.eb82b8"
            ]
        ]
    },
    {
        "id": "4e645a66.9b3b64",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "loadA&B",
        "func": "const [G, S] = global.get([\"globals\", \"server\"]);\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst blobService = azureStorage.createBlobService(connStr);\nconst accountSegment = S.accountSegment;   // account segments allow a server to handle buildings for just a subset of accounts, e.g. UK South\nconst blobSegment = accountSegment ? accountSegment + \"/\" : \"\";\n\n\nG.listBlobsInContainer(\"bobb-accounts\", blobSegment)\n    // load each account blob listed\n    .then(accountBlobsList => \n        Promise.all(accountBlobsList.map(accountBlobName => \n            G.loadBlob(\"bobb-accounts\", accountBlobName))\n        )\n    )\n    // store the loaded account blobs\n    .then(jsonTextBlobs => {\n        const accountPromises = jsonTextBlobs.map(jsonText => {\n            const account = JSON.parse(jsonText);\n            account.buildings = {};\n            account.devicePeople = indexPeoplesDevices(account.people);\n            const accountId = account.accountId;\n\n            if (accountId) {\n                G.storeAccount(account);\n                \n                // list all the building blobs in the account's buildings folder\n                return G.listBlobsInContainer(\"bobb-buildings\", account.accountId + \"/\", null);\n            }\n        });\n\n        return Promise.all(accountPromises);\n    })\n    // load each building blob listed in account's buildings folder\n    .then(buildingBlobsLists => Promise.all(buildingBlobsLists.map(buildingBlobList =>\n            Promise.all(buildingBlobList.map(buildingBlobName =>\n                G.loadBlob(\"bobb-buildings\", buildingBlobName)\n            ))\n        ))\n    )\n    // store and process each building blob, indexing rules and creating virtual groups\n    .then(results => {\n        results.map(result => result.map(blob => {\n            const building = JSON.parse(blob);\n\n            addStaticRules(building);\n            building.eventRules = indexRules(building);\n            building.macDevices = indexDeviceMacs(building);\n            addVirtualGroups(building);\n            G.storeBuilding(building);\n\n            return building;\n        }));\n\n        // Show what we've loaded, empirically\n        G.getAccounts().map(accountId => {\n            node.warn(\"Buildings: \" + accountId + \" \" + G.getBuildings(accountId).length);\n        });\n        \n        node.status({ text: G.shortestDateTime() + \": Loaded & processed.\" });\n        \n        node.send([(msg.topic === \"nochain\") ? null : msg, msg]);\n    })\n    .catch(err => {\n        node.warn(err);\n        node.send([(msg.topic === \"nochain\") ? null : msg, null]);\n    }\n);\n\n\nfunction indexPeoplesDevices(people) {\n    return Object.entries(people).reduce((a, [personId, {devices: {wifi = []} = {}}]) => \n        ({...a, ...wifi.reduce((x, {mac, definitivePresence}) => ({...x, [mac]: {personId, definitivePresence}}), {})}), {})\n}\n\nfunction indexDeviceMacs(building) {\n    const {devices = {}} = building;\n    return Object.entries(devices).reduce((a, [deviceId, {macAddress}]) => {\n        if (macAddress)\n            a[macAddress] = deviceId;\n        \n        return a;\n    }, {})\n}\n\nfunction indexRules(building) {\n    let eventRules = {};\n    const {accountId, buildingId, rules = {}} = building;\n\n    node.status({ text: G.shortestDateTime() + \": indexing rules.\" });\n\n    Object.entries(rules).map(([ruleId, rule]) => {\n        const {events: ruleEvents = []} = rule;\n        \n        ruleEvents.forEach(eventId => {\n            eventRules[eventId] = (eventRules[eventId] || []).concat([ruleId]);\n        });\n\n        let facts = new Set();\n        \n        if (G.ruleHasConditions(rule)) {\n            getFactsForConditions(rule.conditions.all || rule.conditions.any || [], facts);\n        }\n        \n        getFactsForActions(rule, facts);\n\n        rule.facts = Array.from(facts)\n    });\n\n    return eventRules;\n}\n\n\nfunction getFactsForConditions(block, facts) {\n    block.map(({all, any, fact}) => {\n        if (all) getFactsForConditions(all, facts);\n        else if (any) getFactsForConditions(any, facts);\n        else if (fact) {\n            const parts = fact.split(\".\");\n            const lastPart = parts[parts.length - 1];\n\n            let variable = \"value\";\n            if ([\"previousValue\", \"value\", \"timestamp\", \"previousTimestamp\"].includes(lastPart)) {\n                variable = lastPart;\n                parts.splice(-1);\n            }\n\n            const factRoot = parts.join(\".\");\n\n            const fqFact = [factRoot, variable].join(\".\");\n            facts.add(fqFact);\n        }\n    });\n}\n\n\nfunction getFactsForActions({actions = {}}, facts) {\n    Object.entries(actions).map(([actionType, action]) => \n        getFactsForActionBlock(action, facts)\n    );\n}\n\n\nfunction getFactsForActionBlock(actionBlock, facts) {\n    // hoiks tokens out of rule actions to find facts we'll need to gather in order to detokenise\n    if (Array.isArray(actionBlock)) {\n        actionBlock.map(action =>\n            Object.values(action).map(val => {\n                if (typeof val === \"string\") {\n                    const getMatches = (str, rx, callback) => {\n                        let results;\n                        while ((results = rx.exec(str)) !== null) callback(results);\n                    }\n                    \n                    getMatches(val, /%([^%]*)%/g, results => {\n                        const key = results[1];\n                        const parts = key.split(\".\");\n                        const lastPart = parts[parts.length - 1];\n\n                        let variable = \"value\";\n                        if ([\"previousValue\", \"value\", \"timestamp\", \"previousTimestamp\"].includes(lastPart)) {\n                            variable = lastPart;\n                            parts.splice(-1);\n                        }\n\n                        const fqFact = [...parts, variable].join(\".\");\n                        facts.add(fqFact)\n                    })\n                }\n            })\n        );\n    }\n}\n\n\nfunction addVirtualGroups(building) {\n    if (!building.groups) building.groups = {};\n    \n    for (let deviceId in building.devices) {\n        let device = building.devices[deviceId];\n        const room = device.room || device.roomId\n\n        if (device.light && room) {  // it's a light with a designated room\n            let groupId = \"all\" + room + \"lights\";\n            const label = room.charAt(0).toUpperCase() + room.slice(1);    // title case rome\n            \n            if (!building.groups[groupId]) {\n                building.groups[groupId] = {\n                    description: [\"All\", label, \"Lights\"].join(\" \"),\n                    devices: [],\n                    wemoEmulation: true,\n                    virtual: true\n                };\n            }\n            \n            if (building.groups[groupId].virtual)\n                building.groups[groupId].devices.push(deviceId);\n        }\n    }\n}\n\n\nfunction addStaticRules(building) {\n    building.rules.presenceSomeone = {\n        events: [\"presence.count.changed\"],\n        conditions: {\n            all: [\n                {\n                    fact: \"presence.count.value\",\n                    value: 0,\n                    operator: \"greaterThan\"\n                },\n                {\n                    fact: \"presence.count.previousValue\",\n                    value: 0,\n                    operator: \"equal\"\n                }\n            ]\n        },\n        actions: {\n            raiseevent: [\n                \"presence.someone\"\n            ]\n        }\n    }\n\n    building.rules.presenceNoone = {\n        events: [\"presence.count.changed\"],\n        conditions: {\n            all: [\n                {\n                    fact: \"presence.count.value\",\n                    value: 0,\n                    operator: \"equal\"\n                },\n                {\n                    fact: \"presence.count.previousValue\",\n                    value: 0,\n                    operator: \"greaterThan\"\n                }\n            ]\n        },\n        actions: {\n            raiseevent: [\n                \"presence.noone\"\n            ]\n        }\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "9981d7af.c7a828",
                "bc740b8e.a3dec8"
            ],
            [
                "7581f529.1df97c",
                "36d885f2.77e54a"
            ]
        ]
    },
    {
        "id": "4d1300fe.c3673",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "PEOPLE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 640,
        "y": 40,
        "wires": []
    },
    {
        "id": "a9e57dcb.155c6",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "DEVICES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 640,
        "y": 200,
        "wires": []
    },
    {
        "id": "757824ad.6724cc",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "deleteInvalidData",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 860,
        "y": 660,
        "wires": [
            [
                "8721d6d8.cca9d8"
            ]
        ]
    },
    {
        "id": "8721d6d8.cca9d8",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "deleteInvalidData",
        "func": "const D = global.get(\"dataEngine\")\n\nD.deleteInvalidData()\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "902be31b.5fd57",
        "type": "http response",
        "z": "43f12961.0018d8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 540,
        "wires": []
    },
    {
        "id": "c3280c40.988f1",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "register",
        "func": "const { personId, accountId, buildingId, event} = msg.req.params;\n\nconst G = global.get(\"globals\"), accounts = global.get(\"accounts\");\nconst present = ([\"in\", \"enter\", \"entry\", \"arrive\", \"arrived\", \"arrival\", \"1\", \"true\"].includes(event));\nconst ok = accounts && accountId && accounts[accountId] && buildingId && accounts[accountId].buildings && accounts[accountId].buildings[buildingId] && accounts[accountId].people && personId && accounts[accountId].people[personId];\n\nif (!ok)\n    return [null, {...msg, statusCode: 404, payload: `Not found: ${accountId}/${buildingId}/${personId}` }];\nelse\n    return [\n        {\n            accountId,\n            personId,\n            buildingId,\n            source: \"geofence\",\n            score: (present ? 1 : -1) * 10\n        },\n        {...msg, statusCode: 200, payload: \"OK\"}\n    ];\n",
        "outputs": 2,
        "noerr": 0,
        "x": 580,
        "y": 520,
        "wires": [
            [
                "c73336ff.54d548",
                "6f3b8d0a.4ff094"
            ],
            [
                "902be31b.5fd57",
                "ae4181fa.834dd"
            ]
        ]
    },
    {
        "id": "66ae929a.89fdfc",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "links": [
            "b6707391.0f5c2"
        ],
        "x": 1095,
        "y": 720,
        "wires": [],
        "inputLabels": [
            "storage"
        ]
    },
    {
        "id": "f9b960d6.2241e",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "TO STORE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1150,
        "y": 760,
        "wires": []
    },
    {
        "id": "ae565479.544f38",
        "type": "link in",
        "z": "e74fac43.1f2b6",
        "name": "PresenceCoreVotesIn",
        "links": [
            "f1b4cc8c.5a629",
            "caf7e0bf.8dd7a",
            "96394c8b.641df",
            "c240434c.c6c12",
            "7101bd48.ccad24",
            "6f3b8d0a.4ff094",
            "f630b0af.3df6c",
            "5afc8cc6.ab05b4"
        ],
        "x": 155,
        "y": 500,
        "wires": [
            [
                "5973b11d.2ca0c",
                "1d51cf24.b143e1"
            ]
        ]
    },
    {
        "id": "c6ad15f3.c20a28",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "FULL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "3492e885.cec558",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "1f5ca073.297fe",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "testEvent4Champions",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 140,
        "y": 1240,
        "wires": [
            [
                "b32c319d.f5cfb"
            ]
        ]
    },
    {
        "id": "a8d0ab27.ab87c8",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 455,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b32c319d.f5cfb",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent4",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"testevent4\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 1240,
        "wires": [
            [
                "a8d0ab27.ab87c8"
            ]
        ]
    },
    {
        "id": "845ae24.3fdec2",
        "type": "comment",
        "z": "e74fac43.1f2b6",
        "name": "Presence Core",
        "info": "The presence core accepts messages in the following format:\n\n```\n{\n    accountId,\n    personId,\n    buildingId,\n    source,\n    score\n};\n```\n\nIt stores this data per account/person and maintains a score per building per person.\nScores can be expressed as positive (present) or negative (absent).",
        "x": 300,
        "y": 440,
        "wires": []
    },
    {
        "id": "ea414a0d.5db798",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "90723a9f.d45368",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 760,
        "y": 1140,
        "wires": []
    },
    {
        "id": "7e661970.f95888",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "bypass",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 720,
        "y": 340,
        "wires": []
    },
    {
        "id": "ffa702bc.f2fce",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "ruleEngine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "96394c8b.641df",
        "type": "link out",
        "z": "e74fac43.1f2b6",
        "name": "",
        "links": [
            "ae565479.544f38"
        ],
        "x": 595,
        "y": 80,
        "wires": []
    },
    {
        "id": "6b98e9e7.1d33c8",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "inspect",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 620,
        "wires": [
            [
                "66f9e142.cfcf5"
            ]
        ]
    },
    {
        "id": "66f9e142.cfcf5",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "load/send",
        "func": "msg.payload = {presence: global.get(\"presence\"), buildings: global.get(\"buildingCounts\"), macPresence: global.get(\"macPresence\") }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 620,
        "wires": [
            [
                "a076c2aa.8033e"
            ]
        ]
    },
    {
        "id": "a076c2aa.8033e",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 410,
        "y": 620,
        "wires": []
    },
    {
        "id": "c240434c.c6c12",
        "type": "link out",
        "z": "43f12961.0018d8",
        "name": "",
        "links": [
            "ae565479.544f38"
        ],
        "x": 915,
        "y": 160,
        "wires": []
    },
    {
        "id": "f921137c.07de7",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "KILL",
        "func": "global.set([\"presence\", \"buildingCounts\"], [undefined, undefined]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "ccfd74ce.d330f8"
            ]
        ]
    },
    {
        "id": "f8ab73f0.cde6f",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "kill",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 1000,
        "wires": [
            [
                "f921137c.07de7"
            ]
        ]
    },
    {
        "id": "f57d70f0.6d1dc",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "getTrackingData",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nG.iterateAllAccounts(accountId => node.send({topic: \"Tracking\", payload: D.getFilteredData(accountId, null, [\"tracking\"])}));",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 680,
        "wires": [
            [
                "7c14e513.b4109c"
            ]
        ]
    },
    {
        "id": "fcec403e.57099",
        "type": "inject",
        "z": "43f12961.0018d8",
        "name": "wheresEveryone",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "f57d70f0.6d1dc"
            ]
        ]
    },
    {
        "id": "7c14e513.b4109c",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 510,
        "y": 680,
        "wires": []
    },
    {
        "id": "767aa315.e9592c",
        "type": "inject",
        "z": "8674b994.809458",
        "name": "testData",
        "topic": "testdata",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "ad64f5db.ce6f18"
            ]
        ]
    },
    {
        "id": "ad64f5db.ce6f18",
        "type": "function",
        "z": "8674b994.809458",
        "name": "store/retrieve",
        "func": "const D = global.get(\"dataEngine\")\n\nD.storeData({\n    accountId: \"testco\",\n    buildingId: \"testcohq\",\n    key: msg.topic,\n    values: {\n        thing: null,\n        twenty: 20,\n        date: new Date(),\n        yes: true,\n        no: \"uh uh\"\n    }\n})\n\nmsg.payload = D.getFilteredData(\"testco\", \"testcohq\", [msg.topic])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "c85edece.24596"
            ]
        ]
    },
    {
        "id": "c85edece.24596",
        "type": "debug",
        "z": "8674b994.809458",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 490,
        "y": 100,
        "wires": []
    },
    {
        "id": "2426380b.b09da8",
        "type": "mqtt in",
        "z": "43f12961.0018d8",
        "name": "",
        "topic": "+/owntracks/+/+",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "b2da9abc.b33b68",
                "b19ac831.e13e28"
            ]
        ]
    },
    {
        "id": "2646374d.1029d8",
        "type": "function",
        "z": "7f89fc4.250c804",
        "name": "storeSonoff",
        "func": "const sonoffs = flow.get(\"sonoffs\") || []\nconst parts = msg.topic.split(\"/\")\nparts.splice(-1)\n\nconst sonoffBaseTopic = parts.join(\"/\")\nif (!sonoffs.includes(sonoffBaseTopic)) sonoffs.push(sonoffBaseTopic)\n\nflow.set(\"sonoffs\", sonoffs)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cdf10f3f.796c8",
        "type": "inject",
        "z": "16c1aedb.4b0961",
        "name": "sendConfig",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3600",
        "x": 110,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3e1d27b4.c370a8",
        "type": "inject",
        "z": "16c1aedb.4b0961",
        "name": "inspect",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 420,
        "wires": [
            [
                "d78ca5b9.3d2be8"
            ]
        ]
    },
    {
        "id": "d78ca5b9.3d2be8",
        "type": "function",
        "z": "16c1aedb.4b0961",
        "name": "showSonoffTopics",
        "func": "const sonoffs = flow.get(\"sonoffs\")\n\nmsg.payload = sonoffs\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 420,
        "wires": [
            [
                "fb70353a.c3f198"
            ]
        ]
    },
    {
        "id": "fb70353a.c3f198",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 510,
        "y": 420,
        "wires": []
    },
    {
        "id": "6713523b.175bec",
        "type": "inject",
        "z": "16c1aedb.4b0961",
        "name": "kill",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 620,
        "wires": [
            [
                "e7e9242a.4c2ba8"
            ]
        ]
    },
    {
        "id": "e7e9242a.4c2ba8",
        "type": "function",
        "z": "16c1aedb.4b0961",
        "name": "purgeSonoffTopics",
        "func": "flow.set(\"sonoffs\", [])\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b176c22d.40683",
        "type": "function",
        "z": "16c1aedb.4b0961",
        "name": "storeSonoff",
        "func": "const sonoffs = flow.get(\"sonoffs\") || []\nconst parts = msg.topic.split(\"/\")\nparts.splice(-1)\n\nconst sonoffBaseTopic = parts.join(\"/\")\nif (!sonoffs.includes(sonoffBaseTopic)) sonoffs.push(sonoffBaseTopic)\n\nflow.set(\"sonoffs\", sonoffs)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 200,
        "wires": [
            [
                "adef34f7.231798",
                "5c8b748a.952d8c"
            ]
        ]
    },
    {
        "id": "3c877772.417ae8",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "hallSensor",
        "topic": "hall.sensor.pir.data",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 660,
        "y": 1120,
        "wires": [
            [
                "d0209ea7.05eb1"
            ]
        ]
    },
    {
        "id": "19e8652a.0218fb",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 915,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d0209ea7.05eb1",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: \"studio\",\n    topic: msg.topic\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 1120,
        "wires": [
            [
                "19e8652a.0218fb"
            ]
        ]
    },
    {
        "id": "ce056c1b.4d3f8",
        "type": "filter",
        "z": "71545018.aa70d",
        "name": "DiagEvents",
        "property": "topic",
        "filter": "presence.+\\.changed",
        "ignorecase": true,
        "x": 810,
        "y": 420,
        "wires": [
            [
                "76a5ed72.f13894"
            ],
            []
        ]
    },
    {
        "id": "76a5ed72.f13894",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "filtered",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1050,
        "y": 440,
        "wires": []
    },
    {
        "id": "d4dfa9e2.3c2058",
        "type": "mqtt in",
        "z": "16c1aedb.4b0961",
        "name": "sonoff-tasmota lwt",
        "topic": "+/+/sonoff/+/LWT",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "a895abbe.abdf58",
                "d847b5b8.c65138"
            ]
        ]
    },
    {
        "id": "a895abbe.abdf58",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "raw",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "d847b5b8.c65138",
        "type": "function",
        "z": "16c1aedb.4b0961",
        "name": "",
        "func": "const parts = msg.topic.split(\"/\");\n\nconst accountId = parts[0];\nconst buildingId = parts[1];\nconst deviceId = parts[3];\n\nnode.send({\n    topic: [accountId, buildingId, deviceId, \"online\"].join(\".\"),\n    payload: msg.payload.toUpperCase() === \"ONLINE\",\n    source: \"sonoff\"\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 320,
        "wires": [
            [
                "8ee74d36.4e143",
                "ffc9e7d.d975218"
            ]
        ]
    },
    {
        "id": "8ee74d36.4e143",
        "type": "link out",
        "z": "16c1aedb.4b0961",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 475,
        "y": 320,
        "wires": []
    },
    {
        "id": "ffc9e7d.d975218",
        "type": "debug",
        "z": "16c1aedb.4b0961",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 510,
        "y": 360,
        "wires": []
    },
    {
        "id": "701237e7.45b538",
        "type": "link out",
        "z": "27c62c51.a48994",
        "name": "",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 455,
        "y": 620,
        "wires": []
    },
    {
        "id": "42e099a8.9a3278",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "matchDevicesToMACs",
        "func": "node.status({shape: \"dot\", fill: \"blue\", text: \"matching\"})\n\nconst G = global.get(\"globals\");\nconst {accountId, buildingId, payload: macsSeen = []} = msg\nconst {macDevices = {}} = G.getBuilding(accountId, buildingId);\n\nconst msgs = macsSeen\n    .filter(mac => macDevices[mac])\n    .map(mac => ({\n           accountId,\n           buildingId,\n           topic: [macDevices[mac], \"online\"].join(\".\"),\n           payload: true,\n           source: \"macscanner\"\n        })\n    );\n\nnode.status({});\n    \nreturn [msgs];\n",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 120,
        "wires": [
            [
                "a9e57dcb.155c6",
                "65c381cf.3dcee"
            ]
        ],
        "outputLabels": [
            "people"
        ]
    },
    {
        "id": "b419c00d.10c6e",
        "type": "link out",
        "z": "e74fac43.1f2b6",
        "name": "storePresenceCore",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 615,
        "y": 440,
        "wires": []
    },
    {
        "id": "e8388d22.17f37",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "DIAGS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 820,
        "y": 520,
        "wires": []
    },
    {
        "id": "1a9f3fd1.abb86",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "findDataOlderThanDays",
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 840,
        "y": 580,
        "wires": [
            [
                "61d8c28b.f2720c"
            ]
        ]
    },
    {
        "id": "61d8c28b.f2720c",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "findOldData",
        "func": "const [G, D, S] = global.get([\"globals\", \"dataEngine\", \"store\"]);\nconst days = msg.payload;\nconst millis = days * 24 * 60 * 60 * 1000;\nconst oldKeys = [];\n\nconst findOldData = (accountId, buildingId, obj) => Object.keys(obj).map(key => {\n    const {timestamp} = obj[key];\n        \n    if (timestamp && (Date.now() - timestamp > millis))\n        oldKeys.push({accountId, buildingId, key, timestamp});\n})\n\n\nG.getAccounts(accountId => findOldData(accountId, null, S[accountId]));\nG.iterateAllBuildings((accountId, buildingId) => findOldData(accountId, buildingId, S[accountId][buildingId]));\n\nreturn {days, millis, oldKeys};",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "e2aabf16.5df8b"
            ]
        ]
    },
    {
        "id": "e2aabf16.5df8b",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1210,
        "y": 580,
        "wires": []
    },
    {
        "id": "df38b8b9.3a63c8",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "purgeDataOlderThanDays",
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 830,
        "y": 620,
        "wires": [
            [
                "1e112504.db17cb"
            ]
        ]
    },
    {
        "id": "1e112504.db17cb",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "purgeOldData",
        "func": "const G = global.get(\"globals\")\nconst S = global.get(\"store\")\nconst days = msg.payload\nconst millis = days * 24 * 60 * 60 * 1000\nconst oldKeys = []\n\nconst findOldData = (accountId, buildingId, obj) => Object.keys(obj).map(key => {\n    const {timestamp} = obj[key]\n        \n    if (timestamp && (Date.now() - timestamp > millis))\n        oldKeys.push({accountId, buildingId, key, timestamp})\n})\n\n\nG.getAccounts(accountId => findOldData(accountId, null, S[accountId]))\nG.iterateAllBuildings((accountId, buildingId) => findOldData(accountId, buildingId, S[accountId][buildingId]))\n\noldKeys.map(obj => delete S[obj.accountId][obj.buildingId][obj.key])",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 620,
        "wires": [
            [
                "3cbbac08.283014"
            ]
        ]
    },
    {
        "id": "3cbbac08.283014",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1210,
        "y": 620,
        "wires": []
    },
    {
        "id": "b9b1ff31.251ed",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 530,
        "y": 1340,
        "wires": []
    },
    {
        "id": "99d81515.a26f78",
        "type": "mqtt in",
        "z": "16c1aedb.4b0961",
        "name": "sonoff-tasmota telemetry",
        "topic": "+/+/sonoff/+/SENSOR",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "c037561b.d73db8"
            ]
        ]
    },
    {
        "id": "76d045a6.82a2bc",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "ChainTestEventStudio",
        "topic": "studio",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1320,
        "y": 900,
        "wires": [
            [
                "cab33915.8c9e48"
            ]
        ]
    },
    {
        "id": "e3ed0bfc.8716c8",
        "type": "link out",
        "z": "8d7a0ee3.fbbaf",
        "name": "sendTestEvent",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 1615,
        "y": 900,
        "wires": []
    },
    {
        "id": "cab33915.8c9e48",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "testevent",
        "func": "msg = {\n    accountId: \"jfdi\",\n    buildingId: msg.topic,\n    topic: \"chaineventtest\",\n    source: \"test\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "e3ed0bfc.8716c8"
            ]
        ]
    },
    {
        "id": "a6d7d4e1.b22b48",
        "type": "inject",
        "z": "8d7a0ee3.fbbaf",
        "name": "ChainTestEventChampions",
        "topic": "champions",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1330,
        "y": 860,
        "wires": [
            [
                "cab33915.8c9e48"
            ]
        ]
    },
    {
        "id": "36d885f2.77e54a",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "d5fc2e5e.a522f",
        "type": "mqtt in",
        "z": "4ec77ac0.46dd44",
        "name": "+/+/esp/+/status",
        "topic": "+/+/esp/+/status",
        "qos": "2",
        "broker": "74909a69.35ca34",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "7b430948.0f1278"
            ]
        ]
    },
    {
        "id": "4f094647.6b9788",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "log",
        "func": "// const G = global.get(\"globals\");\n// const D = global.get(\"dataEngine\");\n\nconst {accountId, buildingId, data, topic, source: api, topic: event, ruleId} = msg;\nconst parts = topic.split(\".\");\nconst deviceId = parts.length == 4 ? [parts[0], parts[1]].join(\".\") : parts[0];\nconst {value: newOn, timestamp: to, previousValue: oldOn, previousTimestamp: from} = data;\n\nif (oldOn != newOn) {\n    node.status({text: deviceId + \":\" + oldOn + \"->\" + newOn});\n    \n    const newMsg = {\n        payload: {\n            accountId,\n            buildingId,\n            deviceId,\n            state: oldOn,\n            from,\n            to,\n            durationSecs: Math.round((to - from) / 1000, 0),\n            api,\n            event,\n            ruleId\n        }\n    };\n    \n    return newMsg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "3ed22aaf.ec8716",
                "645b1dd2.e54104"
            ]
        ]
    },
    {
        "id": "3ed22aaf.ec8716",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "c2b97fed.7ecfb"
        ],
        "x": 1235,
        "y": 380,
        "wires": []
    },
    {
        "id": "645b1dd2.e54104",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1270,
        "y": 340,
        "wires": []
    },
    {
        "id": "26ef092e.abeaf6",
        "type": "filter",
        "z": "71545018.aa70d",
        "name": "StateChangeEvents",
        "property": "topic",
        "filter": "\\.on\\.changed",
        "ignorecase": true,
        "x": 840,
        "y": 360,
        "wires": [
            [
                "b9822a3a.ea5988",
                "4f094647.6b9788"
            ],
            []
        ]
    },
    {
        "id": "b9822a3a.ea5988",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "ON changed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 340,
        "wires": []
    },
    {
        "id": "8c69982b.f609f8",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "battery",
        "topic": "battery",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 740,
        "wires": [
            [
                "b288c151.1dead"
            ]
        ]
    },
    {
        "id": "b288c151.1dead",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "get building data for one metric",
        "func": "const G = global.get(\"globals\")\nconst D = global.get(\"dataEngine\")\n\nG.iterateAllBuildings((accountId, buildingId) => node.send({topic: accountId + \".\" + buildingId, payload:D.getBuildingMetricData(accountId, buildingId, msg.topic)}))\n",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 740,
        "wires": [
            [
                "c5cb5021.e372b"
            ]
        ]
    },
    {
        "id": "c5cb5021.e372b",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 610,
        "y": 740,
        "wires": []
    },
    {
        "id": "1210a412.3f2f0c",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "online",
        "topic": "online",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 90,
        "y": 780,
        "wires": [
            [
                "b288c151.1dead"
            ]
        ]
    },
    {
        "id": "763b0123.3849e",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "temperature",
        "topic": "temperature",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 820,
        "wires": [
            [
                "b288c151.1dead"
            ]
        ]
    },
    {
        "id": "929fceb8.54a7d",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "buildingId",
        "topic": "buildingId",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "a9581ef1.1d429",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "get account data for one metric",
        "func": "const G = global.get(\"globals\")\nconst D = global.get(\"dataEngine\")\n\nG.iterateAllBuildings((accountId, buildingId) => node.send({payload:D.getBuildingMetricData(accountId, buildingId, msg.topic)}))\n",
        "outputs": 1,
        "noerr": 0,
        "x": 350,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "46b0c434.946b5c",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "error diags",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 830,
        "y": 460,
        "wires": []
    },
    {
        "id": "4690c42b.67a57c",
        "type": "switch",
        "z": "71545018.aa70d",
        "name": "error?",
        "property": "errorMsg",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 480,
        "wires": [
            [
                "46b0c434.946b5c"
            ],
            [
                "e8388d22.17f37"
            ]
        ]
    },
    {
        "id": "65c381cf.3dcee",
        "type": "link out",
        "z": "e74fac43.1f2b6",
        "name": "storePeopleMacPresence",
        "links": [
            "b6707391.0f5c2"
        ],
        "x": 595,
        "y": 160,
        "wires": []
    },
    {
        "id": "63a1b391.301d1c",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "inspectAuth",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "1f3c34c8.050e9b"
            ]
        ]
    },
    {
        "id": "1f3c34c8.050e9b",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "getAuth",
        "func": "// 12/06/2017 now properly displays eventRules index\nmsg.payload = {\n    accounts: global.get(\"authObject\")\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "68af0228.fcc75c"
            ]
        ]
    },
    {
        "id": "68af0228.fcc75c",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 490,
        "y": 540,
        "wires": []
    },
    {
        "id": "ae7908eb.50b5f8",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "msg.payload = {\n    state: {\n        \"$\": \"Edm.String\",\n        \"_\": \"on\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 580,
        "wires": [
            [
                "c07c2afc.a3c458"
            ]
        ]
    },
    {
        "id": "363c2141.5cf49e",
        "type": "http in",
        "z": "a6d79fe1.ede4f",
        "name": "emailToUid",
        "url": "/BobbAPI/2.0/auth/uid/:email/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 560,
        "wires": [
            [
                "6d862e7b.9fb35",
                "6c32729d.c5cf5c"
            ]
        ]
    },
    {
        "id": "761acf3b.e4c51",
        "type": "switch",
        "z": "4c7935db.1a5afc",
        "name": "check",
        "property": "authToken",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "adminAuthToken",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 60,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "tokenOK",
            ""
        ]
    },
    {
        "id": "27444e71.0160a2",
        "type": "http in",
        "z": "a6d79fe1.ede4f",
        "name": "emailToUid",
        "url": "/BobbAPI/2.0/auth/uid/:email",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 600,
        "wires": [
            [
                "6d862e7b.9fb35",
                "6c32729d.c5cf5c"
            ]
        ]
    },
    {
        "id": "1fe31c3.ad9aee4",
        "type": "function",
        "z": "4c7935db.1a5afc",
        "name": "token",
        "func": "msg.authToken = msg.req.params.authToken || msg.req.headers[\"x-authtoken\"] || msg.req.headers.authtoken;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "761acf3b.e4c51"
            ]
        ]
    },
    {
        "id": "f0bf6181.2d22",
        "type": "http response",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 580,
        "wires": []
    },
    {
        "id": "77357dac.870204",
        "type": "change",
        "z": "a6d79fe1.ede4f",
        "name": "badResp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "bad request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "401",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 600,
        "wires": [
            [
                "f0bf6181.2d22"
            ]
        ]
    },
    {
        "id": "2c397d36.8c2dc2",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "query",
        "func": "msg.table = \"Users\";\nmsg.where = [\"PartitionKey eq ?\", msg.req.params.email];\nmsg.top = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "4dcdd123.18b01"
            ]
        ]
    },
    {
        "id": "4dcdd123.18b01",
        "type": "subflow:1475fab7.7ab5a5",
        "z": "a6d79fe1.ede4f",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "1dc918d6.29d237",
                "57a76210.9d380c"
            ],
            [
                "77357dac.870204"
            ]
        ]
    },
    {
        "id": "6d862e7b.9fb35",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 250,
        "y": 600,
        "wires": []
    },
    {
        "id": "1dc918d6.29d237",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "oData",
        "func": "const G = global.get(\"globals\");\n\nmsg.payload = G.oDataToObject(msg.payload.entries[0], true);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 540,
        "wires": [
            [
                "f0bf6181.2d22",
                "ee8cf6e3.b54948"
            ]
        ]
    },
    {
        "id": "57a76210.9d380c",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 870,
        "y": 500,
        "wires": []
    },
    {
        "id": "ee8cf6e3.b54948",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1070,
        "y": 540,
        "wires": []
    },
    {
        "id": "14b0ca30.a45326",
        "type": "http in",
        "z": "a6d79fe1.ede4f",
        "name": "uidToToken",
        "url": "/BobbAPI/2.0/auth/token/:uid/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "57cc3968.9cfd18",
                "bdeeddb9.13545"
            ]
        ]
    },
    {
        "id": "64adb5f3.30744c",
        "type": "http response",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 720,
        "wires": []
    },
    {
        "id": "c39e6561.9ea0c8",
        "type": "change",
        "z": "a6d79fe1.ede4f",
        "name": "badResp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "bad request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "401",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 760,
        "wires": [
            [
                "64adb5f3.30744c"
            ]
        ]
    },
    {
        "id": "7a704fbb.0d28b",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "query",
        "func": "const uid = msg.req.params.uid\nmsg.table = \"UserAuthtoken\";\nmsg.where = [\"PartitionKey eq ?\", uid];\nmsg.top = 1;\nmsg.uid = uid;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "9e46604f.b1e69"
            ]
        ]
    },
    {
        "id": "9e46604f.b1e69",
        "type": "subflow:1475fab7.7ab5a5",
        "z": "a6d79fe1.ede4f",
        "x": 620,
        "y": 720,
        "wires": [
            [
                "c3347615.b96358",
                "3a36b2f.b338b4e"
            ],
            [
                "c39e6561.9ea0c8"
            ]
        ]
    },
    {
        "id": "57cc3968.9cfd18",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 250,
        "y": 780,
        "wires": []
    },
    {
        "id": "c3347615.b96358",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "oData",
        "func": "const G = global.get(\"globals\");\nconst {entries} = msg.payload\n\nif (entries.length) {\n    msg.payload = G.oDataToObject(entries[0], true);\n    node.send([msg, null]);\n} else {\n    node.warn(\"No entry\")\n    node.send([null, msg]);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 830,
        "y": 720,
        "wires": [
            [
                "275569d0.5cd406",
                "64adb5f3.30744c"
            ],
            [
                "39a67b28.7917e4"
            ]
        ]
    },
    {
        "id": "3a36b2f.b338b4e",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 680,
        "wires": []
    },
    {
        "id": "275569d0.5cd406",
        "type": "debug",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 680,
        "wires": []
    },
    {
        "id": "168546c1.be8129",
        "type": "http in",
        "z": "a6d79fe1.ede4f",
        "name": "uidToToken",
        "url": "/BobbAPI/2.0/auth/token/:uid",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "57cc3968.9cfd18",
                "bdeeddb9.13545"
            ]
        ]
    },
    {
        "id": "6c32729d.c5cf5c",
        "type": "subflow:4c7935db.1a5afc",
        "z": "a6d79fe1.ede4f",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "2c397d36.8c2dc2"
            ],
            [
                "77357dac.870204"
            ]
        ]
    },
    {
        "id": "bdeeddb9.13545",
        "type": "subflow:4c7935db.1a5afc",
        "z": "a6d79fe1.ede4f",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "7a704fbb.0d28b"
            ],
            [
                "c39e6561.9ea0c8"
            ]
        ]
    },
    {
        "id": "39a67b28.7917e4",
        "type": "data-generator",
        "z": "a6d79fe1.ede4f",
        "name": "newToken",
        "field": "token",
        "fieldType": "msg",
        "syntax": "text",
        "template": "{{guid}}.{{guid}}",
        "x": 920,
        "y": 820,
        "wires": [
            [
                "7c091773.167758"
            ]
        ]
    },
    {
        "id": "7c091773.167758",
        "type": "function",
        "z": "a6d79fe1.ede4f",
        "name": "newToken",
        "func": "const [G, S] = global.get([\"globals\", \"server\"]);\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\nconst entGen = azureStorage.TableUtilities.entityGenerator;\nconst tableName = 'UserAuthtoken';\n\nconst rec = {\n    PartitionKey: msg.uid,\n    RowKey: \"1\",\n    Token: entGen.String(msg.token),\n    TokenDurationMins: entGen.Int32(S.defaults.tokenDurationMins),\n    Expires: entGen.DateTime(new Date() + (S.defaults.tokenDurationMins * 60 * 1000))\n};\n\ntableService.createTableIfNotExists(tableName, (error, result, response) => null);\n\ntableService.insertEntity(tableName, rec, function (error, result, response) {\n    msg.payload = {topic: msg.topic, status: error ? \"failed\" : \"succeeded\"};\n    msg.payload.error = error;\n    msg.payload.rec = rec;\n    \n    if (error) {\n        node.send([null, msg]);\n    } else\n        node.send([msg, null]);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1080,
        "y": 820,
        "wires": [
            [
                "a5e861db.60b92"
            ]
        ]
    },
    {
        "id": "a4d03ae6.0b2798",
        "type": "link in",
        "z": "a6d79fe1.ede4f",
        "name": "uidToTokenReentry",
        "links": [
            "a5e861db.60b92"
        ],
        "x": 475,
        "y": 680,
        "wires": [
            [
                "9e46604f.b1e69"
            ]
        ]
    },
    {
        "id": "a5e861db.60b92",
        "type": "link out",
        "z": "a6d79fe1.ede4f",
        "name": "",
        "links": [
            "a4d03ae6.0b2798"
        ],
        "x": 1195,
        "y": 820,
        "wires": []
    },
    {
        "id": "99e41589.f72248",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST data in",
        "url": "/BobbAPI/2.0/data/:accountId/:buildingId/:key/:metric/:value/:authToken",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 1980,
        "wires": [
            [
                "118758e0.33df37"
            ]
        ]
    },
    {
        "id": "98b0c2e7.7a42",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST data in",
        "url": "/BobbAPI/2.0/data/:accountId/:buildingId/:key/:metric/:value",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 2020,
        "wires": [
            [
                "118758e0.33df37"
            ]
        ]
    },
    {
        "id": "118758e0.33df37",
        "type": "subflow:2161b62e.a025aa",
        "z": "9556cd1.486d63",
        "name": "Auth",
        "x": 290,
        "y": 1980,
        "wires": [
            [
                "82b75c02.34ace"
            ],
            []
        ]
    },
    {
        "id": "82b75c02.34ace",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "assemble",
        "func": "const G = global.get(\"globals\");\nG.handleQuery(msg, node);\n\nconst {accountId, buildingId, key, metric, value: rawValue} = msg;\nconst topic = [accountId, buildingId, key, metric].join(\".\");\nconst lcValue = rawValue.toLowerCase();\nconst value = [\"true\", \"false\"].includes(lcValue) ? (lcValue === \"true\") : rawValue;\n\nreturn [\n    Object.assign(msg, {topic, payload: \"OK\"}),\n    {\n        topic,\n        payload: value\n    }\n];",
        "outputs": 2,
        "noerr": 0,
        "x": 440,
        "y": 1980,
        "wires": [
            [
                "ee03da70.2804f8",
                "911db55d.60c9d8"
            ],
            [
                "6f3a2ce.39346d4",
                "7ea0bcd5.cc5264"
            ]
        ],
        "outputLabels": [
            "response",
            "data out"
        ]
    },
    {
        "id": "6f3a2ce.39346d4",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 615,
        "y": 2020,
        "wires": []
    },
    {
        "id": "911db55d.60c9d8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 1940,
        "wires": []
    },
    {
        "id": "7ea0bcd5.cc5264",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 1980,
        "wires": []
    },
    {
        "id": "8d2b3ebb.9ec6c",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 470,
        "y": 1940,
        "wires": []
    },
    {
        "id": "e967d9ca.591c38",
        "type": "debug",
        "z": "7a8e8ea9.9ee48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "a8e8c927.8f94e8",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "GET device on-state",
        "url": "/BobbAPI/2.0/device/:accountId/:buildingId/:deviceId/:state/:authToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "7193f4b.3f3a80c",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "8211b32d.65f1e"
            ]
        ]
    },
    {
        "id": "f3e56bb.1c9fa98",
        "type": "function",
        "z": "f96e1e80.b1c1a",
        "name": "memoize",
        "func": "const {memoizeResult} = global.get(\"globals\");\n\nnode.send({topic: \"two\", payload: memoizeResult(() => 1+1, \"two\")});\nnode.send({topic: \"one\", payload: memoizeResult(() => Number(\"1\"), \"one\")});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 380,
        "wires": [
            [
                "f46ca70e.a9c828"
            ]
        ]
    },
    {
        "id": "784f56c3.e78528",
        "type": "inject",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 460,
        "y": 380,
        "wires": [
            [
                "f3e56bb.1c9fa98"
            ]
        ]
    },
    {
        "id": "f46ca70e.a9c828",
        "type": "debug",
        "z": "f96e1e80.b1c1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 790,
        "y": 380,
        "wires": []
    },
    {
        "id": "89a9ecf2.22dcf",
        "type": "function",
        "z": "18e12be8.f7c244",
        "name": "bobbAuth",
        "func": "const {perm, trimmed, req: {url, method, headers: {authorization} = {}, params: {accountId, buildingId, deviceId}}} = msg;\nconst resource = [accountId, buildingId, deviceId].filter(e=> e!== undefined).join(\".\");\nconst connStr = global.get(\"azureConnStr\");\nconst secretKey = global.get(\"secretKey\");\n\nconst bobbAuthLib = global.get(\"bobbAuthLib\");\nconst [,token] = authorization.split(\" \");\n\nnode.warn(bobbAuthLib.version());\n\nconst {BobbAuthorisation, BobbAcl, loadAclFromBlob} = bobbAuthLib;\n\nconst bobbAuth = new BobbAuthorisation({\n    connStr,\n    secretKey,\n    audience: \"Bobb\",\n    issuer: \"JFDI\"\n});\n\nloadAclFromBlob(connStr, \"bobb-config\", \"acls.json\")\n    .then(authObj => {\n        const bobbAcl = new BobbAcl(authObj)\n\n        bobbAuth.verifyApiKey(token)\n            .then(claims => {\n                const {sub} = claims;\n                const permitted = bobbAcl.can(sub, resource, perm);\n        \n                const newMsg = Object.assign(msg, {auth: {claims, acl: bobbAcl.getAcl(sub), perm, trimmed, resource, permitted}});\n                \n                if (claims.error || (!permitted && !trimmed))\n                    node.send([null, Object.assign(newMsg, {statusCode: 401, payload: \"Unauthorised\"})]);\n                else\n                    node.send([newMsg, null]);\n            })\n            .catch(e => node.warn(\"verifyApiKey: \" + e));\n    })\n    .catch(e => node.warn(\"loadAclFromBlob: \" + e));\n    ",
        "outputs": 2,
        "noerr": 0,
        "x": 200,
        "y": 80,
        "wires": [
            [],
            [
                "9285bb53.c64618"
            ]
        ]
    },
    {
        "id": "190985e6.14883a",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST buildings list 1.0",
        "url": "/BobbAPI/1.0/buildings/:accountId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2340,
        "wires": [
            [
                "59622964.a40648",
                "df509970.587538"
            ]
        ]
    },
    {
        "id": "59622964.a40648",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 350,
        "y": 2300,
        "wires": []
    },
    {
        "id": "da991375.9b5f3",
        "type": "inject",
        "z": "8674b994.809458",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 240,
        "wires": [
            [
                "147120e0.1682df"
            ]
        ]
    },
    {
        "id": "147120e0.1682df",
        "type": "function",
        "z": "8674b994.809458",
        "name": "regexes",
        "func": "const endpoints = [\n    {\n        name: \"set device state\",\n        methods: [\"GET\", \"PUT\", \"POST\"],\n        regex: /\\/\\d.\\d\\/device\\/(?<accountId>.+?)\\/(?<buildingId>.+?)\\/(?<deviceId>.+?)\\//,\n        permissions: [\"changestate\"]\n    },\n    {\n        name: \"store some data\",\n        methods: [\"POST\"],\n        regex: /\\/\\d.\\d\\/data\\/(?<accountId>.+?)\\/(?<buildingId>.+?)\\/(?<deviceId>.+?)\\//,\n        permissions: [\"changestate\"]\n    },\n    {\n        name: \"list building devices\",\n        methods: [\"POST\", \"GET\"],\n        regex: /\\/\\d.\\d\\/devices\\/(?<accountId>.+?)\\/(?<buildingId>.+?)\\/*$/,\n        permissions: [\"readstate\"]\n    }\n];\n\nnode.warn(endpoints[0].regex);\nconst t = \"/1.0/device/wee/poo/vom/\";\nconst [, a, b, d] = endpoints[0].regex.exec(t);\nmsg.payload = {a, b, d};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 240,
        "wires": [
            [
                "25ce32c7.6a91ce"
            ]
        ]
    },
    {
        "id": "25ce32c7.6a91ce",
        "type": "debug",
        "z": "8674b994.809458",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "18e32e6f.05f162",
        "type": "inject",
        "z": "8674b994.809458",
        "name": "testBobbAuth",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 340,
        "wires": [
            [
                "c24498dd.af5c18"
            ]
        ]
    },
    {
        "id": "c24498dd.af5c18",
        "type": "function",
        "z": "8674b994.809458",
        "name": "testBobbAuth",
        "func": "const tjToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NTk2NjMxNTAsImlhdCI6MTU1NzA3MTE1MCwiYXVkIjoiQm9iYiIsImlzcyI6IkpGREkiLCJzdWIiOiJ0akBqZmRpLmluZm8ifQ.q_ll5-J_LleSXidPwyVlB_-m4swqLgJo949a5KayzdM\";\nconst jsToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjQ3MTA0MTE1NTQsImlhdCI6MTU1NjgxMTU1NCwiYXVkIjoiQm9iYiIsImlzcyI6IkpGREkiLCJzdWIiOiJqc0BqZmRpLmluZm8ifQ.wD6ldaaQPLX83pyzFf3Cc9Gapiy4OhhIfd7pLbjDshk\";\n\nconst method = \"GET\";\nconst makeMsg = (accountId, buildingId, deviceId, token) => \n    ({\n        accountId, buildingId, deviceId, \n        req: {\n            method, \n            url: [\"/BobbAPI/2.0/device\", accountId, buildingId, deviceId, \"on\"].filter(e => e !== undefined).join(\"/\"),\n            headers:{\n                authorization: \"Bearer \" + token\n            },\n            params: {\n                accountId, buildingId, deviceId\n            }\n        }\n    });\n\nglobal.set(\"bobbAcl\", undefined);\n\nnode.send({...makeMsg(\"jfdi\", undefined, undefined, tjToken), perm: \"readstate\" });\nnode.send({...makeMsg(\"jfdi\", undefined, undefined, jsToken), perm: \"readstate\" });\n// node.send({...makeMsg(\"jfdi\", \"champions\", \"lounge.floorlamp1\"), perm: \"changestate\" });\n// node.send({...makeMsg(\"jfdi\", \"studio\", \"office.jonsdesklamp\"), perm: \"changestate\" });\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 340,
        "wires": [
            [
                "d76ceec5.0fca7"
            ]
        ]
    },
    {
        "id": "b44c46de.22edc8",
        "type": "debug",
        "z": "8674b994.809458",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "f868e834.24a0b8",
        "type": "inject",
        "z": "8674b994.809458",
        "name": "token",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 300,
        "wires": [
            [
                "f8353e59.dc892"
            ]
        ]
    },
    {
        "id": "f8353e59.dc892",
        "type": "function",
        "z": "8674b994.809458",
        "name": "token",
        "func": "const connStr = global.get(\"azureConnStr\");\nconst secretKey = global.get(\"secretKey\");\n\nconst {BobbAuthorisation} = global.get(\"bobbAuthLib\");\nconst {newApiKey} = new BobbAuthorisation({\n    connStr,\n    secretKey,\n    audience: \"Bobb\",\n    issuer: \"JFDI\"\n});\n\nnewApiKey({ expiresIn: \"30d\", subject: \"tj@jfdi.info\" }).then(longToken => {\n    node.send({payload:longToken});\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 300,
        "wires": [
            [
                "26cff42e.abe50c"
            ]
        ]
    },
    {
        "id": "26cff42e.abe50c",
        "type": "debug",
        "z": "8674b994.809458",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 440,
        "y": 300,
        "wires": []
    },
    {
        "id": "d76ceec5.0fca7",
        "type": "subflow:18e12be8.f7c244",
        "z": "8674b994.809458",
        "name": "",
        "env": [],
        "x": 500,
        "y": 340,
        "wires": [
            [
                "b44c46de.22edc8"
            ],
            [
                "b44c46de.22edc8"
            ]
        ]
    },
    {
        "id": "bcdadc71.31a33",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 500,
        "y": 2320,
        "wires": [
            [
                "c193a754.ee1b38"
            ],
            [
                "d7e1417e.f7b64"
            ]
        ]
    },
    {
        "id": "df509970.587538",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 2340,
        "wires": [
            [
                "bcdadc71.31a33"
            ]
        ]
    },
    {
        "id": "d7e1417e.f7b64",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 2320,
        "wires": []
    },
    {
        "id": "9d716e7.1e6959",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 330,
        "y": 2220,
        "wires": []
    },
    {
        "id": "c193a754.ee1b38",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "buildings",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nG.extractParams(msg);\nconst {accountId, payload: {bare}, auth: {permitted, trimmed, acl}} = msg;\nconst account = global.get(\"accounts\")[accountId];\n\nconst aclResources = [].concat.apply([], acl.map(item => Object.keys(item)));\nconst securityTrim = buildingId => permitted || (trimmed && aclResources.includes([accountId, buildingId].join(\".\")));\n\nif (account) {  // valid data\n    node.status({});\n    \n    delete msg.payload.bare;\n\n    const buildings = Object.keys(account.buildings)\n        .filter(buildingId => securityTrim(buildingId))\n        .map(buildingId => Object.assign(\n            G.shallowCopy(account.buildings[buildingId]), \n            {present: D.getDataNode(accountId, buildingId, \"presence.people\").value}\n        )\n    );\n\n    const {length: count} = buildings, {commonName} = account;\n    \n    if (bare)\n        msg.payload = buildings;\n    else\n        msg.payload = {\n            accountId,\n            commonName,\n            count,\n            buildings\n        };\n    \n    msg.statusCode = 200;\n    \n    node.status(G.nodeStatus(false, accountId + \".\" + count));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 2300,
        "wires": [
            [
                "d7e1417e.f7b64",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "41f2b8c6.119f78",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST query devices 1.0",
        "url": "/BobbAPI/1.0/devices/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "c8bcf7cc.5ce8f8"
            ]
        ]
    },
    {
        "id": "4539c246.6e88ec",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getFilteredDeviceArray",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node, {noStatus: true});\n\nnode.status({});\n\nconst {error, accountId, buildingId, building, building: {commonName, devices}, payload: {filter = {}, bare = false}} = msg;\n    \nif (!error) {\n    const deviceMatches = Object.entries(devices)\n        .filter(([deviceId, device]) => G.isActuator(device) && G.objectMatches(device, filter))\n        .map(([deviceId, device]) => {\n            const {roomId} = device;\n            const {label: room = roomId} = building.rooms[roomId] || {};\n            const fullState = D.getDeviceDataValues(accountId, buildingId, null, deviceId);\n            return Object.assign(device, {deviceId, room, roomId}, {state: fullState});\n        })\n        .sort(G.deviceDescriptionSortComparator);\n\n    const {length: count} = deviceMatches;\n    if (bare) {\n        msg.payload = deviceMatches;\n    } else {\n        msg.payload = {\n            accountId,\n            buildingId,\n            commonName,\n            count,\n            devices: deviceMatches\n        };\n    }\n    \n    msg.statusCode = 200;\n\n    node.status(G.nodeStatus(false, accountId + \".\" + buildingId + \": \" + count));\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "a5fc0d3.ded69f",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "a5fc0d3.ded69f",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "c8bcf7cc.5ce8f8",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 200,
        "wires": [
            [
                "a09cd9dc.5e42e8"
            ]
        ]
    },
    {
        "id": "a09cd9dc.5e42e8",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 460,
        "y": 200,
        "wires": [
            [
                "4539c246.6e88ec",
                "2bfa621d.ab09ce"
            ],
            []
        ]
    },
    {
        "id": "9285bb53.c64618",
        "type": "http response",
        "z": "18e12be8.f7c244",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "6121c9bc.9aabd8",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getBuildingEnvironment",
        "func": "// 27-06-2017 brand new api endpoint\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId} = msg\n \nmsg.payload = mapObjectsToArray(D.getBuildingData(accountId, buildingId));\n\nreturn msg;\n\nfunction mapObjectsToArray(object) {\n    return Object.keys(object).map(key => Object.assign({key: key}, D.decomposeStoreKey(accountId, buildingId, key), object[key]));\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 1860,
        "wires": [
            [
                "7ea2d938.a20ac8",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "7ea2d938.a20ac8",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 910,
        "y": 1860,
        "wires": []
    },
    {
        "id": "8752eccf.ca7a6",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET building environment 1.0",
        "url": "/BobbAPI/1.0/environment/building/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "e826607e.ab0a8"
            ]
        ]
    },
    {
        "id": "e826607e.ab0a8",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1860,
        "wires": [
            [
                "5c674b4e.188694"
            ]
        ]
    },
    {
        "id": "5c674b4e.188694",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 480,
        "y": 1860,
        "wires": [
            [
                "6121c9bc.9aabd8"
            ],
            []
        ]
    },
    {
        "id": "c759ae56.8a9cb",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getUser",
        "func": "const {auth: {acl}} = msg;\n\nconst aclResources = () => [].concat.apply([], acl.map(item => Object.keys(item)));\nconst aclAccounts = () => aclResources().map(resource=> {\n    const [accountId] = resource.split(\".\");\n    return accountId;\n});\n\nconst accts = aclAccounts();\n\nif (accts) {\n    msg.payload = accts;\n} else {\n    msg.payload = \"unauthorised\";\n    msg.statusCode = 401;\n}\n\nreturn msg;\n",
        "outputs": "1",
        "noerr": 0,
        "x": 620,
        "y": 2620,
        "wires": [
            [
                "3ae58a9.58ad676",
                "ee5611b6.36162"
            ]
        ],
        "outputLabels": [
            "result"
        ]
    },
    {
        "id": "3ae58a9.58ad676",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 750,
        "y": 2620,
        "wires": []
    },
    {
        "id": "a055b0c4.10eb7",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST user query 1.0",
        "url": "/BobbAPI/1.0/user/accounts",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2620,
        "wires": [
            [
                "ffc9c8f0.55d4b8",
                "c0eb381f.7b7988"
            ]
        ]
    },
    {
        "id": "ffc9c8f0.55d4b8",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 2620,
        "wires": [
            [
                "10396591.7c326a"
            ]
        ]
    },
    {
        "id": "10396591.7c326a",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 460,
        "y": 2620,
        "wires": [
            [
                "c759ae56.8a9cb"
            ],
            []
        ]
    },
    {
        "id": "c0eb381f.7b7988",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 350,
        "y": 2660,
        "wires": []
    },
    {
        "id": "ba79f30a.8e298",
        "type": "change",
        "z": "9556cd1.486d63",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 880,
        "wires": [
            [
                "cc02b65e.5393c8"
            ]
        ]
    },
    {
        "id": "cc02b65e.5393c8",
        "type": "subflow:18e12be8.f7c244",
        "z": "9556cd1.486d63",
        "name": "",
        "env": [],
        "x": 440,
        "y": 880,
        "wires": [
            [
                "ab0ed0a2.6c688"
            ],
            []
        ]
    },
    {
        "id": "a3b040ea.293ef",
        "type": "http in",
        "z": "9556cd1.486d63",
        "name": "POST device state 1.0",
        "url": "/BobbAPI/1.0/device/:accountId/:buildingId/:deviceId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "ba79f30a.8e298"
            ]
        ]
    },
    {
        "id": "fa0f9ab3.6ffe68",
        "type": "link in",
        "z": "9556cd1.486d63",
        "name": "setDeviceState",
        "links": [
            "701cf8dd.c3b738",
            "5450281f.9bda18",
            "7033d356.9957dc",
            "c89ed9ec.4a10c8",
            "efe34f9d.1bf2",
            "aa16c713.809fa8",
            "876e3e1e.ab4c6",
            "e46ec88a.0563c8",
            "42f3e0b4.c584a"
        ],
        "x": 475,
        "y": 920,
        "wires": [
            [
                "ab0ed0a2.6c688",
                "32052ac6.d68bc6"
            ]
        ]
    },
    {
        "id": "ab0ed0a2.6c688",
        "type": "function",
        "z": "9556cd1.486d63",
        "name": "procDevice",
        "func": "// new API endpoint\n// device state in payload\nconst [G, D, S] = global.get([\"globals\", \"dataEngine\", \"server\"]);\n\nG.handleQuery(msg, node, {nostatus: true});\n\nconst {accountId, buildingId, building, source = \"Command API\", device, state, cause, error, ruleId, eventId} = msg;\nconst payload = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : {};\nconst duration = msg.duration || payload.duration;\nconst offTime = (payload.offTime ? new Date(payload.offTime) : (duration ? new Date(new Date().getTime() + (duration * 60 * 1000)) : null));\nif (payload.duration) delete payload.duration;\n\nconst { delay = 0, priority = 1 } = payload;\n\nif (!error) {\n    const deviceId = msg.deviceId || msg.id;\n\n    let oldState;\n    \n    if (payload.hasOwnProperty(\"on\")) {\n        oldState = (D.getDataNode(accountId, buildingId, [deviceId, \"on\"].join(\".\")) || {value: false, timestamp: 0});\n        const oldOn = oldState.value;\n        const newState = state || payload.on;\n        payload.on = G.normaliseState(newState, oldOn);\n    }\n\n    if (offTime && payload.on) {\n        G.scheduleJob({\n            time: offTime, \n            topic: [accountId, buildingId, deviceId].join(\".\"), \n            url: `${G.getApiBaseUrl()}/device/${accountId}/${buildingId}/${deviceId}/off`,\n            body: {\n                event: \"offTime\", \n                ruleId: new Date().toTimeString() + \">\" + offTime.toTimeString(),\n                priority: S.defaults.commandPriorities.timeouts || 2\n            }\n        });\n    }\n    \n    const swMsg = {\n        accountId, \n        buildingId, \n        topic: deviceId,\n        deviceId, \n        api: device.api, \n        device: device, \n        eventId,\n        ruleId, \n        delay,\n        cause,\n        source,\n        payload: Object.assign(payload, {offTime})\n    };\n    \n    msg.statusCode = 200;\n    msg.payload = \"OK\";\n\n    node.send([swMsg, msg]);\n    node.status(G.nodeStatus(false, buildingId + \":\" + deviceId + \":\" + swMsg.payload.on));\n}\n\n",
        "outputs": "2",
        "noerr": 0,
        "x": 650,
        "y": 880,
        "wires": [
            [
                "441b33.9f1794cc",
                "b85bbb14.7ccbc8"
            ],
            [
                "ed5174aa.afbfd8",
                "ee03da70.2804f8"
            ]
        ]
    },
    {
        "id": "32052ac6.d68bc6",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 650,
        "y": 840,
        "wires": []
    },
    {
        "id": "441b33.9f1794cc",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "send2API",
        "links": [
            "b6707391.0f5c2",
            "d7700d1d.f500d"
        ],
        "x": 855,
        "y": 880,
        "wires": []
    },
    {
        "id": "b85bbb14.7ccbc8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 881,
        "y": 834,
        "wires": []
    },
    {
        "id": "ed5174aa.afbfd8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "STATUS",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 900,
        "y": 920,
        "wires": []
    },
    {
        "id": "4ca6bf52.4f02a",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "POST building environment 1.0",
        "url": "/BobbAPI/1.0/environment/building/:accountId/:buildingId",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 2460,
        "wires": [
            [
                "95476b8a.30d968"
            ]
        ]
    },
    {
        "id": "2d7833cb.3fb30c",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getBuildingEnvironment",
        "func": "// 27-06-2017 brand new api endpoint\nconst G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId, payload: {roomId, metric}} = msg;\nconst metrics = Array.isArray(metric) ? metric : [metric];\nconst rooms = Array.isArray(roomId) ? roomId : [roomId];\n\nconst mapObjectsToArray = object => Object.keys(object).map(key => Object.assign({key}, D.decomposeStoreKey(accountId, buildingId, key), object[key]));\n\nif (accountId && buildingId) {\n    if (roomId && metric) {\n        msg.payload = metrics.reduce((a, metric) => [...a, ...mapObjectsToArray(D.getRoomMetricData(accountId, buildingId, rooms[0], metric))], []);\n    } else if (roomId) {\n        msg.payload = metrics.reduce((a, roomId) => [...a, ...mapObjectsToArray(D.getRoomData(accountId, buildingId, roomId))], []);\n    } else if (metric) {\n        msg.payload = metrics.reduce((a, metric) => [...a, ...mapObjectsToArray(D.getBuildingMetricData(accountId, buildingId, metric))], []);\n    } else {\n        msg.payload = mapObjectsToArray(D.getBuildingData(accountId, buildingId));\n    }\n\n    return msg;\n} else {\n    node.warn(\"No accountId or buildingId specified\");\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 2460,
        "wires": [
            [
                "dd4a50e9.d74b6",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "dd4a50e9.d74b6",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 910,
        "y": 2460,
        "wires": []
    },
    {
        "id": "95476b8a.30d968",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 2460,
        "wires": [
            [
                "e0492547.f87668"
            ]
        ]
    },
    {
        "id": "e0492547.f87668",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 500,
        "y": 2460,
        "wires": [
            [
                "2d7833cb.3fb30c",
                "c91e5ecb.a47fd"
            ],
            []
        ]
    },
    {
        "id": "bd7f26a4.376b68",
        "type": "change",
        "z": "f1c4be48.0cc6a",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 780,
        "wires": [
            [
                "29d695cc.a1873a"
            ]
        ]
    },
    {
        "id": "29d695cc.a1873a",
        "type": "subflow:18e12be8.f7c244",
        "z": "f1c4be48.0cc6a",
        "name": "",
        "env": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "438fb0d0.de824",
                "c7469550.e018a8"
            ],
            [
                "c7469550.e018a8"
            ]
        ]
    },
    {
        "id": "55217d83.bbe7e4",
        "type": "http in",
        "z": "f1c4be48.0cc6a",
        "name": "POST device log 1.0",
        "url": "/BobbAPI/1.0/logs/:accountId/:buildingId/devices",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "bd7f26a4.376b68"
            ]
        ]
    },
    {
        "id": "db21a66c.722648",
        "type": "debug",
        "z": "1f4e439a.78fd7c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 330,
        "y": 180,
        "wires": []
    },
    {
        "id": "c74c3557.59b878",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 1140,
        "wires": [
            [
                "937a426e.243ce"
            ]
        ]
    },
    {
        "id": "937a426e.243ce",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 380,
        "y": 1140,
        "wires": [
            [
                "a725e056.05782"
            ],
            []
        ]
    },
    {
        "id": "2fe4560b.1bb58a",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rules list 1.0",
        "url": "/BobbAPI/1.0/rules/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1140,
        "wires": [
            [
                "c74c3557.59b878"
            ]
        ]
    },
    {
        "id": "aa345440.5b6ae8",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET rooms 1.0",
        "url": "/BobbAPI/1.0/rooms/building/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1920,
        "wires": [
            [
                "46324295.03b35c"
            ]
        ]
    },
    {
        "id": "46324295.03b35c",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1920,
        "wires": [
            [
                "c0216458.8de7c8"
            ]
        ]
    },
    {
        "id": "c0216458.8de7c8",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 400,
        "y": 1920,
        "wires": [
            [
                "46c7e92c.c7d408"
            ],
            []
        ]
    },
    {
        "id": "46c7e92c.c7d408",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getRooms",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId} = msg\n \nmsg.payload = Array.from(new Set(Object.keys(D.getBuildingData(accountId, buildingId)).map(path => path.split(\".\")[0])));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 1920,
        "wires": [
            [
                "7ea2d938.a20ac8",
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "39dc8493.eed0bc",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET metrics 1.0",
        "url": "/BobbAPI/1.0/metrics/:accountId/:buildingId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1980,
        "wires": [
            [
                "97dfc29b.fec0d"
            ]
        ]
    },
    {
        "id": "97dfc29b.fec0d",
        "type": "change",
        "z": "94771f7d.38037",
        "name": "perm",
        "rules": [
            {
                "t": "set",
                "p": "perm",
                "pt": "msg",
                "to": "readstate",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "trimmed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 1980,
        "wires": [
            [
                "fd79a4a6.f7f168"
            ]
        ]
    },
    {
        "id": "fd79a4a6.f7f168",
        "type": "subflow:18e12be8.f7c244",
        "z": "94771f7d.38037",
        "name": "",
        "env": [],
        "x": 400,
        "y": 1980,
        "wires": [
            [
                "48799646.771088"
            ],
            []
        ]
    },
    {
        "id": "48799646.771088",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getMetrics",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\n\nG.handleQuery(msg, node);\nconst {accountId, buildingId} = msg\n \nlet obj = {};\n\nObject.entries(D.getBuildingData(accountId, buildingId))\n    .map(([path, {value, previousValue, timestamp, previousTimestamp}]) => {\n        const [metric, device, room = \"_\"] = path.split(\".\").reverse();\n        \n        if (!obj[room]) obj[room] = {};\n        if (!obj[room][device]) obj[room][device] = {};\n\n        obj[room][device][metric] = {value, previousValue, timestamp, previousTimestamp};\n    })\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 1980,
        "wires": [
            [
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "866722ca.395f6",
        "type": "function",
        "z": "94771f7d.38037",
        "name": "getConfig",
        "func": "const connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst blobService = azureStorage.createBlobService(connStr);\n\nblobService.getBlobToText(\"bobb-config\", \"config.json\", (error, result, response) => \n    error ? null : node.send(Object.assign(msg, {payload: result})));\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 260,
        "wires": [
            [
                "ee5611b6.36162"
            ]
        ]
    },
    {
        "id": "8307b338.1521c",
        "type": "http in",
        "z": "94771f7d.38037",
        "name": "GET query config 1.0",
        "url": "/BobbAPI/1.0/config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "5aaa1822.92ee88",
                "866722ca.395f6"
            ]
        ]
    },
    {
        "id": "5aaa1822.92ee88",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 340,
        "wires": []
    },
    {
        "id": "24d4a728.87e488",
        "type": "debug",
        "z": "d7e6850e.758d08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 40,
        "wires": []
    },
    {
        "id": "f6efebb.078ec18",
        "type": "http request",
        "z": "d7e6850e.758d08",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "f5e7cbf5.11cb88",
        "x": 530,
        "y": 160,
        "wires": [
            [
                "fdce6e16.1f41b",
                "abd9e304.5a4dc"
            ]
        ]
    },
    {
        "id": "74c39a67.9d9b04",
        "type": "debug",
        "z": "d7e6850e.758d08",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 890,
        "y": 160,
        "wires": []
    },
    {
        "id": "5d197e4e.0b353",
        "type": "function",
        "z": "d7e6850e.758d08",
        "name": "getAllBuildingsForecast",
        "func": "const G = global.get(\"globals\");\n\nG.iterateAllBuildings((accountId, buildingId) => {\n    const {lat, lon} = G.getBuilding(accountId, buildingId);\n    \n    node.send({\n        url: \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&units=metric&APPID=6e5752d3294bbca0fdb06460afe4704c\",\n        accountId,\n        buildingId\n    });\n});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "f6efebb.078ec18"
            ]
        ]
    },
    {
        "id": "abd9e304.5a4dc",
        "type": "function",
        "z": "d7e6850e.758d08",
        "name": "process",
        "func": "const G = global.get(\"globals\");\nconst D = global.get(\"dataEngine\");\nconst moment = global.get(\"moment\");\n\nconst compassDirection = angle => [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\"][Math.floor((angle / 22.5) + 0.5) % 16];\n\nconst {payload: {list}, accountId, buildingId} = msg;\n\nconst base = {\n    accountId, \n    buildingId,\n    source: \"weather\"\n};\n\nlist.map(({dt: datestamp, weather: [{description, icon}]}) => {\n    const date = new Date(datestamp * 1000); \n    const day = Math.abs(moment().diff(date, \"days\"));\n    const hour = date.getHours();\n    const key = `weather.forecast.day${day}h${hour}`;\n    D.storeData({...base, key: `${key}.icon`, value: \"\" + icon});\n    D.storeData({...base, key: `${key}.description`, value: description});\n});\n\n//     visibility, \n//     main: {temp, pressure, humidity, temp_min, temp_max, description}, \n//     wind: {speed, deg}, clouds: {all},\n//     rain: {\"1h\": rain1h = null, \"3h\": rain3h = null} = {},\n//     snow: {\"1h\": snow1h = null, \"3h\": snow3h = null} = {}\n// }, accountId, buildingId} = msg;\n// const winddir = compassDirection(deg);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "74c39a67.9d9b04"
            ]
        ]
    },
    {
        "id": "fdce6e16.1f41b",
        "type": "debug",
        "z": "d7e6850e.758d08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "83334f8b.4d861",
        "type": "inject",
        "z": "d7e6850e.758d08",
        "name": "hourly",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 160,
        "wires": [
            [
                "5d197e4e.0b353"
            ]
        ]
    },
    {
        "id": "254c9487.95f83c",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "Event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "7b430948.0f1278",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "IDs",
        "func": "const [accountId, buildingId, , deviceId] = msg.topic.split(\"/\");\n\nreturn {\n    ...msg,\n    accountId,\n    buildingId,\n    deviceId\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "ce03e6da.ccf848"
            ]
        ]
    },
    {
        "id": "cad52a3f.002498",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "7a49b049.926a8",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 515,
        "y": 400,
        "wires": []
    },
    {
        "id": "ce03e6da.ccf848",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "online",
        "func": "const {accountId, buildingId, deviceId, payload = \"\"} = msg;\nconst online = [\"online\", \"1\"].includes(payload.toLowerCase());\n\nreturn {\n    topic: [accountId, buildingId, deviceId, \"online\"].join(\".\"),\n    payload: online\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 440,
        "wires": [
            [
                "cad52a3f.002498",
                "7a49b049.926a8"
            ]
        ]
    },
    {
        "id": "fd608fad.a1a05",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "toTableStorage",
        "func": "const G = global.get(\"globals\");\nconst start = Date.now();\nconst connStr = global.get(\"azureConnStr\");\nconst azureStorage = global.get(\"azureStorage\");\nconst tableService = azureStorage.createTableService(connStr);\nconst entGen = azureStorage.TableUtilities.entityGenerator;\nconst {accountId, buildingId, deviceId, state, from, to, durationSecs, api = \"\", event = \"\", ruleId = \"\"} = msg.payload;\nconst tableName = 'bobbDeviceLogs';\n\nconst rec = {\n    PartitionKey: entGen.String([accountId, buildingId, deviceId].join(\".\")),\n    RowKey: entGen.String(G.invertedTicks().toString()),\n    accountId: entGen.String(accountId),\n    buildingId: entGen.String(buildingId),\n    deviceId: entGen.String(deviceId),\n    state: entGen.Boolean(state),\n    from: entGen.DateTime(new Date(from)),\n    to: entGen.DateTime(new Date(to)),\n    durationSecs: entGen.Int32(durationSecs),\n    api: entGen.String(api),\n    event: entGen.String(event),\n    ruleId: entGen.String(ruleId),\n};\n\ntableService.createTableIfNotExists(tableName, (error, result, response) => null);\n\ntableService.insertEntity(tableName, rec, function (error, result, response) {\n    msg.payload = {topic: msg.topic, status: error ? \"failed\" : \"succeeded\", elapsedms: Date.now() - start};\n    msg.payload.error = error;\n    msg.payload.rec = rec;\n    \n    if (error) {\n        node.send([null, msg]);\n    } else\n        node.send([msg, null]);\n});\n",
        "outputs": "2",
        "noerr": 0,
        "x": 800,
        "y": 340,
        "wires": [
            [
                "1f5cc9b0.b52bd6"
            ],
            [
                "97a8eceb.920ef"
            ]
        ]
    },
    {
        "id": "1f5cc9b0.b52bd6",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "YAY",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "x": 1010,
        "y": 320,
        "wires": []
    },
    {
        "id": "97a8eceb.920ef",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "AWWW",
        "active": true,
        "console": "false",
        "complete": "payload",
        "x": 1020,
        "y": 360,
        "wires": []
    },
    {
        "id": "18a6cc5f.da51f4",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "disabled",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 780,
        "y": 280,
        "wires": []
    },
    {
        "id": "6ad1959.55b3b6c",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "toDataEngine",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 375,
        "y": 420,
        "wires": []
    },
    {
        "id": "e4792e51.340dd",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "info",
        "func": "const {topic, payload} = msg;\nconst [accountId, buildingId] = topic.split(\"/\");\n\nnode.send({\n    topic: [accountId, buildingId, buildingId, \"rf-bridge\"].join(\".\"),\n    payload\n});",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "e80953f8.bfd9f",
                "84f487e2.11cbe8"
            ]
        ]
    },
    {
        "id": "84f487e2.11cbe8",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "toDataEngine",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 495,
        "y": 480,
        "wires": []
    },
    {
        "id": "6c12f59f.7bf31c",
        "type": "inject",
        "z": "bba312c4.6e0fd",
        "name": "reloadWemo@studio",
        "topic": "jfdi/studio/local",
        "payload": "bobb-plugin-wemo",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "524924ac.3b058c"
            ]
        ]
    },
    {
        "id": "e8389544.a5f2f8",
        "type": "debug",
        "z": "bba312c4.6e0fd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 590,
        "y": 100,
        "wires": []
    },
    {
        "id": "fc3468e3.e40cc8",
        "type": "mqtt out",
        "z": "bba312c4.6e0fd",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "74909a69.35ca34",
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "524924ac.3b058c",
        "type": "function",
        "z": "bba312c4.6e0fd",
        "name": "reload",
        "func": "const {topic, payload} = msg;\nnode.send({topic, payload: {command: \"reload\", plugin: payload}});\n",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "e8389544.a5f2f8",
                "fc3468e3.e40cc8"
            ]
        ]
    },
    {
        "id": "36e65d7e.7fe2d2",
        "type": "inject",
        "z": "bba312c4.6e0fd",
        "name": "reloadWemo@studio",
        "topic": "jfdi/studio/local",
        "payload": "bobb-plugin-zwave",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "524924ac.3b058c"
            ]
        ]
    },
    {
        "id": "2bfa621d.ab09ce",
        "type": "debug",
        "z": "94771f7d.38037",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "8e7762bb.7dd1f",
        "type": "function",
        "z": "1f4e439a.78fd7c",
        "name": "filter",
        "func": "const [eventType] = msg.topic.split(\".\").reverse();\nif ([\"changed\", \"zero\", \"nonzero\", \"unknown\"].includes(eventType)) return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "ab7d1c51.cc2b5",
                "ea21bb6e.092118"
            ]
        ]
    },
    {
        "id": "3d2234d6.1e988c",
        "type": "azureiothub",
        "z": "71545018.aa70d",
        "name": "IoT Hub",
        "protocol": "amqp",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "d1a63918.818d48"
            ]
        ]
    },
    {
        "id": "270076c7.8eccea",
        "type": "inject",
        "z": "71545018.aa70d",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 800,
        "wires": [
            [
                "7a8ff8c1.e0df98"
            ]
        ]
    },
    {
        "id": "7a8ff8c1.e0df98",
        "type": "template",
        "z": "71545018.aa70d",
        "name": "e.g.",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"accountId\": \"jfdi\",\n    \"buildingId\": \"studio\",\n    \"roomId\": \"office\",\n    \"deviceId\": \"virtualTestDevice1\",\n    \"timestamp\": {{payload}},\n    \"metric\": \"temperature\",\n    \"value\": 21.7\n}",
        "output": "json",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "4b518d60.2ef874"
            ]
        ]
    },
    {
        "id": "d1a63918.818d48",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 800,
        "wires": []
    },
    {
        "id": "354ae33d.91a39c",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 760,
        "wires": []
    },
    {
        "id": "4b518d60.2ef874",
        "type": "json",
        "z": "71545018.aa70d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 800,
        "wires": [
            [
                "354ae33d.91a39c"
            ]
        ]
    },
    {
        "id": "af41eda3.0637c",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "toIoTHub",
        "func": "const {topic, payload: value} = msg;\nconst [accountId, buildingId, roomId, deviceId, metric] = topic.split(\".\");\n\nif (metric) return [{\n    payload: {\n        accountId,\n        buildingId,\n        roomId,\n        deviceId: [roomId, deviceId].join(\".\"),\n        metric,\n        value\n    }\n}, null];\nelse return [null, {topic, payload: value}];",
        "outputs": 2,
        "noerr": 0,
        "x": 240,
        "y": 840,
        "wires": [
            [
                "4b518d60.2ef874",
                "cdffaaae.c66148",
                "3c5a952a.aec10a",
                "c2d1e671.aa9e98"
            ],
            [
                "28f19a04.40e4a6"
            ]
        ]
    },
    {
        "id": "7cba8131.d86d5",
        "type": "link in",
        "z": "71545018.aa70d",
        "name": "toIoTHub",
        "links": [
            "23020ebe.223b72"
        ],
        "x": 135,
        "y": 840,
        "wires": [
            [
                "af41eda3.0637c"
            ]
        ]
    },
    {
        "id": "23020ebe.223b72",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "7cba8131.d86d5"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "cdffaaae.c66148",
        "type": "frequency",
        "z": "71545018.aa70d",
        "name": "freq1",
        "interval": "60000",
        "ntfyinterval": "12",
        "x": 410,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3c5a952a.aec10a",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 450,
        "y": 900,
        "wires": []
    },
    {
        "id": "28f19a04.40e4a6",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "ERROR",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 420,
        "y": 940,
        "wires": []
    },
    {
        "id": "c2d1e671.aa9e98",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "counts",
        "func": "const {topic, payload: {deviceId}} = msg;\n\nif (topic === \"show\") {\n    const counts = context.get(\"counts\");\n    const out = Object.entries(counts)\n        .sort(([, a], [, b]) => a < b ? 1 : a > b ? -1 : 0)\n        .reduce((a, [k, v]) => ({...a, [k]: v}), {});\n    return [null, {payload: out}];\n} else {\n    if (topic === \"reset\" || !context.get(\"counts\")) context.set(\"counts\", {});\n    const counts = context.get(\"counts\");\n    counts[deviceId] = (counts[deviceId] || 0) + 1;\n    return [{payload: counts}, null];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 390,
        "y": 1000,
        "wires": [
            [
                "da3c4bc6.a1e7f8"
            ],
            [
                "3db83962.cf8266"
            ]
        ]
    },
    {
        "id": "da3c4bc6.a1e7f8",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 980,
        "wires": []
    },
    {
        "id": "f6c07a61.491918",
        "type": "inject",
        "z": "71545018.aa70d",
        "name": "reset",
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 1000,
        "wires": [
            [
                "c2d1e671.aa9e98"
            ]
        ]
    },
    {
        "id": "42f5c549.185c8c",
        "type": "inject",
        "z": "71545018.aa70d",
        "name": "show",
        "topic": "show",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 230,
        "y": 1040,
        "wires": [
            [
                "c2d1e671.aa9e98"
            ]
        ]
    },
    {
        "id": "3db83962.cf8266",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4efeac55.80cf34",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "",
        "topic": "topic2",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1480,
        "y": 200,
        "wires": [
            [
                "6ba2000b.9ae36"
            ]
        ]
    },
    {
        "id": "6ba2000b.9ae36",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "filterUnchanged",
        "func": "const objectCompare = (obj1, obj2) => {\n\t//Loop through properties in object 1\n\tfor (let p in obj1) {\n\t\t//Check property exists on both objects\n\t\tif (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\n \n\t\tswitch (typeof (obj1[p])) {\n\t\t\t//Deep compare objects\n\t\t\tcase 'object':\n\t\t\t\tif (!objectCompare(obj1[p], obj2[p])) return false;\n\t\t\t\tbreak;\n\t\t\t//Compare function code\n\t\t\tcase 'function':\n\t\t\t\tif (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString())) return false;\n\t\t\t\tbreak;\n\t\t\t//Compare values\n\t\t\tdefault:\n\t\t\t\tif (obj1[p] != obj2[p]) return false;\n\t\t}\n\t}\n \n\t//Check object 2 for any extra properties\n\tfor (let p in obj2) {\n\t\tif (typeof (obj1[p]) == 'undefined') return false;\n\t}\n\treturn true;\n};\n\n\nconst {topic, payload} = msg;\nif (!context.get(\"list\")) context.set(\"list\", {});\n\nconst list = context.get(\"list\");\n\nif ((!list[topic]) || (typeof payload === \"object\" && objectCompare(list[topic], payload)) || (typeof payload !== \"object\" && list[topic] !== payload)) {\n    list[topic] = payload;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1730,
        "y": 200,
        "wires": [
            [
                "e73d1e20.debe"
            ]
        ]
    },
    {
        "id": "5a83f055.8bf8b",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "minute",
        "topic": "topic1",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1450,
        "y": 140,
        "wires": [
            [
                "14d6703b.80eb5"
            ]
        ]
    },
    {
        "id": "e73d1e20.debe",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1950,
        "y": 200,
        "wires": []
    },
    {
        "id": "14d6703b.80eb5",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "min",
        "func": "msg.payload = new Date().getMinutes();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 140,
        "wires": [
            [
                "6ba2000b.9ae36"
            ]
        ]
    },
    {
        "id": "c3fc4825.63b8a8",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "obj",
        "topic": "topic3",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 1450,
        "y": 260,
        "wires": [
            [
                "f79f3338.93ab7"
            ]
        ]
    },
    {
        "id": "f79f3338.93ab7",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "obj",
        "func": "msg.payload = {a: 1, b:2, c:3, d:{a:1, b:2}};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 260,
        "wires": [
            [
                "6ba2000b.9ae36"
            ]
        ]
    },
    {
        "id": "5973b11d.2ca0c",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 270,
        "y": 560,
        "wires": []
    },
    {
        "id": "ac25a4fc.bd0e68",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "arrays",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "1eca3f89.f215f"
            ]
        ]
    },
    {
        "id": "1eca3f89.f215f",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "const msgs = [1, 2, 3].map(num => ({topic: \"num\" + num, payload: num}));\nreturn [msgs];\n",
        "outputs": 1,
        "noerr": 0,
        "x": 250,
        "y": 1560,
        "wires": [
            [
                "13440884.8928f7"
            ]
        ]
    },
    {
        "id": "13440884.8928f7",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 410,
        "y": 1560,
        "wires": []
    },
    {
        "id": "11de6ef.1042991",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "1d51cf24.b143e1",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "PresenceCore v1",
        "func": "const [G, L, accounts] = global.get([\"globals\", \"lodash\", \"accounts\"]);\nconst NOBUILDING = \"undefined\";\n\nconst getInitialScores = obj => G.buildObjectFromEntries(obj, ([accountId]) => ({ [accountId]: { scores: {} } }));\nconst recalculateBuildingScores = obj =>\n    G.buildObjectFromEntries(obj, ([source, {buildingId = NOBUILDING, score = 0}], a) =>\n        ({[[buildingId]]: (a[buildingId] || 0) + score}));\n\nconst presence = global.get(\"presence\") || getInitialScores(accounts);\n\nconst { accountId, personId, buildingId = NOBUILDING, source = \"unknown\", score = 1 } = msg;\nconst {score: sourceScore, buildingId: sourceBuildingId} = L.get(presence, [accountId, personId, \"sources\", source], {});\n\nif (sourceScore === score && sourceBuildingId === buildingId) {\n    return [null, null, null, {topic: [accountId, personId, source].join(\".\"), payload: \"unchanged\"}];\n} else {\n    const aPres = G.ensureProp(presence, accountId, {});\n    const pPres = G.ensureProp(aPres, personId, {sources: {}});\n    \n    pPres.sources[source] = {buildingId, score};\n    pPres.scores = Object.assign({[NOBUILDING]: 0}, recalculateBuildingScores(pPres.sources));\n    const {k: atBuilding} = G.objectReduce(pPres.scores, (a, [k, v]) => v > a.v ? {v, k} : a, {v: -999999, k: null});\n    const prevBuildingId = pPres.buildingId; // save previous building\n    pPres.buildingId = atBuilding; // set current building\n    pPres.timestamp = Date.now(); // and update the timestamp\n    \n    // We can send direct events from here... but someone/noone events are generated from presence.count events by static rules created in loadA&B\n\n    // Send person@building\n    node.send([null, {accountId, topic: [\"presence\", personId, \"buildingId\"].join(\".\"), payload: atBuilding, source: \"presencecore\", scores: pPres.scores}, null, null]);\n    node.send([{topic: [accountId, buildingId, \"presence\", personId].join(\".\"), payload: buildingId === atBuilding, source: \"presencecore\", scores: pPres.scores}, null, null, null]);\n    \n    if (prevBuildingId !== atBuilding) {    // building changed\n        if (atBuilding === NOBUILDING) // decide whether to send arrival or departure event\n            node.send([null, null, {accountId, buildingId: prevBuildingId, topic: [\"presence\", \"departure\"].join(\".\"), payload: personId, source: \"presencecore\"}, null]);\n        else\n            node.send([null, null, {accountId, buildingId: atBuilding, topic: [\"presence\", \"arrival\"].join(\".\"), payload: personId, source: \"presencecore\"}, null]);\n    }\n    \n    global.set(\"presence\", presence);\n    \n    const getBuildingPresenceList = (aId, bId) =>\n        Object.keys(\n            G.buildObjectFromEntries(presence[aId], ([k, { buildingId }], a) =>\n                buildingId === bId ? Object.assign(a, {[k]: true }) : a\n            )\n        );\n    const buildingCounts = G.buildObjectFromEntries(accounts, ([accountId, { buildings }]) => ({\n        [accountId]: G.buildObjectFromEntries(buildings, ([buildingId = NOBUILDING]) => {\n            const list = getBuildingPresenceList(accountId, buildingId);\n            return { [buildingId]: { list, count: list.length } };\n        })\n    }));\n    \n    // this is called for each person whenever there's an upstream event... sooooo there's...\n    // massive duplication caught later by RBE node\n    Object.entries(buildingCounts).forEach(([accountId, account]) =>\n        Object.entries(account).forEach(([buildingId, {list, count}]) => {\n            // send building people count\n            node.send([{topic: [accountId, buildingId, \"presence\", \"count\"].join(\".\"), payload: count, source: \"presencecore\"}, null, null, null]);\n            // send building people list\n            node.send([{topic: [accountId, buildingId, \"presence\", \"people\"].join(\".\"), payload: list, source: \"presencecore\"}, null, null, null]);\n        })) \n\n    global.set(\"buildingCounts\", buildingCounts);\n    \n    return [null, null, null, presence];\n}",
        "outputs": 4,
        "noerr": 0,
        "x": 310,
        "y": 500,
        "wires": [
            [
                "4a45e098.f5234"
            ],
            [
                "fa4b2fb2.08dc9"
            ],
            [
                "666c8e72.b4cc5",
                "b24a5c7a.75b1f"
            ],
            [
                "5be5b965.a29838"
            ]
        ],
        "outputLabels": [
            "a/b data",
            "acc data",
            "events",
            "diags"
        ]
    },
    {
        "id": "7558ac6f.c37554",
        "type": "comment",
        "z": "e74fac43.1f2b6",
        "name": "macPresence",
        "info": "The macPresence module receives opinions on the presence, arrival and departure of MAC addresses on the network. \n\nThe MAC addresses observed may be:\n - personal devices whose presence, arrival or departure may indicate the same for their owner\n - devices whose online status is tracked by Bobb\n - untracked devices\n\nFor personal devices, scores are added up for each device and a total score is kept for the person.\nIn this way, a newly appeared or departed device can modify the person's score whilst leaving intact \nthe scores from the owner's other devices.",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "9a2602e0.30bff",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "a/b Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 700,
        "y": 460,
        "wires": []
    },
    {
        "id": "6f3b8d0a.4ff094",
        "type": "link out",
        "z": "43f12961.0018d8",
        "name": "",
        "links": [
            "ae565479.544f38"
        ],
        "x": 715,
        "y": 500,
        "wires": []
    },
    {
        "id": "c73336ff.54d548",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "5be5b965.a29838",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "Diags",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "cfc5008.362ce",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "MacDiags",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 640,
        "y": 120,
        "wires": []
    },
    {
        "id": "bffc2593.3a07b8",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "test",
        "func": "const {topic, report} = msg;\nif (topic === \"jsilver\" && [\"arrived\", \"departed\"].includes(report)) return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "46fe080f.41e1b8"
            ]
        ]
    },
    {
        "id": "46fe080f.41e1b8",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "1219c5a8.06734a",
        "type": "timed-counter",
        "z": "e74fac43.1f2b6",
        "name": "today",
        "timelimit": "24",
        "timeunit": "3600000",
        "withhold": false,
        "fixedtimeout": false,
        "pertopic": true,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "80b1d310.87536"
            ]
        ]
    },
    {
        "id": "80b1d310.87536",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "cnt",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "count",
        "targetType": "msg",
        "x": 510,
        "y": 240,
        "wires": []
    },
    {
        "id": "922c78fd.103ee8",
        "type": "mqtt in",
        "z": "e74fac43.1f2b6",
        "name": "arrived",
        "topic": "+/+/wifipresence/arrived",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "f23e58f.ec47ca8"
            ]
        ]
    },
    {
        "id": "501fdfa.72cfb2",
        "type": "mqtt in",
        "z": "e74fac43.1f2b6",
        "name": "departed",
        "topic": "+/+/wifipresence/departed",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "f23e58f.ec47ca8"
            ]
        ]
    },
    {
        "id": "11e48f3.8d09471",
        "type": "mqtt in",
        "z": "e74fac43.1f2b6",
        "name": "status",
        "topic": "+/+/wifipresence/status",
        "qos": "2",
        "datatype": "json",
        "broker": "74909a69.35ca34",
        "x": 90,
        "y": 280,
        "wires": [
            [
                "ce77d476.c833f8"
            ]
        ]
    },
    {
        "id": "ce77d476.c833f8",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 270,
        "y": 280,
        "wires": []
    },
    {
        "id": "4a45e098.f5234",
        "type": "rbe",
        "z": "e74fac43.1f2b6",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 490,
        "y": 440,
        "wires": [
            [
                "9a2602e0.30bff",
                "b419c00d.10c6e"
            ]
        ]
    },
    {
        "id": "506dc4dc.62013c",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 360,
        "wires": [
            [
                "605ca7a6.b1dfe8"
            ]
        ]
    },
    {
        "id": "605ca7a6.b1dfe8",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "reconcile macPresence",
        "func": "const G = global.get(\"globals\");\nconst presence = global.get(\"presence\"), macPresence = global.get(\"macPresence\"), accounts = global.get(\"accounts\");\n\nconst trackedPeopleNotInBuildings = Object.entries(accounts).map(([accountId, {devicePeople, buildings}]) => \n    Object.entries(buildings).map(([buildingId, building]) => \n        Object.entries(devicePeople).filter(([mac, {personId, definitivePresence}]) =>\n            !macPresence[accountId][buildingId].includes(mac)\n        ).map(([mac, {personId, definitivePresence}]) => ({mac, personId, definitivePresence, buildingId, accountId}))\n    )\n);\n\nconst list = G.flattenArrayOfArrays(G.flattenArrayOfArrays(trackedPeopleNotInBuildings));\n\nreturn [\n    Object.values(list).map(({accountId, buildingId, personId, definitivePresence}) =>\n        ({\n            accountId,\n            personId,\n            buildingId,\n            source: \"macpresence\",\n            score: 10,\n            present: false\n        })\n    )\n];\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 360,
        "wires": [
            [
                "7c3ee2d3.d704cc"
            ]
        ]
    },
    {
        "id": "7c3ee2d3.d704cc",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 510,
        "y": 360,
        "wires": []
    },
    {
        "id": "2d45c16c.643b0e",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 330,
        "y": 480,
        "wires": []
    },
    {
        "id": "ae4181fa.834dd",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 750,
        "y": 580,
        "wires": []
    },
    {
        "id": "ccfd74ce.d330f8",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 410,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1e5ad5d1.e3d62a",
        "type": "subflow:2161b62e.a025aa",
        "z": "43f12961.0018d8",
        "name": "",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "c3280c40.988f1"
            ],
            []
        ]
    },
    {
        "id": "513c66b3.9c41d8",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 490,
        "y": 1540,
        "wires": []
    },
    {
        "id": "25c820ad.8a903",
        "type": "mqtt in",
        "z": "4ec77ac0.46dd44",
        "name": "+/+/openclose/#",
        "topic": "+/+/openclose/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "74909a69.35ca34",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "fcfbef20.32955"
            ]
        ]
    },
    {
        "id": "fcfbef20.32955",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "translate",
        "func": "const G = global.get(\"globals\");\nconst looksLikeClosed = x => [true, \"true\", 1, \"1\", \"closed\"].includes(x);\n\nconst {topic, payload} = msg;\nconst [accountId, buildingId, api, nodeId, metric] = topic.split(\"/\");\nconst value = metric === \"closed\" ? looksLikeClosed(payload) : payload;\nconst device = G.findDeviceByApiId(accountId, buildingId, nodeId, api) || {};\n\nif (Object.keys(device).length) {\n    const [roomId, deviceId] = device.split(\".\");\n\n    if (accountId && buildingId && roomId && deviceId && api && nodeId && metric)\n        return [{\n            topic: [accountId, buildingId, roomId, deviceId, metric].join(\".\"),\n            payload: value\n        }, null];\n    else\n        node.warn(\"Missing data\");\n} else\n    return [null,\n    {\n        accountId, buildingId, api, payload: nodeId\n    }];",
        "outputs": 2,
        "noerr": 0,
        "x": 280,
        "y": 540,
        "wires": [
            [
                "a1d10d2b.091db",
                "e500cc7a.e70f6"
            ],
            [
                "b6a1f1da.c74de",
                "ee9de38e.f322"
            ]
        ]
    },
    {
        "id": "a1d10d2b.091db",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 430,
        "y": 500,
        "wires": []
    },
    {
        "id": "e500cc7a.e70f6",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "links": [
            "5e52e44a.09e7cc"
        ],
        "x": 395,
        "y": 540,
        "wires": []
    },
    {
        "id": "1ea6dd7.ef7fc23",
        "type": "function",
        "z": "6dba87b8.b5f088",
        "name": "sendUnknowns",
        "func": "const {accountId, buildingId, code} = msg;\nconst topic = [\"unknown\", \"unknown\", \"rf\", \"unknown\"].join(\".\");\nreturn {accountId, buildingId, topic, payload: code};",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 320,
        "wires": [
            [
                "9c8e4f8.587dfb"
            ]
        ]
    },
    {
        "id": "9c8e4f8.587dfb",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "sendUnknowns",
        "links": [
            "37901263.1a6cfe"
        ],
        "x": 675,
        "y": 320,
        "wires": []
    },
    {
        "id": "1d4980d8.c64bef",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "sendUnknowns",
        "func": "const {accountId, buildingId, payload, api} = msg;\nconst topic = [\"unknown\", \"unknown\", api, \"unknown\"].join(\".\");\nreturn {accountId, buildingId, topic, payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 140,
        "wires": [
            [
                "63d58450.c78c0c"
            ]
        ]
    },
    {
        "id": "63d58450.c78c0c",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "sendUnknowns",
        "links": [
            "37901263.1a6cfe"
        ],
        "x": 1095,
        "y": 140,
        "wires": []
    },
    {
        "id": "b6a1f1da.c74de",
        "type": "function",
        "z": "4ec77ac0.46dd44",
        "name": "sendUnknowns",
        "func": "const {accountId, buildingId, payload, api} = msg;\nconst topic = [\"unknown\", \"unknown\", api, \"unknown\"].join(\".\");\nreturn {accountId, buildingId, topic, payload};",
        "outputs": 1,
        "noerr": 0,
        "x": 460,
        "y": 580,
        "wires": [
            [
                "63d06a51.64ba54"
            ]
        ]
    },
    {
        "id": "63d06a51.64ba54",
        "type": "link out",
        "z": "4ec77ac0.46dd44",
        "name": "sendUnknowns",
        "links": [
            "37901263.1a6cfe"
        ],
        "x": 595,
        "y": 580,
        "wires": []
    },
    {
        "id": "ee9de38e.f322",
        "type": "debug",
        "z": "4ec77ac0.46dd44",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 450,
        "y": 620,
        "wires": []
    },
    {
        "id": "edd7b3f4.a495",
        "type": "filter",
        "z": "71545018.aa70d",
        "name": "personalPresenceEvents",
        "property": "topic",
        "filter": "presence\\.\\w+\\.present.changed",
        "ignorecase": true,
        "x": 850,
        "y": 140,
        "wires": [
            [
                "17738680.6ad0ea",
                "3529ad.d1d41654"
            ],
            []
        ]
    },
    {
        "id": "17738680.6ad0ea",
        "type": "debug",
        "z": "71545018.aa70d",
        "name": "filtered",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "f1b4cc8c.5a629",
        "type": "link out",
        "z": "71545018.aa70d",
        "name": "",
        "links": [
            "ae565479.544f38"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "3529ad.d1d41654",
        "type": "function",
        "z": "71545018.aa70d",
        "name": "",
        "func": "return Object.assign(msg, {personId: msg.topic.split(\".\")[1]})",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a8368cc6.e7212",
        "type": "comment",
        "z": "43f12961.0018d8",
        "name": "Tracking with OwnTracks",
        "info": "OwnTracks is an app for iOS and Android that tracks\nthe user's location and periodically publishes it to\na private MQTT broker.\n\nHere we're using the OwnTracks reports to not only\ntrack the location of participating users, but also\nto feed entry/exit information for defined locatiobs\nto the Bobb Presence Core.",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a3e341c.1d1ca8",
        "type": "comment",
        "z": "43f12961.0018d8",
        "name": "Geofence Reporting",
        "info": "Users can set geofencing software such as IFTTT or\nLocative to post to these endpoints. These reports\nare fed to Bobb Presence Core to bolster presence\ndata and clarify a user's location.",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "b24a5c7a.75b1f",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "Event",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 540,
        "wires": []
    },
    {
        "id": "666c8e72.b4cc5",
        "type": "link out",
        "z": "e74fac43.1f2b6",
        "name": "toEvents",
        "links": [
            "3aaa9560.14da2a"
        ],
        "x": 615,
        "y": 520,
        "wires": []
    },
    {
        "id": "4f912079.38d1b",
        "type": "link out",
        "z": "e74fac43.1f2b6",
        "name": "storePresenceCore",
        "links": [
            "6ea6ad04.3a7dc4"
        ],
        "x": 615,
        "y": 480,
        "wires": []
    },
    {
        "id": "6cdb8d91.5531d4",
        "type": "debug",
        "z": "e74fac43.1f2b6",
        "name": "acc Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 700,
        "y": 500,
        "wires": []
    },
    {
        "id": "fa4b2fb2.08dc9",
        "type": "rbe",
        "z": "e74fac43.1f2b6",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "6cdb8d91.5531d4",
                "4f912079.38d1b"
            ]
        ]
    },
    {
        "id": "421a428c.61416c",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "elvis is here",
        "topic": "elvis",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 700,
        "wires": [
            [
                "6045be4a.7677"
            ]
        ]
    },
    {
        "id": "6045be4a.7677",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "",
        "func": "const {payload: present, topic: personId} = msg;\n\nnode.status({text: present});\n\nreturn {\n    accountId: \"jfdi\",\n    buildingId: \"studio\",\n    source: \"macpresence\",\n    personId,\n    score: present ? 1 : -1\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 700,
        "wires": [
            [
                "1d51cf24.b143e1"
            ]
        ]
    },
    {
        "id": "73f78079.a6e22",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "elvis isn't here",
        "topic": "igluski",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 740,
        "wires": [
            [
                "6045be4a.7677"
            ]
        ]
    },
    {
        "id": "693534ba.08010c",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "datkins is here",
        "topic": "datkins",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 800,
        "wires": [
            [
                "6045be4a.7677"
            ]
        ]
    },
    {
        "id": "fac7a441.5dc438",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "datkins isn't here",
        "topic": "datkins",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 120,
        "y": 840,
        "wires": [
            [
                "6045be4a.7677"
            ]
        ]
    },
    {
        "id": "b2da9abc.b33b68",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "owntracks location",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 370,
        "y": 100,
        "wires": []
    },
    {
        "id": "1bd0cf85.4e2ea",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "assemble",
        "func": "const {topic, payload, payload: {accountId, personId, deviceId, tst, geohash, _type, desc, inregions: [region] = []}, user} = msg;\nconst at = (_type == \"transition\" ? desc : region || \"\").toLowerCase();\nconst accounts = global.get(\"accounts\");\nconst account = accounts[accountId];\nconst buildings = Object.keys(account.buildings);\n\nconst buildingId = buildings.includes(at) ? at : \"\";\n\nreturn {\n    ...msg,\n    topic, \n    payload: {\n        ...payload,\n        buildingId,\n        geohash,\n        when: new Date(tst * 1000)\n    }\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 140,
        "wires": [
            [
                "8c124587.af6798",
                "ff79dcd5.a1824"
            ]
        ]
    },
    {
        "id": "b2833f48.a9c9b",
        "type": "geohash",
        "z": "43f12961.0018d8",
        "name": "",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "1bd0cf85.4e2ea"
            ]
        ]
    },
    {
        "id": "b19ac831.e13e28",
        "type": "function",
        "z": "43f12961.0018d8",
        "name": "prep",
        "func": "// stash owntracks message\nconst {payload: raw, topic} = msg;\nconst payload = (typeof raw === \"object\") ? raw : JSON.parse(raw);\n\n// extract user\nconst [accountId, , personId, deviceId]  = topic.split(\"/\");\n\nreturn {\n    ...msg,\n    payload: {\n        ...payload,\n        precision: 7,\n        accountId,\n        personId,\n        deviceId\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "b2833f48.a9c9b"
            ]
        ]
    },
    {
        "id": "ff79dcd5.a1824",
        "type": "debug",
        "z": "43f12961.0018d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 750,
        "y": 100,
        "wires": []
    },
    {
        "id": "f48b98e6.c6a488",
        "type": "function",
        "z": "232539f1.de52a6",
        "name": "",
        "func": "const { login } = global.get(\"tplink\");\n\nconst doIt = async () => {\n    const tplink = await login(\"hello@jfdi.info\", \"8@yy6J8wT*UKjNY)RVC8CRGSj.?oS&\", \"TermID\");\n    // let deviceList = await tplink.getDeviceList();\n    // node.send({payload: deviceList});\n    const tog = id => tplink.getHS100(id).toggle();\n    const ids = [\"JonsCooler\", \"Demo2\", \"Demo3\", \"Demo4\"];\n    await Promise.all(ids.map(id => tog(id)));\n}\n\ndoIt();\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "f04fe3cb.ba5d4"
            ]
        ]
    },
    {
        "id": "a533d22b.125d7",
        "type": "inject",
        "z": "232539f1.de52a6",
        "name": "toggle",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "f48b98e6.c6a488"
            ]
        ]
    },
    {
        "id": "f04fe3cb.ba5d4",
        "type": "debug",
        "z": "232539f1.de52a6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 440,
        "y": 280,
        "wires": []
    },
    {
        "id": "52b160d.b8e18a",
        "type": "link in",
        "z": "232539f1.de52a6",
        "name": "switchTPLink",
        "links": [
            "e48440f5.0ef4f"
        ],
        "x": 155,
        "y": 100,
        "wires": [
            [
                "73bd57e9.c48398",
                "4ec3b595.9aa2fc"
            ]
        ]
    },
    {
        "id": "e48440f5.0ef4f",
        "type": "link out",
        "z": "9556cd1.486d63",
        "name": "",
        "links": [
            "52b160d.b8e18a"
        ],
        "x": 615,
        "y": 340,
        "wires": []
    },
    {
        "id": "eb9ee0d.9eac82",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "TPLink",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "73bd57e9.c48398",
        "type": "debug",
        "z": "232539f1.de52a6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "4ec3b595.9aa2fc",
        "type": "function",
        "z": "232539f1.de52a6",
        "name": "",
        "func": "const { login } = global.get(\"tplink\");\nconst {payload: {id, on = false}} = msg;\n\nconst doIt = async () => {\n    const tplink = flow.get(\"tplink\") || await login(\"hello@jfdi.info\", \"8@yy6J8wT*UKjNY)RVC8CRGSj.?oS&\", \"TermID\");\n    flow.set(\"tplink\", tplink);\n    const deviceList = await tplink.getDeviceList();\n    const device = await tplink.getHS100(id);\n    const setPower = (id, on) => on ? device.powerOn() : device.powerOff();\n    return await setPower(id, on);\n}\n\ndoIt().then(result => node.send({payload: result}));\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 100,
        "wires": [
            [
                "a71d2bcd.c695b8"
            ]
        ]
    },
    {
        "id": "a71d2bcd.c695b8",
        "type": "debug",
        "z": "232539f1.de52a6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 420,
        "y": 100,
        "wires": []
    },
    {
        "id": "aedf1823.ccc008",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "serverName",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 930,
        "y": 340,
        "wires": [
            [
                "e2f55e4a.29c3a",
                "f5699f78.fd88d"
            ]
        ]
    },
    {
        "id": "e2f55e4a.29c3a",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "fromEnv",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "WEBSITE_SITE_NAME",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "fe20f9b3.3bcd68"
            ]
        ]
    },
    {
        "id": "fe20f9b3.3bcd68",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1270,
        "y": 340,
        "wires": []
    },
    {
        "id": "b1870ea.a3179f",
        "type": "inject",
        "z": "7c5e300a.a71d9",
        "name": "appSetting",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 920,
        "y": 420,
        "wires": [
            [
                "d28ca5e8.dca838",
                "9d7983a6.1bc43"
            ]
        ]
    },
    {
        "id": "d28ca5e8.dca838",
        "type": "change",
        "z": "7c5e300a.a71d9",
        "name": "fromEnv",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "MQTT_BROKER_ADDRESS",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 420,
        "wires": [
            [
                "b8f550c3.0add2"
            ]
        ]
    },
    {
        "id": "b8f550c3.0add2",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1270,
        "y": 420,
        "wires": []
    },
    {
        "id": "b46f1990.eb2188",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 1440,
        "wires": []
    },
    {
        "id": "6cb70c4c.b4d7f4",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send scene state",
        "links": [
            "8654378a.3ba4c8"
        ],
        "x": 975,
        "y": 280,
        "wires": []
    },
    {
        "id": "62ecce82.ac146",
        "type": "debug",
        "z": "6dba87b8.b5f088",
        "name": "API",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 40,
        "wires": []
    },
    {
        "id": "5c7b3969.fc9648",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 1440,
        "wires": []
    },
    {
        "id": "78a9fff0.07a9e",
        "type": "link out",
        "z": "6dba87b8.b5f088",
        "name": "send room state",
        "links": [
            "5c234450.36c1ac"
        ],
        "x": 975,
        "y": 160,
        "wires": []
    },
    {
        "id": "1de0647a.09283c",
        "type": "debug",
        "z": "9556cd1.486d63",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 530,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f5699f78.fd88d",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "msg.payload = env.get(\"WEBSITE_SITE_NAME\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "d4aa705f.bf6da"
            ]
        ]
    },
    {
        "id": "d4aa705f.bf6da",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1270,
        "y": 300,
        "wires": []
    },
    {
        "id": "9d7983a6.1bc43",
        "type": "function",
        "z": "7c5e300a.a71d9",
        "name": "",
        "func": "msg.payload = env.get(\"MQTT_BROKER_ADDRESS\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "df4f5f9f.a9577"
            ]
        ]
    },
    {
        "id": "df4f5f9f.a9577",
        "type": "debug",
        "z": "7c5e300a.a71d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1270,
        "y": 380,
        "wires": []
    },
    {
        "id": "6f7fdf7a.5eeca",
        "type": "subflow:2161b62e.a025aa",
        "z": "8d7a0ee3.fbbaf",
        "name": "auth",
        "env": [],
        "x": 290,
        "y": 260,
        "wires": [
            [
                "4dcf760a.084298",
                "cf687187.0f406"
            ],
            [
                "962065a7.49d0c8"
            ]
        ]
    },
    {
        "id": "cf687187.0f406",
        "type": "function",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "func": "const G = global.get(\"globals\");\nconst {eventId: rawEventId, accountId, buildingId} = msg.req.params;\nconst eventId = rawEventId.toLowerCase().replace(/ /g, \"_\");\nconst [, cameraId] = eventId.split(\".\");\n\nreturn {\n    ...msg,\n    eventId,\n    accountId,\n    buildingId,\n    payload: cameraId\n};",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "8bfa4cec.2ce1b",
                "f003de93.1438a"
            ]
        ]
    },
    {
        "id": "9494adee.a9cd5",
        "type": "http in",
        "z": "8d7a0ee3.fbbaf",
        "name": "POST event trigger",
        "url": "/BobbAPI/2.0/events/:accountId/:buildingId/:eventId/:authKey",
        "method": "post",
        "upload": false,
        "swaggerDoc": "fc9d4019.cb0ad",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "6f7fdf7a.5eeca",
                "e8451868.f41738"
            ]
        ]
    },
    {
        "id": "e8451868.f41738",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 290,
        "y": 180,
        "wires": []
    },
    {
        "id": "962065a7.49d0c8",
        "type": "debug",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "d2545b9e.f18e88",
        "type": "http in",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "url": "/BobbAPI/2.0/webhook",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1320,
        "wires": [
            [
                "b7e23e43.2960f"
            ]
        ]
    },
    {
        "id": "b7e23e43.2960f",
        "type": "http response",
        "z": "8d7a0ee3.fbbaf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 420,
        "y": 1320,
        "wires": []
    },
    {
        "id": "855886ae.2c69c8",
        "type": "inject",
        "z": "e74fac43.1f2b6",
        "name": "joel isn't here",
        "topic": "jjeffery",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 110,
        "y": 920,
        "wires": [
            [
                "4983679a.0d3fd8"
            ]
        ]
    },
    {
        "id": "4983679a.0d3fd8",
        "type": "function",
        "z": "e74fac43.1f2b6",
        "name": "",
        "func": "const {payload: present, topic: personId} = msg;\n\nnode.status({text: present});\n\nreturn {\n    accountId: \"jfdi\",\n    buildingId: \"studio\",\n    source: \"tracking\",\n    personId,\n    score: present ? 10 : -10\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 270,
        "y": 920,
        "wires": [
            [
                "1d51cf24.b143e1"
            ]
        ]
    }
]